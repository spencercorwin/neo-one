{"version":3,"sources":["webpack:///index.ts","webpack:///common.ts","webpack:///errors.ts","webpack:///utils.ts","webpack:///ContractParameterBase.ts","webpack:///Serializable.ts","webpack:///StackItemType.ts","webpack:///StackItemBase.ts","webpack:///AttributeBaseModel.ts","webpack:///Input.ts","webpack:///Block.ts","webpack:///BlockData.ts","webpack:///Account.ts","webpack:///AccountUnclaimed.ts","webpack:///AccountUnspent.ts","webpack:///ActionBase.ts","webpack:///Asset.ts","webpack:///TransactionData.ts","webpack:///StorageItem.ts","webpack:///Validator.ts","webpack:///InvocationData.ts","webpack:///InvocationResultBase.ts","webpack:///StorageChangeAddModifyBase.ts","webpack:///StorageChangeBase.ts","webpack:///ValidatorsCount.ts","webpack:///getValidators.ts","webpack:///vm.ts","webpack:///wrapExecuteScripts.ts","webpack:///disassembleByteCode.ts","webpack:///vmUtils.ts","webpack:///ObjectStackItem.ts","webpack:///Command.ts","webpack:///types.ts","webpack:///crypto.ts","webpack:///BinaryWriter.ts","webpack:///TransactionBaseModel.ts","webpack:///TransactionTypeModel.ts","webpack:///IOHelper.ts","webpack:///constants.ts","webpack:///FullNode.ts","webpack:///ScriptBuilder.ts","webpack:///RegisterTransaction.ts","webpack:///UInt160Attribute.ts","webpack:///UInt256Attribute.ts","webpack:///ECPointAttribute.ts","webpack:///BufferAttribute.ts","webpack:///Output.ts","webpack:///MinerTransaction.ts","webpack:///WitnessModel.ts","webpack:///IssueTransaction.ts","webpack:///ClaimTransaction.ts","webpack:///EnrollmentTransaction.ts","webpack:///ContractTransaction.ts","webpack:///StateTransaction.ts","webpack:///PublishTransaction.ts","webpack:///InvocationTransaction.ts","webpack:///read.ts","webpack:///streamToObservable.ts","webpack:///LogAction.ts","webpack:///AttributeUsageModel.ts","webpack:///NotificationAction.ts","webpack:///SignatureContractParameter.ts","webpack:///Hash256ContractParameter.ts","webpack:///PublicKeyContractParameter.ts","webpack:///StringContractParameter.ts","webpack:///InteropInterfaceContractParameter.ts","webpack:///VoidContractParameter.ts","webpack:///InvocationResultError.ts","webpack:///InvocationResultSuccess.ts","webpack:///StorageChangeModify.ts","webpack:///StorageChangeAdd.ts","webpack:///StorageChangeDelete.ts","webpack:///convertChange.ts","webpack:///comlink.ts","webpack:///endpoint.ts","webpack:///getConfiguration.ts","webpack:///ValidatorCache.ts","webpack:///WriteBatchBlockchain.ts","webpack:///StorageCache.ts","webpack:///execute.ts","webpack:///opcodes.ts","webpack:///syscalls.ts","webpack:///ECPointStackItem.ts","webpack:///UInt256StackItem.ts","webpack:///UInt160StackItem.ts","webpack:///EnumeratorStackItem.ts","webpack:///StackItemEnumerator.ts","webpack:///NetworkAddress.ts","webpack:///Message.ts","webpack:///UnsignedConsensusPayload.ts","webpack:///ChangeViewConsensusMessage.ts","webpack:///PrepareRequestConsensusMessage.ts","webpack:///PrepareResponseConsensusMessage.ts","webpack:///InventoryType.ts","webpack:///ConsensusQueue.ts","webpack:///ConsensusContext.ts","webpack:///JSONHelper.ts","webpack:///InitialContext.ts","webpack:///SignatureSentContext.ts","webpack:///RequestSentContext.ts","webpack:///BlockSentContext.ts","webpack:///handlePersistBlock.ts","webpack:///handleConsensusPayload.ts","webpack:///ViewChangingContext.ts","webpack:///handleTransactionReceived.ts","webpack:///runConsensus.ts","webpack:///Network.ts","webpack:///referenceCounter.ts","webpack:///EquatableKeyStackItem.ts","webpack:///JSONRPCLocalProvider.ts","webpack:///finalize.ts","webpack:///createMain.ts","webpack:///Attribute.ts","webpack:///MerkleTree.ts","webpack:///Transaction.ts","webpack:///StateDescriptor.ts","webpack:///levelUpStorage.ts","webpack:///keys.ts","webpack:///Action.ts","webpack:///ContractParameter.ts","webpack:///AssetTypeModel.ts","webpack:///InvocationResult.ts","webpack:///StorageChange.ts","webpack:///Blockchain.ts","webpack:///loggers.ts","webpack:///HeaderStackItem.ts","webpack:///BlockStackItem.ts","webpack:///TransactionStackItem.ts","webpack:///AccountStackItem.ts","webpack:///ContractParameterTypeModel.ts","webpack:///AssetStackItem.ts","webpack:///ContractStackItem.ts","webpack:///AttributeStackItem.ts","webpack:///InputStackItem.ts","webpack:///OutputStackItem.ts","webpack:///WitnessStackItem.ts","webpack:///IteratorStackItem.ts","webpack:///StackItemIterator.ts","webpack:///ValidatorStackItem.ts","webpack:///ConsensusPayloadStackItem.ts","webpack:///StateDescriptorTypeModel.ts","webpack:///Node.ts","webpack:///GetBlocksPayload.ts","webpack:///VersionPayload.ts","webpack:///AddrPayload.ts","webpack:///ConsensusPayload.ts","webpack:///ConsensusMessage.ts","webpack:///FilterAddPayload.ts","webpack:///FilterLoadPayload.ts","webpack:///InvPayload.ts","webpack:///HeadersPayload.ts","webpack:///StorageFlagsModel.ts","webpack:///MerkleBlockPayload.ts","webpack:///neverComplete.ts","webpack:///Consensus.ts","webpack:///mergeScanLatest.ts","webpack:///cloneInitial.ts","webpack:///cloneBlockSent.ts","webpack:///RequestReceivedContext.ts","webpack:///createHandler.ts","webpack:///BufferAttributeModel.ts","webpack:///ECPointAttributeModel.ts","webpack:///UInt160AttributeModel.ts","webpack:///UInt256AttributeModel.ts","webpack:///ClaimTransactionModel.ts","webpack:///InputModel.ts","webpack:///InvocationTransactionModel.ts","webpack:///OutputModel.ts","webpack:///ArrayStackItem.ts","webpack:///ArrayLikeStackItem.ts","webpack:///JSONRPCProvider.ts","webpack:///TransactionBase.ts","webpack:///BufferStackItem.ts","webpack:///precomputed.ts","webpack:///BooleanStackItem.ts","webpack:///IntegerStackItem.ts","webpack:///StorageContextStackItem.ts","webpack:///StructStackItem.ts","webpack:///MapStackItem.ts","webpack:///BaseState.ts","webpack:///ContractPropertyStateModel.ts","webpack:///Witness.ts","webpack:///ScriptContainer.ts","webpack:///StorageChangeType.ts","webpack:///deserializeStackItem.ts","webpack:///ByteArrayContractParameter.ts","webpack:///BooleanContractParameter.ts","webpack:///Hash160ContractParameter.ts","webpack:///IntegerContractParameter.ts","webpack:///ArrayContractParameter.ts","webpack:///MapContractParameter.ts","webpack:///AttributeBase.ts","webpack:///BlockBase.ts","webpack:///AccountInput.ts","webpack:///ConsensusMessageType.ts","webpack:///Context.ts","webpack:///jsonRPCLocalProvider.init.ts","webpack:///makeErrorWithCode.ts","webpack:///labels.ts","webpack:///tracing.ts","webpack:///BinaryReader.ts","webpack:///IssueTransactionModel.ts","webpack:///ContractModel.ts","webpack:///Header.ts","webpack:///Contract.ts","webpack:///ActionType.ts","webpack:///ConsensusMessageBase.ts","webpack:///HeaderContext.ts"],"names":["_Blockchain__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","o","d","__webpack_exports__","_CallReceipt__WEBPACK_IMPORTED_MODULE_1__","_Equatable__WEBPACK_IMPORTED_MODULE_2__","_Node__WEBPACK_IMPORTED_MODULE_3__","_Settings__WEBPACK_IMPORTED_MODULE_4__","_Storage__WEBPACK_IMPORTED_MODULE_5__","_net__WEBPACK_IMPORTED_MODULE_6__","InvalidFormatError","Object","_neo_one_utils__WEBPACK_IMPORTED_MODULE_3__","reason","concat","undefined","add0x","value","strip0x","startsWith","substring","reverse","src","mutableOut","Buffer","allocUnsafe","length","i","j","isUInt160","asUInt160","bufferToUInt160","uInt160ToHex","toString","hexToUInt160","from","stringToUInt160","ZERO_UINT160","alloc","ZERO_UINT256","isUInt256","asUInt256","bufferToUInt256","uInt256ToHex","hexToUInt256","uInt256ToBuffer","stringToUInt256","ECPOINT_INFINITY","isECPoint","equals","asECPoint","bufferToECPoint","ecPointToHex","hexToECPoint","stringToECPoint","isPrivateKey","asPrivateKey","bufferToPrivateKey","privateKeyToHex","hexToPrivateKey","stringToPrivateKey","fixedFromDecimal","decimals","bn_js__WEBPACK_IMPORTED_MODULE_5__","mul","valueBigNumber","bignumber_js__WEBPACK_IMPORTED_MODULE_4___default","a","dBigNumber","times","D8","fixed8FromDecimal","fixedToDecimal","div","NEGATIVE_SATOSHI_FIXED8","TEN_FIXED8","ONE_HUNDRED_FIXED8","FOUR_HUNDRED_FIXED8","FIVE_HUNDRED_FIXED8","ONE_THOUSAND_FIXED8","FIVE_THOUSAND_FIXED8","TEN_THOUSAND_FIXED8","ONE_HUNDRED_MILLION_FIXED8","common","NEO_ADDRESS_VERSION","NEO_PRIVATE_KEY_VERSION","ECPOINT_BUFFER_BYTES","ECPOINT_INFINITY_BYTE","PRIVATE_KEY_BUFFER_BYTES","UINT160_BUFFER_BYTES","UINT256_BUFFER_BYTES","NEO_ASSET_HASH","GAS_ASSET_HASH","uInt160ToBuffer","uInt160ToString","uInt160Equal","b","uInt256ToString","uInt256Equal","toUInt32LE","bytes","slice","toNumber","ecPointToBuffer","ecPointToString","ecPointCompare","aHex","bHex","ecPointEqual","ecPointIsInfinity","privateKeyToBuffer","privateKeyToString","fixed8ToDecimal","bn","paramTo","param","callbacks","Array","isArray","array","Map","map","uInt160","uInt256","ecPoint","isBN","number","string","boolean","buffer","object","_errors__WEBPACK_IMPORTED_MODULE_6__","UnknownNetworkError","_neo_one_utils__WEBPACK_IMPORTED_MODULE_1__","name","UnknownAccountError","address","InvalidArgumentError","typeName","argumentName","extra","String","InvalidContractArgumentCountError","expectedLength","foundLength","InvocationCallError","message","InvalidEventError","NoAccountError","CannotSendToContractError","CannotSendFromContractError","NoContractDeployedError","networkType","JSONRPCError","responseError","code","InvalidRPCResponseError","HTTPError","status","text","UnknownBlockError","NothingToSendError","NothingToRefundError","NothingToClaimError","id","network","InvalidTransactionError","InvokeError","InsufficientFundsError","total","expected","InsufficientSystemFeeError","FundsInUseError","numInputs","MissingTransactionDataError","hash","RelayTransactionError","LockedAccountError","NothingToTransferError","DeleteUserAccountUnsupportedError","UpdateUserAccountUnsupportedError","TransferArgumentExpectedError","HashArgumentExpectedError","NEOONEOneDataProviderSetRPCURLError","NotImplementedError","account","index","path","UnknownOpError","byteCode","InvalidContractParameterError","parameter","JSON","stringify","type","Base58CheckError","InvalidAddressError","TooManyPublicKeysError","amount","InvalidNumberOfKeysError","m","InvalidPrivateKeyError","privateKey","_common__WEBPACK_IMPORTED_MODULE_2__","InvalidSignatureError","InvalidSysCallError","InvalidVMStateError","state","InvalidParamError","paramType","InvalidAssetTypeJSONError","InvalidAssetTypeError","assetType","InvalidStorageFlagsJSONError","InvalidStorageFlagsError","storageFlags","InvalidStateDescriptorTypeError","stateDescriptorType","InvalidContractParameterTypeJSONError","InvalidContractParameterTypeError","contractParameterType","InvalidAttributeUsageError","transactionAttributeUsage","InvalidAttributeUsageJSONError","InvalidTransactionTypeError","transactionType","InvalidVMByteCodeError","InvalidSignaturesError","InvalidBIP32VersionError","version","InvalidBIP32ExtendedKeyError","key","InvalidBIP32ChildIndexError","InvalidBIP32HardenedError","InvalidBIP32SerializePrivateNodeError","USHORT_MAX","bn_js__WEBPACK_IMPORTED_MODULE_2__","USHORT_MAX_PLUS_ONE","addn","UINT_MAX","ZERO","ONE","NEGATIVE_ONE","ONE_HUNDRED_MILLION","ONE_THOUSAND_TWENTY_FOUR","fromSignedBuffer","fromTwos","utils","FD","FFFF","FFFFFFFF","TWO","INT_MAX_VALUE","SATOSHI","NEGATIVE_SATOSHI","USHORT_MAX_NUMBER","USHORT_MAX_NUMBER_PLUS_ONE","UINT_MAX_NUMBER","EIGHT","TEN","SIXTEEN","ZERO_BIG_NUMBER","bignumber_js__WEBPACK_IMPORTED_MODULE_1___default","NEGATIVE_ONE_BIG_NUMBER","toSignedBuffer","isNeg","negBuff","toTwos","byteLength","toArrayLike","negNormalValue","negPaddedBuff","eq","buff","normalValue","paddedBuff","paddedValue","bigNumberToBN","lazy","getValue","randomUInt","Math","floor","random","ContractParameterBase","_Serializable__WEBPACK_IMPORTED_MODULE_0__","_utils__WEBPACK_IMPORTED_MODULE_1__","[object Object]","this","serializeWire","serializeWireBase","bind","_ref","reader","readUInt8","_options","Error","options","deserializeWireBase","context","asBuffer","some","writer","writeUInt8","_context","createSerializeWire","_BinaryWriter__WEBPACK_IMPORTED_MODULE_0__","toBuffer","StackItemType","InvalidStackItemTypeError","stackItemType","assertStackItemType","isStackItemType","StackItemBase","mutableCount","referenceCount","seen","arguments","Set","has","add","incrementInternal","decrementInternal","other","thisValue","asBufferMaybe","otherValue","nextSeen","serializeInternal","currentBlockIndex","_constants__WEBPACK_IMPORTED_MODULE_5__","asBigIntegerUnsafe","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_4__","_a","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_2__","toUTF8","size","convertJSON","convertJSONInternal","_seen","stackItems","reduce","acc","val","increment","decrement","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_3__","_StackItemType__WEBPACK_IMPORTED_MODULE_7__","ByteArray","writeVarBytesLE","AttributeBaseModel","usage","InvalidValueArrayError","CircularReferenceError","InvalidValueBufferError","InvalidValueEnumeratorError","InvalidValueHeaderError","InvalidValueBlockError","InvalidValueBlockBaseError","InvalidValueTransactionError","InvalidValueWitnessError","InvalidValueAttributeError","InvalidValueAttributeStackItemError","InvalidValueInputError","InvalidValueMapStackItemError","InvalidValueOutputError","InvalidValueAccountError","InvalidValueAssetError","InvalidValueContractError","InvalidValueValidatorError","InvalidValueIteratorError","InvalidValueStorageContextStackItemError","UnsupportedStackItemSerdeError","InvalidStorageStackItemEnumeratorError","InvalidStorageStackItemIteratorError","MissingStackItemKeyError","InvalidRecursiveSerializeError","IntegerTooLargeError","_neo_one_utils__WEBPACK_IMPORTED_MODULE_0__","Input","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_4__","toKeyString","hashHex","readUInt256","readUInt16LE","_utils__WEBPACK_IMPORTED_MODULE_5__","txid","writeUInt256","vout","hasDuplicateInputs","inputs","inputKeys","input","hasIntersectingInputs","inputsA","Block","_BlockBase__WEBPACK_IMPORTED_MODULE_5__","previousHash","timestamp","consensusData","nextConsensus","script","transactions","merkleRoot","_crypto__WEBPACK_IMPORTED_MODULE_6__","computeRoot","transaction","super","sizeExclusive","_utils__WEBPACK_IMPORTED_MODULE_12__","sizeOfArray","headerInternal","_Header__WEBPACK_IMPORTED_MODULE_8__","Promise","all","async","getNetworkFee","fee","blockBase","deserializeBlockBaseWireBase","readArray","_transaction__WEBPACK_IMPORTED_MODULE_10__","_utils__WEBPACK_IMPORTED_MODULE_13__","header","_ref2","calculateNetworkFee","getSystemFee","completely","_transaction__WEBPACK_IMPORTED_MODULE_11__","Miner","_errors__WEBPACK_IMPORTED_MODULE_7__","verifyBase","verifyComplete","resolve","writeArray","blockBaseJSON","serializeBlockBaseJSON","previousblockhash","merkleroot","time","nonce","nextconsensus","tx","serializeJSON","confirmations","_ref3","genesisBlock","tryGetBlock","tryGetHeader","verifyScript","hashOrIndex","previousHeader","failureMessage","scriptContainer","_ScriptContainer__WEBPACK_IMPORTED_MODULE_9__","witness","verifyConsensus","verifyTransactions","verifyNetworkFee","_ref4","getValidators","validators","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_4__","getConsensusAddress","failureResults","verify","isSpent","getAsset","getOutput","tryGetAccount","calculateClaimAmount","standbyValidators","getAllValidators","currentHeight","governingToken","utilityToken","fees","registerValidatorFee","filter","verifyResults","_ref5","failureResult","find","_ref6","networkFee","minerTransaction","minerTransactionNetworkFee","outputs","output","serializeHeaderHash","deserializeHeaderHash","serializeBlockHash","deserializeBlockHash","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_0__","BlockData","_utils__WEBPACK_IMPORTED_MODULE_3__","lastGlobalTransactionIndex","lastGlobalActionIndex","systemFee","sizeInternal","sizeOfUInt256","sizeOfFixed8","readInt64LE","readFixed8","writeInt64LE","writeFixed8","Account","_neo_one_client_full_common__WEBPACK_IMPORTED_MODULE_6__","isFrozen","votes","balances","_utils__WEBPACK_IMPORTED_MODULE_8__","_Serializable__WEBPACK_IMPORTED_MODULE_7__","sizeOfUInt8","sizeOfUInt160","sizeOfBoolean","vote","sizeOfECPoint","sizeOfObject","readUInt160","readBoolean","readECPoint","readObject","_utils__WEBPACK_IMPORTED_MODULE_9__","values","every","lte","asset","balance","writeUInt160","writeBoolean","writeECPoint","lodash_pickBy__WEBPACK_IMPORTED_MODULE_2___default","gt","writeObject","unspent","unclaimed","getUnspent","getUnclaimed","script_hash","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_5__","frozen","entries","AccountUnclaimed","_AccountInput__WEBPACK_IMPORTED_MODULE_0__","AccountUnspent","createDeserializeWire","_utils__WEBPACK_IMPORTED_MODULE_0__","ActionBase","_Serializable__WEBPACK_IMPORTED_MODULE_1__","_utils__WEBPACK_IMPORTED_MODULE_2__","scriptHash","constructor","VERSION","writeUInt64LE","writeUInt64","deserializeActionBaseWireBase","readUInt64LE","Asset","_neo_one_client_full_common__WEBPACK_IMPORTED_MODULE_4__","_neo_one_utils__WEBPACK_IMPORTED_MODULE_5__","_AssetType__WEBPACK_IMPORTED_MODULE_6__","_utils__WEBPACK_IMPORTED_MODULE_7__","InvalidAssetError","available","precision","feeMode","feeAddress","owner","admin","issuer","expiration","verifyAsset","sizeOfVarString","sizeOfUInt32LE","readVarString","readUInt32LE","writeVarString","writeUInt32LE","parse","scriptHashToAddress","addressVersion","CreditFlag","DutyFlag","nameBuffer","Invoice","mod","pow","subn","TransactionData","_neo_one_client_full_common__WEBPACK_IMPORTED_MODULE_1__","_Serializable__WEBPACK_IMPORTED_MODULE_2__","blockHash","startHeight","globalIndex","endHeights","claimed","StorageItem","flags","sizeOfVarBytesLE","readVarBytesLE","_utils__WEBPACK_IMPORTED_MODULE_6__","writeBuffer","Validator","_neo_one_client_full_common__WEBPACK_IMPORTED_MODULE_3__","_Serializable__WEBPACK_IMPORTED_MODULE_4__","publicKey","registered","InvocationData","assetHash","contractHashes","deletedContractHashes","migratedContractHashes","voteUpdates","blockIndex","transactionIndex","actionIndexStart","actionIndexStop","result","storageChanges","sizeOfUInt64LE","_invocationResult__WEBPACK_IMPORTED_MODULE_3__","_storageChange__WEBPACK_IMPORTED_MODULE_5__","contractHash","to","storageChange","InvocationResultBase","_contractParameter__WEBPACK_IMPORTED_MODULE_3__","gasConsumed","gasCost","stack","contractParameter","StorageChangeAddModifyBase","_StorageChangeBase__WEBPACK_IMPORTED_MODULE_0__","deserializeStorageChangeWireBase","StorageChangeBase","_StorageChangeType__WEBPACK_IMPORTED_MODULE_4__","ValidatorsCount","processTransaction","blockchain","cache","allOutputs","get","negative","neg","getAccount","updateAccountBalance","settings","updateValidatorVotes","updateValidatorsCountVotes","processOutput","accountHashes","touchedValidators","touchedValidatorsSet","validator","getValidator","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_5__","deleteValidator","getDescriptorChanges","governingTokenHash","accountChanges","validatorVotesChanges","validatorRegisteredChanges","validatorsCountChanges","allDescriptors","descriptors","accountDescriptors","descriptor","groupedAccountDescriptors","lodash_groupBy__WEBPACK_IMPORTED_MODULE_3___default","getBalance","voteHex","sub","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_6__","validatorDescriptors","byte","validatorChanges","current","_ValidatorCache__WEBPACK_IMPORTED_MODULE_12__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_9__","State","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_10__","tryGetValidatorsCount","addValidatorsCount","updateValidatorsCount","tryGetValidator","addValidator","updateValidator","validatorsCount","mutableValidatorsCountVotes","forEach","_ref7","publicKeyHex","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_7__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_8__","processStateTransaction","getValidatorsCount","update","numValidators","max","weightedAverage","weightedFilter","count","_ref8","_ref9","bn_js__WEBPACK_IMPORTED_MODULE_11__","_ref10","weight","standbyValidatorsSet","validatorsPublicKeySet","lodash_take__WEBPACK_IMPORTED_MODULE_2___default","sort","aValidator","bValidator","cmp","standbyValidatorsArray","hex","aKey","bKey","GenesisBlockNotRegisteredError","WitnessVerifyError","UnknownVerifyError","InvalidClaimError","CoinClaimedError","CoinUnspentError","governingHash","unspentCoins","TriggerType","NULL_ACTION","transactionHash","wrapExecuteScripts","execute","Halt","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_3__","errorMessage","error","createHexString","mutableResult","padStart","disassembleByteCode","hasMore","pc","push","pushBytes","PUSHBYTES1","PUSHBYTES75","pushData1","PUSHDATA1","pushData2","PUSHDATA2","pushData4","PUSHDATA4","opCode","numBytes","readInt32LE","readBytes","JMP","JMPIF","JMPIFNOT","CALL","readInt16LE","APPCALL","TAILCALL","mutableAppBytes","SYSCALL","toASCII","CALL_E","CALL_ET","returnValueCount","parametersCount","CALL_ED","CALL_EDT","CALL_I","jumpVal","leftPad","lastByte","bitwise__WEBPACK_IMPORTED_MODULE_2__","read","create","lodash_range__WEBPACK_IMPORTED_MODULE_0___default","vmUtils","_errors__WEBPACK_IMPORTED_MODULE_4__","toStorageContext","write","item","asStorageContextStackItem","vm","callingScriptHash","entryScriptHash","isReadOnly","shiftLeft","shift","shiftRight","bn_js__WEBPACK_IMPORTED_MODULE_3__","lt","bitwiseOp","func","aBuffer","bBuffer","ObjectStackItem","_StackItemBase__WEBPACK_IMPORTED_MODULE_3__","_errors__WEBPACK_IMPORTED_MODULE_2__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_1__","Command","assertCommand","InvalidCommandError","command","isCommand","_event__WEBPACK_IMPORTED_MODULE_0__","_Network__WEBPACK_IMPORTED_MODULE_1__","_types__WEBPACK_IMPORTED_MODULE_2__","createEndpoint","host","port","join","getEndpointConfig","endpoint","split","parseInt","ecCache","ec","elliptic__WEBPACK_IMPORTED_MODULE_8__","PresetCurve","_precomputed__WEBPACK_IMPORTED_MODULE_14__","sha256","_models__WEBPACK_IMPORTED_MODULE_13__","hash160","_common__WEBPACK_IMPORTED_MODULE_11__","crypto__WEBPACK_IMPORTED_MODULE_7__","process","versions","hasOwnProperty","digest","rmd160","hash256","hmacSha512","data","sign","sig","r","s","rmPadding","buf","len","constructLength","arr","octets","log","LN2","toECPointFromKeyPair","pair","getPublic","mutablePublicKeyCache","privateKeyToPublicKey","privateKeyHex","keyFromPrivate","validate","_errors__WEBPACK_IMPORTED_MODULE_12__","createKeyPair","genKeyPair","getPrivate","toScriptHash","base58Checksum","base58CheckEncode","checksum","bs58__WEBPACK_IMPORTED_MODULE_5___default","encode","base58CheckDecode","decode","payload","payloadChecksum","mutableBuffer","copy","createInvocationScriptForSignature","signature","builder","_ScriptBuilder__WEBPACK_IMPORTED_MODULE_15__","emitPush","build","createVerificationScript","emitPushECPoint","emitOp","createWitnessForSignature","Witness","verification","invocation","getVerificationScriptHash","compareKeys","aPublic","bPublic","getX","getY","sortKeys","publicKeys","keyFromPublic","createMultiSignatureVerificationScript","mIn","emitPushInt","publicKeysSorted","createMultiSignatureInvocationScript","signatures","publicKeyToScriptHash","privateKeyToScriptHash","privateKeyToAddress","NEP2_KDFPARAMS","getNEP2Derived","password","salt","reject","scrypt_js__WEBPACK_IMPORTED_MODULE_9___default","normalize","_progress","getNEP2Salt","isMultiSigContract","n","PUSH16","PUSH1","CHECKMULTISIG","isSignatureContract","CHECKSIG","BIP32_VERSION","getFingerprint","deriveChildKey","node","hardened","writeUInt32BE","sha","chainCode","shaLeft","bn_js__WEBPACK_IMPORTED_MODULE_4__","shaRight","childKeyPrivate","depth","parentFingerprint","parentKey","childKey","g","isInfinity","compressedChildKey","crypto","addPublicKey","sha1","signatureIn","backHalf","res","_neo_one_ec_key__WEBPACK_IMPORTED_MODULE_2___default","crv","createVerify","toECPoint","addressToScriptHash","decodedAddress","createInvocationScript","createWitness","createMultiSignatureWitness","publicKeyToSignature","notNull","privateKeyToWIF","privateKeyVersion","wif__WEBPACK_IMPORTED_MODULE_10___default","wifToPrivateKey","wif","privateKeyDecoded","isNEP2","encryptedKey","decoded","encryptNEP2","derived","derived1","derived2","cipher","setAutoPadding","end","buffer_xor__WEBPACK_IMPORTED_MODULE_6___default","ciphertext","decryptNEP2","decipher","plainText","addressSalt","createPrivateKey","isStandardContract","parseExtendedKey","readUInt32BE","parentFingerprintIn","keyData","privateKeyIn","parseMasterSeed","seedIn","seed","hmac","serializeHDNode","privateNode","Op","fn","next","mutableNext","nextOp","writeByte","position","writeFromBuffer","source","target","offset","bit","BinaryWriter","head","mutableTail","mutableLength","finish","pos","writeInt16LE","writeUInt16LE","writeUInt16BE","writeInt32LE","stringBuffer","padLength","writeVarUIntLE","valueIn","bn_js__WEBPACK_IMPORTED_MODULE_1__","computedBuffer","op","newOp","setNext","MAX_TRANSACTION_ATTRIBUTES","TransactionBaseModel","_common__WEBPACK_IMPORTED_MODULE_0__","_crypto__WEBPACK_IMPORTED_MODULE_1__","_Serializable__WEBPACK_IMPORTED_MODULE_3__","_WitnessModel__WEBPACK_IMPORTED_MODULE_4__","attributes","scripts","serializeUnsigned","serializeUnsignedBase","hashHexInternal","messageInternal","hashIn","hashInternal","clone","WitnessConstructor","_writer","serializeExclusiveBase","attribute","TransactionTypeModel","assertTransactionType","_errors__WEBPACK_IMPORTED_MODULE_0__","isTransactionType","_common__WEBPACK_IMPORTED_MODULE_3__","sizeOfVarUIntLE","IOHelper","sizeOfUInt16LE","sizeOfFixedString","sizeOf","obj","MAX_SHL_SHR","MIN_SHL_SHR","MAX_SIZE_BIG_INTEGER","MAX_STACK_SIZE","MAX_ITEM_SIZE","MAX_INVOCATION_STACK_SIZE","MAX_ARRAY_SIZE","MAX_ARRAY_SIZE_BN","BLOCK_HEIGHT_YEAR","BLOCK_HEIGHT_MAX_SIZE_CHECKS","FEES","FREE_GAS","Number","MAX_SAFE_INTEGER","ratio","TWENTY","ONE_HUNDRED","TWO_HUNDRED","FOUR_HUNDRED","FIVE_HUNDRED","ONE_THOUSAND","FullNode","startPromise","startInternal","then","mutableSubscription","unsubscribe","_neo_one_utils__WEBPACK_IMPORTED_MODULE_9__","wait","resolved","primaryPrivateKey","_constants__WEBPACK_IMPORTED_MODULE_14__","PRIVATE_NET_PRIVATE_KEY","primaryPublicKey","PRIVATE_NET_PUBLIC_KEY","_neo_one_node_neo_settings__WEBPACK_IMPORTED_MODULE_4__","privateNet","storage","_neo_one_node_storage_levelup__WEBPACK_IMPORTED_MODULE_7__","db","levelup__WEBPACK_IMPORTED_MODULE_11___default","level_js__WEBPACK_IMPORTED_MODULE_10___default","memdown__WEBPACK_IMPORTED_MODULE_12___default","messageMagic","_neo_one_node_blockchain__WEBPACK_IMPORTED_MODULE_3__","_neo_one_node_vm__WEBPACK_IMPORTED_MODULE_8__","nodeOptions$","rxjs__WEBPACK_IMPORTED_MODULE_13__","consensus","enabled","_neo_one_node_protocol__WEBPACK_IMPORTED_MODULE_5__","environment","options$","createNetwork","_Network__WEBPACK_IMPORTED_MODULE_15__","handleError","start$","subscribe","complete","_neo_one_node_rpc_handler__WEBPACK_IMPORTED_MODULE_6__","InvalidActionTypeError","InvalidScriptContainerTypeError","VerifyError","InvalidConsensusMessageTypeError","UnsignedBlockError","stringHash","InvalidStorageChangeTypeError","storageChangeType","Byte","ByteBuffer","lodash_fromPairs__WEBPACK_IMPORTED_MODULE_0___default","isByteCode","SysCall","assertSysCall","isSysCall","VMState","assertVMState","isVMState","crypto__WEBPACK_IMPORTED_MODULE_1__","mutableCache","toSysCallHash","ScriptBuilder","mutableBuffers","pushParamCallbacks","emitPushArray","emitPushMap","emitPushUInt160","emitPushUInt256","emitPushString","emitPushBoolean","emitPushObject","buffers","_models_vm__WEBPACK_IMPORTED_MODULE_4__","emitOpByte","emitUInt8","emit","emitUInt16LE","emitUInt32LE","emitPushParam","params","emitPushParams","operation","_len","_key","_len2","_key2","emitAppCallInvocation","emitAppCallVerification","_len3","_key3","sysCall","_len4","_key4","sysCallBuffer","_BinaryWriter__WEBPACK_IMPORTED_MODULE_2__","byteCodeBuffer","constants","assign","_neo_one_utils__WEBPACK_IMPORTED_MODULE_10__","GENERATION_AMOUNT","GENERATION_AMOUNT_PRIVATE","ISSUE_AMOUNT_PRIVATE","getGenesisBlock","consensusAddress","PUSH0","scriptBuilder","UtilityToken","getUtilityToken","GoverningToken","getGoverningToken","decrementInterval","generationAmount","secondsPerBlock","maxTransactionsPerBlock","memPoolSize","RegisterTransaction","_TransactionBase__WEBPACK_IMPORTED_MODULE_9__","Register","getScriptHashesForVerifying","registerGetScriptHashesForVerifyingInternal","lazyAsync","hashes","deserializeTransactionBaseStartWireBase","deserializeTransactionBaseEndWireBase","transactionBaseJSON","serializeTransactionBaseJSON","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_6__","_AssetTypeModel__WEBPACK_IMPORTED_MODULE_0__","_ContractParameterTypeModel__WEBPACK_IMPORTED_MODULE_1__","_StateDescriptorTypeModel__WEBPACK_IMPORTED_MODULE_3__","_StorageFlagsModel__WEBPACK_IMPORTED_MODULE_4__","_WitnessModel__WEBPACK_IMPORTED_MODULE_5__","_transaction__WEBPACK_IMPORTED_MODULE_6__","_types__WEBPACK_IMPORTED_MODULE_7__","_vm__WEBPACK_IMPORTED_MODULE_8__","UInt160Attribute","_AttributeBase__WEBPACK_IMPORTED_MODULE_4__","deserializeAttributeWireBase","Script","UInt256Attribute","ContractHash","Vote","Hash1","Hash2","Hash3","Hash4","Hash5","Hash6","Hash7","Hash8","Hash9","Hash10","Hash11","Hash12","Hash13","Hash14","Hash15","ECPointAttribute","ECDH02","ECDH03","BufferAttribute","DescriptionUrl","Description","Remark","Remark1","Remark2","Remark3","Remark4","Remark5","Remark6","Remark7","Remark8","Remark9","Remark10","Remark11","Remark12","Remark13","Remark14","Remark15","Output","MAX_TRANSACTION_SIZE","MinerTransaction","_TransactionBase__WEBPACK_IMPORTED_MODULE_7__","results","verifyInternal","getTransactionResults","_","assetHex","_errors__WEBPACK_IMPORTED_MODULE_5__","WitnessModel","IssueTransaction","issueGetScriptHashesForVerifyingInternal","issuerHashes","_TransactionType__WEBPACK_IMPORTED_MODULE_8__","Issue","memPool","issued","innerAcc","ClaimTransaction","claims","claim","claimGetScriptHashesForVerifyingInternal","hashesSet","Claim","_Input__WEBPACK_IMPORTED_MODULE_8__","_common__WEBPACK_IMPORTED_MODULE_7__","claimAmount","catch","_value","EnrollmentTransaction","Enrollment","enrollmentGetScriptHashesForVerifyingInternal","pubkey","ContractTransaction","_TransactionBase__WEBPACK_IMPORTED_MODULE_5__","Contract","StateTransaction","stateGetScriptHashesForVerifyingInternal","mutableHashes","_state__WEBPACK_IMPORTED_MODULE_6__","PublishTransaction","contract","Publish","_Contract__WEBPACK_IMPORTED_MODULE_6__","parameterList","codeVersion","author","email","description","publishVersion","_neo_one_client_full_common__WEBPACK_IMPORTED_MODULE_5__","MAX_SCRIPT_SIZE","InvocationTransaction","Invocation","gas","tryGetInvocationData","invocationDataJSON","contracts","actions","action","invocationData","createTryGet","notFound","createTryGetLatest","latestKey","deserializeResult","createReadStorage","serializeKey","deserializeValue","serialized","tryGet","createAll$","minKey","maxKey","_streamToObservable__WEBPACK_IMPORTED_MODULE_3__","createValueStream","gte","pipe","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","createReadAllStorage","readStorage","all$","createReadGetAllStorage","getMinKey","getMaxKey","getAll$","keys","createReadMetadataStorage","streamToObservable","rxjs__WEBPACK_IMPORTED_MODULE_0__","getStream","observer","stream","done","cleanup","removeListener","onEnd","onError","onData","once","on","LogAction","_ActionBase__WEBPACK_IMPORTED_MODULE_0__","_ActionType__WEBPACK_IMPORTED_MODULE_1__","Log","serializeActionBaseJSON","AttributeUsageModel","assertAttributeUsage","toJSONAttributeUsage","assertAttributeUsageJSON","toAttributeUsage","isAttributeUsage","isAttributeUsageJSON","NotificationAction","_contractParameter__WEBPACK_IMPORTED_MODULE_0__","_ActionBase__WEBPACK_IMPORTED_MODULE_1__","_ActionType__WEBPACK_IMPORTED_MODULE_2__","args","Notification","arg","SignatureContractParameter","_ContractParameterBase__WEBPACK_IMPORTED_MODULE_3__","_ContractParameterType__WEBPACK_IMPORTED_MODULE_4__","Signature","deserializeContractParameterBaseWireBase","Hash256ContractParameter","_ContractParameterBase__WEBPACK_IMPORTED_MODULE_4__","_ContractParameterType__WEBPACK_IMPORTED_MODULE_5__","Hash256","PublicKeyContractParameter","PublicKey","StringContractParameter","_ContractParameterBase__WEBPACK_IMPORTED_MODULE_2__","_ContractParameterType__WEBPACK_IMPORTED_MODULE_3__","InteropInterfaceContractParameter","_ContractParameterBase__WEBPACK_IMPORTED_MODULE_1__","_ContractParameterType__WEBPACK_IMPORTED_MODULE_2__","InteropInterface","VoidContractParameter","Void","InvocationResultError","_InvocationResultBase__WEBPACK_IMPORTED_MODULE_5__","MAX_SIZE","deserializeInvocationResultWireBase","Fault","gas_consumed","gas_cost","InvocationResultSuccess","_InvocationResultBase__WEBPACK_IMPORTED_MODULE_3__","StorageChangeModify","_StorageChangeAddModifyBase__WEBPACK_IMPORTED_MODULE_2__","_StorageChangeType__WEBPACK_IMPORTED_MODULE_3__","deserializeStorageChangeAddModifyWireBase","Modify","StorageChangeAdd","Add","StorageChangeDelete","_StorageChangeBase__WEBPACK_IMPORTED_MODULE_2__","Delete","convertChange","_neo_one_node_storage_common__WEBPACK_IMPORTED_MODULE_0__","_errors__WEBPACK_IMPORTED_MODULE_3__","convertDeleteChange","change","typeKeyToSerializeKey","accountUnspent","accountUnclaimed","storageItem","assertNever","changeIn","block","maxBlockHashKey","blockData","maxHeaderHashKey","serializeHeaderIndexHashKey","transactionData","validatorsCountKey","convertAddChange","_comlink__WEBPACK_IMPORTED_MODULE_0__","_endpoint__WEBPACK_IMPORTED_MODULE_1__","TRANSFERABLE_TYPES","ArrayBuffer","MessagePort","uid","proxyValueSymbol","Symbol","throwSymbol","transferHandlers","canHandle","Function","serialize","port1","port2","MessageChannel","expose","deserialize","proxy","pingPongMessageCounter","isWindow","windowEndpoint","isEndpoint","activateEndpoint","cbProxy","cb","callPath","Proxy","construct","_target","argumentsList","apply","_thisArg","property","set","_proxy","irequest","wrapValue","unwrapValue","msg","transferables","attachMessageHandler","handler","event","f","removeEventListener","detachMessageHandler","postMessage","pingPongMessage","transferableProperties","proxyValue","rootObj","iresult","that","propName","e","makeInvocationResult","transferHandler","wrappedChildren","iterateUnhandledProperties","handleProperty","visited","WeakSet","isView","wrappedValue","wrappedChild","isRawWrappedValue","wrappedChildValue","newValue","replaceValueInObjectAtPath","newVal","lastKey","w","self","addEventListener","transfer","isMessagePort","start","prop","isTransferable","thing","iterateAllProperties","getEndpoint","endpointIn","close","isWorker","worker","terminate","activate","endpointEndpoint","getConfiguration","rc__WEBPACK_IMPORTED_MODULE_0__","rc__WEBPACK_IMPORTED_MODULE_0___default","DEFAULT_CONFIG","editor-server","level","server","cli","http","test","logger","maybeLogger","maybePath","maybeLevel","loggingConfig","getGlobalConfig","ValidatorCache","mutableAccounts","mutableValidators","newValidator","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","toPromise","mutablePublicKeyToValidator","lodash_fromPairs__WEBPACK_IMPORTED_MODULE_2___default","mutableValidatorsCount","WriteBatchBlockchain","currentBlockInternal","currentBlock","currentHeaderInternal","currentHeader","_StorageCache__WEBPACK_IMPORTED_MODULE_40__","caches","readAllStorage","_update","getKeyFromValue","getKeyString","createAddChange","createDeleteChange","readGetAllStorage","matchesPartialKey","indexStart","indexStop","_update2","onAdd","out","allowDupes","_update3","_update4","prefix","idx","_update5","_update6","_errors__WEBPACK_IMPORTED_MODULE_38__","getChangeSet","getTrackedChangeSet","maybePrevBlockData","outputContractsList","prevBlockData","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_7__","outputContracts","_neo_one_utils__WEBPACK_IMPORTED_MODULE_36__","outputContract","utxo","rest","lodash_partition__WEBPACK_IMPORTED_MODULE_5___default","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_11__","globalActionIndex","persistTransactions","persistUTXOTransactions","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_12__","bn_js__WEBPACK_IMPORTED_MODULE_37__","outputWithInputs","idxAndTransaction","getOutputWithInput","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_13__","updateAccounts","updateCoins","persistTransaction","transactionIn","globalActionIndexIn","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_14__","_getValidators__WEBPACK_IMPORTED_MODULE_39__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_15__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_16__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_17__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_18__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_19__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_20__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_21__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_22__","temporaryBlockchain","_wrapExecuteScripts__WEBPACK_IMPORTED_MODULE_41__","executeScripts","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_23__","Transaction","triggerType","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_24__","Application","listeners","onLog","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_25__","onNotify","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_26__","onMigrateContract","onSetVotes","persistingBlock","addActionsPromise","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_27__","contractsChangeSet","addChange","subType","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_28__","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_29__","deleteChange","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_30__","addTrackedChange","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_31__","validatorsCountVotes","delete","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_32__","inputOutputs","claimOutputs","getInputOutputs","addressValues","lodash_groupBy__WEBPACK_IMPORTED_MODULE_4___default","_ref11","_ref12","addressSpent","groupByAddress","addressClaimed","lodash_mapValues__WEBPACK_IMPORTED_MODULE_3___default","_ref13","addressOutputs","_ref14","spent","outs","changes","updateAccount","_ref15","_address","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_33__","_ref16","_ref17","_ref18","promises","_ref19","_ref20","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_34__","_ref21","_ref22","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_35__","newAccount","isDeletable","inputClaims","hashInputClaims","_ref23","_ref24","updateCoin","spentCoins","inputClaim","BaseReadStorageCache","mutableValues","tryGetTracked","trackedChange","createGet","tryGetValue","addValue","ReadStorageCache","ReadAllStorageCache","rxjs__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","ReadGetAllStorageCache","createAdd","createUpdate","updateFunc","updatedValue","createDelete","ReadAddUpdateStorageCache","ReadAddDeleteStorageCache","ReadAddStorageCache","ReadGetAllAddDeleteStorageCache","ReadGetAllAddUpdateDeleteStorageCache","ReadGetAllAddStorageCache","ReadAllAddUpdateDeleteStorageCache","BlockLikeStorageCache","mutableIndexValues","getOutputValueKeyString","OutputStorageCache","BaseReadMetadataStorageCache","createGetMetadata","createTryGetMetadata","mutableValue","ReadMetadataStorageCache","ReadAddUpdateMetadataStorageCache","createAddMetadata","createUpdateMetadata","_neo_one_logger__WEBPACK_IMPORTED_MODULE_5__","child","component","getErrorMessage","executeNext","contextIn","None","opContext","_opcodes__WEBPACK_IMPORTED_MODULE_9__","in","_errors__WEBPACK_IMPORTED_MODULE_8__","stackAlt","inAlt","_constants__WEBPACK_IMPORTED_MODULE_7__","argsAlt","stackCount","gasLeft","invoke","newError","newContext","resultsAlt","lodash_reverse__WEBPACK_IMPORTED_MODULE_1___default","outAlt","run","init","engine","scriptHashStack","createdContracts","executeScript","trace","title","gasIn","skipWitnessVerify","startingGas","finalContext","toContractParameter","safe","safeToContractParameter","createOp","_in","feeIn","NOP","_constants__WEBPACK_IMPORTED_MODULE_10__","pushNumber","_stackItem__WEBPACK_IMPORTED_MODULE_12__","bn_js__WEBPACK_IMPORTED_MODULE_9__","pushData","_errors__WEBPACK_IMPORTED_MODULE_11__","_stackItem__WEBPACK_IMPORTED_MODULE_13__","jump","checkTrue","newPC","shouldJump","asBoolean","isDynamic","call","tailCall","hasDynamicInvoke","resultContext","callIsolated","dynamicCall","nextPC","nextStack","newArrayOrStruct","asArray","_stackItem__WEBPACK_IMPORTED_MODULE_14__","_stackItem__WEBPACK_IMPORTED_MODULE_15__","_vmUtils__WEBPACK_IMPORTED_MODULE_21__","fill","lodash_range__WEBPACK_IMPORTED_MODULE_3___default","_stackItem__WEBPACK_IMPORTED_MODULE_16__","OPCODE_PAIRS","startContext","_syscalls__WEBPACK_IMPORTED_MODULE_20__","_ref25","_ref26","_ref27","_ref28","_ref29","mutableStack","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","_ref39","_ref40","_ref41","_ref42","_ref43","_ref44","_ref45","_ref46","bitwise__WEBPACK_IMPORTED_MODULE_8__","not","_ref47","and","_ref48","or","_ref49","xor","_ref50","_ref51","asBigInteger","_ref52","_ref53","mutableResults","isZero","_ref54","_ref55","abs","_ref56","_ref57","_ref58","_ref59","_ref60","_ref61","_ref62","_ref63","_ref64","_ref65","_ref66","_ref67","_ref68","_ref69","_ref70","_ref71","_ref72","_ref73","min","_ref74","_ref75","_ref76","_ref77","_ref78","_stackItem__WEBPACK_IMPORTED_MODULE_17__","_ref79","_stackItem__WEBPACK_IMPORTED_MODULE_18__","_ref80","_ref81","_ref82","top","pubKeyCount","sigCount","_ref83","_ref84","_ref85","_ref86","_ref87","_ref88","_ref89","asMapStackItem","toStructuralKey","_ref90","newItem","existing","innerSeen","existingValue","_ref91","_stackItem__WEBPACK_IMPORTED_MODULE_19__","_ref92","_ref93","_ref94","splice","_ref95","_ref96","_ref97","newValues","valuesArray","jumpCount","functionCallIsolated","_ref98","_ref99","STATIC_OPCODES","CREATE_OPCODES","lookupOp","_ref100","createSysCall","_constants__WEBPACK_IMPORTED_MODULE_30__","getHashOrIndex","getIndex","_errors__WEBPACK_IMPORTED_MODULE_31__","checkWitness","scriptHashesForVerifying","getHeader","Consensus","currentBlockHash","_neo_one_utils__WEBPACK_IMPORTED_MODULE_22__","checkWitnessPublicKey","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_8__","checkWitnessBuffer","hashOrPublicKey","createContract","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_9__","returnType","contractProperties","_neo_one_client_full_common__WEBPACK_IMPORTED_MODULE_10__","asString","created","checkStorage","hasStorage","getContractFee","destroyContract","rxjs_operators__WEBPACK_IMPORTED_MODULE_27__","rxjs__WEBPACK_IMPORTED_MODULE_26__","createPut","keyIn","expectedIn","bn_js__WEBPACK_IMPORTED_MODULE_25__","_vmUtils__WEBPACK_IMPORTED_MODULE_57__","Constant","SYSCALLS","System.Runtime.Platform","_stackItem__WEBPACK_IMPORTED_MODULE_32__","Neo.Runtime.GetTrigger","_stackItem__WEBPACK_IMPORTED_MODULE_33__","Neo.Runtime.CheckWitness","_stackItem__WEBPACK_IMPORTED_MODULE_34__","Neo.Runtime.Notify","Neo.Runtime.Log","Neo.Runtime.GetTime","Neo.Runtime.Serialize","Neo.Runtime.Deserialize","_stackItem__WEBPACK_IMPORTED_MODULE_35__","Neo.Blockchain.GetHeight","Neo.Blockchain.GetHeader","_stackItem__WEBPACK_IMPORTED_MODULE_36__","Neo.Blockchain.GetBlock","_stackItem__WEBPACK_IMPORTED_MODULE_37__","Neo.Blockchain.GetTransaction","_stackItem__WEBPACK_IMPORTED_MODULE_38__","Neo.Blockchain.GetTransactionHeight","Neo.Blockchain.GetAccount","_stackItem__WEBPACK_IMPORTED_MODULE_39__","Neo.Blockchain.GetValidators","rxjs_operators__WEBPACK_IMPORTED_MODULE_28__","_stackItem__WEBPACK_IMPORTED_MODULE_40__","rxjs_operators__WEBPACK_IMPORTED_MODULE_29__","_stackItem__WEBPACK_IMPORTED_MODULE_41__","Neo.Blockchain.GetAsset","_stackItem__WEBPACK_IMPORTED_MODULE_42__","Neo.Blockchain.GetContract","_stackItem__WEBPACK_IMPORTED_MODULE_43__","Neo.Header.GetHash","_stackItem__WEBPACK_IMPORTED_MODULE_44__","asBlockBase","Neo.Header.GetVersion","Neo.Header.GetPrevHash","Neo.Header.GetIndex","Neo.Header.GetMerkleRoot","Neo.Header.GetTimestamp","Neo.Header.GetConsensusData","Neo.Header.GetNextConsensus","_stackItem__WEBPACK_IMPORTED_MODULE_45__","Neo.Block.GetTransactionCount","asBlock","Neo.Block.GetTransactions","Neo.Block.GetTransaction","Neo.Transaction.GetHash","asTransaction","Neo.Transaction.GetType","Neo.Transaction.GetAttributes","_stackItem__WEBPACK_IMPORTED_MODULE_46__","Neo.Transaction.GetInputs","_stackItem__WEBPACK_IMPORTED_MODULE_47__","Neo.Transaction.GetOutputs","_stackItem__WEBPACK_IMPORTED_MODULE_48__","Neo.Transaction.GetReferences","getReferences","Neo.Transaction.GetUnspentCoins","_output","Neo.Transaction.GetWitnesses","getSortedScriptHashesForVerifying","witnesses","_stackItem__WEBPACK_IMPORTED_MODULE_49__","Neo.Witness.GetVerificationScript","asWitness","Neo.InvocationTransaction.GetScript","Neo.Attribute.GetUsage","asAttribute","Neo.Attribute.GetData","asAttributeStackItem","toValueStackItem","Neo.Input.GetHash","asInput","Neo.Input.GetIndex","Neo.Output.GetAssetId","asOutput","Neo.Output.GetValue","Neo.Output.GetScriptHash","Neo.Account.GetScriptHash","asAccount","Neo.Account.GetVotes","Neo.Account.GetBalance","accountState","Neo.Asset.GetAssetId","asAsset","Neo.Asset.GetAssetType","Neo.Asset.GetAmount","Neo.Asset.GetAvailable","Neo.Asset.GetPrecision","Neo.Asset.GetOwner","Neo.Asset.GetAdmin","Neo.Asset.GetIssuer","Neo.Contract.GetScript","asContract","Neo.Contract.IsPayable","payable","Neo.Storage.GetContext","_stackItem__WEBPACK_IMPORTED_MODULE_50__","Neo.Storage.GetReadOnlyContext","asReadOnly","Neo.Storage.Get","Neo.Storage.Find","iterable","_reactivex_ix_es2015_cjs_asynciterable_asynciterablex__WEBPACK_IMPORTED_MODULE_23__","_reactivex_ix_es2015_cjs_asynciterable_pipe_map__WEBPACK_IMPORTED_MODULE_24__","_stackItem__WEBPACK_IMPORTED_MODULE_51__","_stackItem__WEBPACK_IMPORTED_MODULE_52__","asyncIterator","Neo.StorageContext.AsReadOnly","Neo.Enumerator.Create","_stackItem__WEBPACK_IMPORTED_MODULE_53__","_stackItem__WEBPACK_IMPORTED_MODULE_54__","Neo.Enumerator.Next","enumerator","asEnumerator","Neo.Iterator.Create","zip","keysArray","Neo.Iterator.Key","asIterator","Neo.Enumerator.Value","Neo.Enumerator.Concat","Neo.Iterator.Concat","concatIterator","Neo.Iterator.Keys","Neo.Iterator.Values","Neo.Account.SetVotes","currentBalance","Neo.Account.IsStandard","Neo.Validator.Register","_stackItem__WEBPACK_IMPORTED_MODULE_55__","Neo.Asset.Create","Neo.Asset.Renew","yearsIn","years","newExpiration","Neo.Contract.Create","argsIn","Neo.Contract.Migrate","Neo.Contract.GetStorageContext","createdScriptHash","Neo.Contract.Destroy","Neo.Storage.Put","Neo.Storage.PutEx","Neo.Storage.Delete","System.ExecutionEngine.GetScriptContainer","_stackItem__WEBPACK_IMPORTED_MODULE_56__","System.ExecutionEngine.GetExecutingScriptHash","System.ExecutionEngine.GetCallingScriptHash","System.ExecutionEngine.GetEntryScriptHash","SYSCALL_ALIASES","Neo.Iterator.Next","Neo.Iterator.Value","System.Runtime.GetTrigger","System.Runtime.CheckWitness","System.Runtime.Notify","System.Runtime.Log","System.Runtime.GetTime","System.Runtime.Serialize","System.Runtime.Deserialize","System.Blockchain.GetHeight","System.Blockchain.GetHeader","System.Blockchain.GetBlock","System.Blockchain.GetTransaction","System.Blockchain.GetTransactionHeight","System.Blockchain.GetContract","System.Header.GetIndex","System.Header.GetHash","System.Header.GetPrevHash","System.Header.GetTimestamp","System.Block.GetTransactionCount","System.Block.GetTransactions","System.Block.GetTransaction","System.Transaction.GetHash","System.Contract.Destroy","System.Contract.GetStorageContext","System.Storage.GetContext","System.Storage.GetReadOnlyContext","System.Storage.Get","System.Storage.Put","System.Storage.Delete","System.StorageContext.AsReadOnly","AntShares.Runtime.CheckWitness","AntShares.Runtime.Notify","AntShares.Runtime.Log","AntShares.Blockchain.GetHeight","AntShares.Blockchain.GetHeader","AntShares.Blockchain.GetBlock","AntShares.Blockchain.GetTransaction","AntShares.Blockchain.GetAccount","AntShares.Blockchain.GetValidators","AntShares.Blockchain.GetAsset","AntShares.Blockchain.GetContract","AntShares.Header.GetHash","AntShares.Header.GetVersion","AntShares.Header.GetPrevHash","AntShares.Header.GetMerkleRoot","AntShares.Header.GetTimestamp","AntShares.Header.GetConsensusData","AntShares.Header.GetNextConsensus","AntShares.Block.GetTransactionCount","AntShares.Block.GetTransactions","AntShares.Block.GetTransaction","AntShares.Transaction.GetHash","AntShares.Transaction.GetType","AntShares.Transaction.GetAttributes","AntShares.Transaction.GetInputs","AntShares.Transaction.GetOutputs","AntShares.Transaction.GetReferences","AntShares.Attribute.GetUsage","AntShares.Attribute.GetData","AntShares.Input.GetHash","AntShares.Input.GetIndex","AntShares.Output.GetAssetId","AntShares.Output.GetValue","AntShares.Output.GetScriptHash","AntShares.Account.GetScriptHash","AntShares.Account.GetVotes","AntShares.Account.GetBalance","AntShares.Asset.GetAssetId","AntShares.Asset.GetAssetType","AntShares.Asset.GetAmount","AntShares.Asset.GetAvailable","AntShares.Asset.GetPrecision","AntShares.Asset.GetOwner","AntShares.Asset.GetAdmin","AntShares.Asset.GetIssuer","AntShares.Contract.GetScript","AntShares.Storage.GetContext","AntShares.Storage.Get","AntShares.Account.SetVotes","AntShares.Validator.Register","AntShares.Asset.Create","AntShares.Asset.Renew","AntShares.Contract.Create","AntShares.Contract.Migrate","AntShares.Contract.GetStorageContext","AntShares.Contract.Destroy","AntShares.Storage.Put","AntShares.Storage.Delete","SYSCALLS_BY_HASH","lodash_fromPairs__WEBPACK_IMPORTED_MODULE_6___default","_ref101","lookupSysCall","_ref102","sysCallBytes","debugName","sysCallName","aliasName","canonicalName","createCall","ECPointStackItem","_neo_one_node_core__WEBPACK_IMPORTED_MODULE_2__","UInt256StackItem","UInt160StackItem","EnumeratorStackItem","_ObjectStackItem__WEBPACK_IMPORTED_MODULE_1__","referenceID","_referenceCounter__WEBPACK_IMPORTED_MODULE_2__","StackItemEnumerator","mutableDone","mutableCurrent","_reactivex_ix_es2015_cjs_asynciterable_concat__WEBPACK_IMPORTED_MODULE_4__","_reactivex_ix_es2015_cjs_asynciterable_asynciterablex__WEBPACK_IMPORTED_MODULE_3__","NegotiationError","AlreadyConnectedError","BYTE_LENGTH","NetworkAddress","services","ip_address__WEBPACK_IMPORTED_MODULE_5__","fromByteArray","readUInt16BE","canonical","canonicalForm","getAddress6","toByteArray","fromAddress4","addressSerialized","writeBytes","Message","MessageTransform","_neo_one_utils__WEBPACK_IMPORTED_MODULE_8__","stream__WEBPACK_IMPORTED_MODULE_10__","_Command__WEBPACK_IMPORTED_MODULE_11__","_payload__WEBPACK_IMPORTED_MODULE_12__","_payload__WEBPACK_IMPORTED_MODULE_13__","_payload__WEBPACK_IMPORTED_MODULE_14__","_payload__WEBPACK_IMPORTED_MODULE_15__","_payload__WEBPACK_IMPORTED_MODULE_16__","_payload__WEBPACK_IMPORTED_MODULE_17__","_payload__WEBPACK_IMPORTED_MODULE_18__","_payload__WEBPACK_IMPORTED_MODULE_19__","COMMAND_LENGTH","calculateChecksum","deserializeMessageHeader","readFixedString","magic","payloadBuffer","payloadBufferChecksum","payloadOptions","addr","deserializeWire","filteradd","filterclear","filterload","getaddr","getblocks","getdata","getheaders","headers","inv","mempool","verack","alert","merkleblock","notfound","ping","pong","writeFixedString","InvalidMessageTransformEncodingError","SIZE_OF_MESSAGE_HEADER","readableObjectMode","chunk","encoding","callback","remainingBuffer","mutableMessages","processBuffer","remaining","UnsignedConsensusPayload","_message__WEBPACK_IMPORTED_MODULE_3__","validatorIndex","consensusMessage","nowSeconds","deserializeUnsignedConsensusPayloadWireBase","messageBytes","ChangeViewConsensusMessage","_ConsensusMessageBase__WEBPACK_IMPORTED_MODULE_1__","_ConsensusMessageType__WEBPACK_IMPORTED_MODULE_2__","deserializeConsensusMessageBaseWireBase","newViewNumber","viewNumber","ChangeView","PrepareRequestConsensusMessage","_ConsensusMessageBase__WEBPACK_IMPORTED_MODULE_3__","transactionHashes","distinctTransactionHashes","_transaction__WEBPACK_IMPORTED_MODULE_2__","_ConsensusMessageType__WEBPACK_IMPORTED_MODULE_4__","PrepareRequest","PrepareResponseConsensusMessage","_ConsensusMessageBase__WEBPACK_IMPORTED_MODULE_0__","_ConsensusMessageType__WEBPACK_IMPORTED_MODULE_1__","PrepareResponse","InventoryType","assertInventoryType","InvalidInventoryTypeError","inventoryType","isInventoryType","ConsensusQueue","mutableItems","mutableResolvers","mutableDoneInternal","pushTimer","clear","resolver","ConsensusContext","mutableFastForwardSeconds","seconds","fastForwardOffset","JSONHelper","readUInt64","readBuffer","InitialContext","_Context__WEBPACK_IMPORTED_MODULE_0__","expectedView","myIndex","primaryIndex","blockReceivedTimeSeconds","SignatureSentContext","_HeaderContext__WEBPACK_IMPORTED_MODULE_0__","_RequestSentContext__WEBPACK_IMPORTED_MODULE_1__","RequestSentContext","BlockSentContext","handlePersistBlock","consensusContext","_common__WEBPACK_IMPORTED_MODULE_1__","handleConsensusPayload","mutableExpectedView","cloneExpectedView","_common__WEBPACK_IMPORTED_MODULE_6__","handleChangeView","_context__WEBPACK_IMPORTED_MODULE_7__","mutableSignatures","nextContext","syncMemPool","handlePrepareRequest","_context__WEBPACK_IMPORTED_MODULE_8__","cloneSignatures","handlePrepareResponse","ViewChangingContext","handleTransactionReceived","_context__WEBPACK_IMPORTED_MODULE_2__","transactionHashesSet","runConsensus","_context__WEBPACK_IMPORTED_MODULE_14__","requestSentContext","_context__WEBPACK_IMPORTED_MODULE_15__","cloneRequestSent","randomUInt64","mutableTransactions","feeContext","createMinerTransaction","mutableNetworkFees","bignumber_js__WEBPACK_IMPORTED_MODULE_12___default","first","second","comparedTo","lodash_take__WEBPACK_IMPORTED_MODULE_3___default","_unused","unshift","_common__WEBPACK_IMPORTED_MODULE_13__","_neo_one_utils__WEBPACK_IMPORTED_MODULE_11__","nullthrows","timerSeconds","requestChangeView","Network","connectedPeers","_peer","_buffer","_endpoint","getNextID","EquatableKeyStackItem","_ObjectStackItem__WEBPACK_IMPORTED_MODULE_0__","handleRequest","req","_FullNode__WEBPACK_IMPORTED_MODULE_2__","watchTimeoutMS","jsonrpc","method","JSONRPCLocalProvider","_neo_one_client_core__WEBPACK_IMPORTED_MODULE_1__","getOptions","response","handleResponse","currentID","getID","finalize","source$","rxjs__WEBPACK_IMPORTED_MODULE_2__","lastValue","subscription","_error","isPromise","deleted","promise","shutdownPromises","createMain","DEFAULT_VALIDATORS","standbyValidatorsIn","addressIn","commonSettings","storageContext","v0","_BufferAttribute__WEBPACK_IMPORTED_MODULE_3__","_ECPointAttribute__WEBPACK_IMPORTED_MODULE_4__","_UInt160Attribute__WEBPACK_IMPORTED_MODULE_5__","_UInt256Attribute__WEBPACK_IMPORTED_MODULE_6__","MerkleTree","_neo_one_utils__WEBPACK_IMPORTED_MODULE_2__","InvalidMerkleTreeException","MerkleTreeNode","leftChild","rightChild","parent","leavesIn","leaves","parents","trim","depthFirstSearchWorker","depthFirstSearch","root","hashesOrNode","deserializeTransactionWireBase","deserializeTransactionWire","_ClaimTransaction__WEBPACK_IMPORTED_MODULE_3__","_ContractTransaction__WEBPACK_IMPORTED_MODULE_4__","_EnrollmentTransaction__WEBPACK_IMPORTED_MODULE_5__","_InvocationTransaction__WEBPACK_IMPORTED_MODULE_6__","_IssueTransaction__WEBPACK_IMPORTED_MODULE_7__","_MinerTransaction__WEBPACK_IMPORTED_MODULE_8__","_PublishTransaction__WEBPACK_IMPORTED_MODULE_9__","_RegisterTransaction__WEBPACK_IMPORTED_MODULE_10__","_StateTransaction__WEBPACK_IMPORTED_MODULE_11__","VOTES","REGISTERED","StateDescriptor","field","_neo_one_utils__WEBPACK_IMPORTED_MODULE_7__","_utils__WEBPACK_IMPORTED_MODULE_10__","verifyAccount","verifyValidator","getJSONType","validatorPublicKeysSet","levelUpStorage","getHash","_neo_one_node_storage_common__WEBPACK_IMPORTED_MODULE_18__","_common__WEBPACK_IMPORTED_MODULE_19__","_errors__WEBPACK_IMPORTED_MODULE_21__","headerBase","_read__WEBPACK_IMPORTED_MODULE_22__","tryGetLatest","getBlock","accountMinKey","accountMaxKey","getAccountUnclaimedKeyMin","getAccountUnclaimedKeyMax","getAccountUnspentKeyMin","getAccountUnspentKeyMax","getActionKeyMin","getActionKeyMax","getStorageItemKeyMin","getStorageItemKeyMax","validatorMinKey","validatorMaxKey","changeSet","_convertChange__WEBPACK_IMPORTED_MODULE_20__","converted","batch","createKeyStream","createPrefix","createMax","accountKeyPrefix","accountUnclaimedKeyPrefix","accountUnspentKeyPrefix","actionKeyPrefix","assetKeyPrefix","blockKeyPrefix","blockDataKeyPrefix","headerKeyPrefix","headerHashKeyPrefix","transactionKeyPrefix","outputKeyPrefix","transactionDataKeyPrefix","contractKeyPrefix","storageItemKeyPrefix","validatorKeyPrefix","invocationDataKeyPrefix","settingsPrefix","createSerializeAccountInputKey","createGetAccountInputKeyMin","createGetAccountInputKeyMax","serializeActionKey","createSerializeUInt160Key","serializeUInt160Key","createSerializeUInt256Key","serializeUInt256Key","deserializeActionWire","_LogAction__WEBPACK_IMPORTED_MODULE_3__","_NotificationAction__WEBPACK_IMPORTED_MODULE_4__","deserializeContractParameterWireBase","_ArrayContractParameter__WEBPACK_IMPORTED_MODULE_3__","_BooleanContractParameter__WEBPACK_IMPORTED_MODULE_4__","_ByteArrayContractParameter__WEBPACK_IMPORTED_MODULE_5__","_Hash160ContractParameter__WEBPACK_IMPORTED_MODULE_6__","_Hash256ContractParameter__WEBPACK_IMPORTED_MODULE_7__","_IntegerContractParameter__WEBPACK_IMPORTED_MODULE_8__","_InteropInterfaceContractParameter__WEBPACK_IMPORTED_MODULE_9__","_MapContractParameter__WEBPACK_IMPORTED_MODULE_10__","_PublicKeyContractParameter__WEBPACK_IMPORTED_MODULE_11__","_SignatureContractParameter__WEBPACK_IMPORTED_MODULE_12__","_StringContractParameter__WEBPACK_IMPORTED_MODULE_13__","_VoidContractParameter__WEBPACK_IMPORTED_MODULE_14__","Boolean","Integer","Hash160","AssetTypeModel","hasFlag","assertAssetType","toJSONAssetType","flag","isAssetType","assertAssetTypeJSON","isAssetTypeJSON","_InvocationResultError__WEBPACK_IMPORTED_MODULE_2__","_InvocationResultSuccess__WEBPACK_IMPORTED_MODULE_3__","_StorageChangeAdd__WEBPACK_IMPORTED_MODULE_1__","_StorageChangeDelete__WEBPACK_IMPORTED_MODULE_2__","_StorageChangeModify__WEBPACK_IMPORTED_MODULE_3__","_neo_one_logger__WEBPACK_IMPORTED_MODULE_8__","blockFailures","_neo_one_client_switch__WEBPACK_IMPORTED_MODULE_17__","createMeasureInt64","_neo_one_client_switch__WEBPACK_IMPORTED_MODULE_18__","UNIT","blockCurrent","blockProgress","blockDurationMs","createMeasureDouble","MS","blockLatencySec","SEC","NEO_BLOCKCHAIN_PERSIST_BLOCK_DURATION_MS","createView","DISTRIBUTION","registerView","NEO_BLOCKCHAIN_PERSIST_BLOCK_FAILURES_TOTAL","COUNT","NEO_BLOCKCHAIN_BLOCK_INDEX_GAUGE","LAST_VALUE","NEO_BLOCKCHAIN_PERSISTING_BLOCK_INDEX_GAUGE","NEO_BLOCKCHAIN_PERSIST_BLOCK_LATENCY_SECONDS","Blockchain","mutablePersistingBlocks","mutableBlockQueue","js_priority_queue__WEBPACK_IMPORTED_MODULE_20___default","comparator","mutableInQueue","mutableRunning","mutableBlock$","rxjs__WEBPACK_IMPORTED_MODULE_21__","debug","_getValidators__WEBPACK_IMPORTED_MODULE_25__","tryGetSpentCoin","filteredSpentCoinsIn","_neo_one_utils__WEBPACK_IMPORTED_MODULE_15__","_errors__WEBPACK_IMPORTED_MODULE_24__","filteredSpentCoins","spentCoin","coins","coin","endHeight","createWriteBlockchain","mutableActions","bn_js__WEBPACK_IMPORTED_MODULE_19__","executeResult","Verification","rxjs_operators__WEBPACK_IMPORTED_MODULE_23__","tryGetTransactionData","mutableCurrentBlock","mutablePreviousBlock","previousBlock","mutableCurrentHeader","settings$","rxjs__WEBPACK_IMPORTED_MODULE_22__","record","measure","deserializeWireContext","serializeJSONContext","persistHeaders","persistBlock","block$","isPersistingBlock","doneRunningPromise","mutableDoneRunningResolve","info","unsafe","queue","persistBlocksAsync","_headers","currentIndex","verifications","includes","invokeTransaction","_wrapExecuteScripts__WEBPACK_IMPORTED_MODULE_26__","stop","reset","entry","cleanBlockQueue","startTime","Date","now","entryNonNull","logData","_neo_one_utils__WEBPACK_IMPORTED_MODULE_16__","NEO_BLOCK_INDEX","persistBlockInternal","dequeBlockQueue","dequeue","verifyBlock","commit","_WriteBatchBlockchain__WEBPACK_IMPORTED_MODULE_27__","nodeLogger","fs_extra__WEBPACK_IMPORTED_MODULE_0__","fs_extra__WEBPACK_IMPORTED_MODULE_0___default","path__WEBPACK_IMPORTED_MODULE_1__","path__WEBPACK_IMPORTED_MODULE_1___default","pino__WEBPACK_IMPORTED_MODULE_2__","pino__WEBPACK_IMPORTED_MODULE_2___default","_getConfiguration__WEBPACK_IMPORTED_MODULE_3__","config","mutablePathRecord","createLogger","useLevelLabels","logPath","ensureDirSync","dirname","extreme","getPinoDestination","HeaderStackItem","_EquatableKeyStackItem__WEBPACK_IMPORTED_MODULE_0__","BlockStackItem","TransactionStackItem","AccountStackItem","ContractParameterTypeModel","isContractParameterType","assertContractParameterType","toJSONContractParameterType","assertContractParameterTypeJSON","isContractParameterTypeJSON","AssetStackItem","ContractStackItem","AttributeStackItem","_EquatableKeyStackItem__WEBPACK_IMPORTED_MODULE_6__","_ECPointStackItem__WEBPACK_IMPORTED_MODULE_5__","_UInt160StackItem__WEBPACK_IMPORTED_MODULE_7__","_UInt256StackItem__WEBPACK_IMPORTED_MODULE_8__","_BufferStackItem__WEBPACK_IMPORTED_MODULE_4__","InputStackItem","OutputStackItem","WitnessStackItem","IteratorStackItem","_EnumeratorStackItem__WEBPACK_IMPORTED_MODULE_0__","StackItemIterator","_StackItemEnumerator__WEBPACK_IMPORTED_MODULE_6__","_reactivex_ix_es2015_cjs_asynciterable_asynciterablex__WEBPACK_IMPORTED_MODULE_2__","_reactivex_ix_es2015_cjs_asynciterable_pipe_map__WEBPACK_IMPORTED_MODULE_4__","_reactivex_ix_es2015_cjs_asynciterable_concat__WEBPACK_IMPORTED_MODULE_3__","ValidatorStackItem","ConsensusPayloadStackItem","StateDescriptorTypeModel","assertStateDescriptorType","isStateDescriptorType","_neo_one_logger__WEBPACK_IMPORTED_MODULE_16__","messageReceivedTag","COMMAND_NAME","messagesReceived","_neo_one_client_switch__WEBPACK_IMPORTED_MODULE_26__","_neo_one_client_switch__WEBPACK_IMPORTED_MODULE_27__","messagesFailed","mempoolSize","NEO_PROTOCOL_MESSAGES_RECEIVED_TOTAL","NEO_PROTOCOL_MESSAGES_FAILURES_TOTAL","NEO_PROTOCOL_MEMPOOL_SIZE","createPeerBloomFilter","k","tweak","bloom_filter__WEBPACK_IMPORTED_MODULE_29___default","vData","nHashFuncs","nTweak","createScalingBloomFilter","bloem__WEBPACK_IMPORTED_MODULE_28__","initial_capacity","scaling","compareTransactionAndFees","val1","val2","divn","compare","MEM_POOL_SIZE","GET_ADDR_PEER_COUNT","GET_BLOCKS_COUNT","GET_BLOCKS_BUFFER","GET_BLOCKS_TIME_MS","GET_BLOCKS_THROTTLE_MS","TRIM_MEMPOOL_THROTTLE","GET_BLOCKS_CLOSE_COUNT","UNHEALTHY_PEER_SECONDS","LOCAL_HOST_ADDRESSES","Node","mutableUnhealthyPeerSeconds","requestBlocks","lodash_debounce__WEBPACK_IMPORTED_MODULE_12___default","peer","mutableBestPeer","mutableGetBlocksRequestsCount","findBestPeer","blacklistAndClose","shouldRequestBlocks","mutableGetBlocksRequestsIndex","mutableGetBlocksRequestTime","sendMessage","createMessage","_Command__WEBPACK_IMPORTED_MODULE_40__","_payload__WEBPACK_IMPORTED_MODULE_43__","hashStart","onRequestEndpoints","lodash_throttle__WEBPACK_IMPORTED_MODULE_11___default","relay","fetchEndpointsFromRPC","trimMemPool","mutableMemPool","transactionAndFees","lodash_take__WEBPACK_IMPORTED_MODULE_10___default","transactionAndFee","negotiate","_payload__WEBPACK_IMPORTED_MODULE_44__","protocolVersion","NODE_NETWORK","round","externalPort","userAgent","receiveMessage","versionPayload","_errors__WEBPACK_IMPORTED_MODULE_41__","checkVersion","_payload__WEBPACK_IMPORTED_MODULE_45__","isValid","nextMessage","mutableBloomFilter","checkPeerHealth","prevHealth","checkTimeSeconds","_neo_one_utils__WEBPACK_IMPORTED_MODULE_23__","mutableBlockIndex","healthy","onEvent","connectedPeer","resetRequestBlocks","createMessageTransform","_Message__WEBPACK_IMPORTED_MODULE_42__","onMessageReceived","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_13__","mutableKnownBlockHashes","tempKnownBlockHashes","mutableKnownTransactionHashes","tempKnownTransactionHashes","mutableKnownHeaderHashes","tempKnownHeaderHashes","consensusCache","lru_cache__WEBPACK_IMPORTED_MODULE_32___default","mutableConsensus","network$","rxjs__WEBPACK_IMPORTED_MODULE_33__","_neo_one_utils__WEBPACK_IMPORTED_MODULE_24__","_neo_one_utils__WEBPACK_IMPORTED_MODULE_25__","defaultOptions","consensus$","rxjs_operators__WEBPACK_IMPORTED_MODULE_36__","rxjs_operators__WEBPACK_IMPORTED_MODULE_37__","rxjs_operators__WEBPACK_IMPORTED_MODULE_38__","_neo_one_node_consensus__WEBPACK_IMPORTED_MODULE_17__","rxjs__WEBPACK_IMPORTED_MODULE_34__","unhealthyPeerSeconds","rxjs__WEBPACK_IMPORTED_MODULE_35__","throwVerifyError","forceAdd","finalResult","logLabels","NEO_TRANSACTION_HASH","foundTransaction","verifyResult","NEO_TRANSACTION_FOUND","verifyTransaction","onTransactionReceived","relayTransactionInternal","_payload__WEBPACK_IMPORTED_MODULE_46__","_payload__WEBPACK_IMPORTED_MODULE_47__","messagePayload","testFilter","bestPeer","peers","lodash_maxBy__WEBPACK_IMPORTED_MODULE_9___default","lodash_shuffle__WEBPACK_IMPORTED_MODULE_8___default","getBlocksRequestTime","permanentlyBlacklist","otherPeer","doFetchEndpointsFromRPC","rpcURLs","rxjs_operators__WEBPACK_IMPORTED_MODULE_39__","fetchEndpointsFromRPCURL","rpcURL","cross_fetch__WEBPACK_IMPORTED_MODULE_30___default","Content-Type","body","ok","statusText","json","connected","ip_address__WEBPACK_IMPORTED_MODULE_31__","addEndpoint","HTTP_URL","onAddrMessageReceived","onBlockMessageReceived","onConsensusMessageReceived","onFilterAddMessageReceived","onFilterClearMessageReceived","onFilterLoadMessageReceived","onGetAddrMessageReceived","onGetBlocksMessageReceived","onGetDataMessageReceived","onGetHeadersMessageReceived","onHeadersMessageReceived","onInvMessageReceived","onMemPoolMessageReceived","onVerackMessageReceived","onVersionMessageReceived","addresses","relayBlock","onPersistBlock","verifyConsensusPayload","onConsensusPayloadReceived","filterAdd","insert","filterLoad","_payload__WEBPACK_IMPORTED_MODULE_48__","getBlocks","getHeaders","getData","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_14__","createMerkleBlockPayload","_payload__WEBPACK_IMPORTED_MODULE_49__","headersPayload","ready","relayTransaction","maxHeight","hashStopIndexPromise","hashStop","hashStopHeader","hashStartHeaders","hashEnd","hashStartHeader","lodash_head__WEBPACK_IMPORTED_MODULE_7___default","lodash_orderBy__WEBPACK_IMPORTED_MODULE_6___default","lodash_range__WEBPACK_IMPORTED_MODULE_5___default","bloomFilterIn","bloomFilter","contains","_neo_one_client_common__WEBPACK_IMPORTED_MODULE_15__","tree","_payload__WEBPACK_IMPORTED_MODULE_50__","transactionCount","toHashArray","GetBlocksPayload","SERVICES","VersionPayload","AddrPayload","_NetworkAddress__WEBPACK_IMPORTED_MODULE_2__","ConsensusPayload","_UnsignedConsensusPayload__WEBPACK_IMPORTED_MODULE_10__","_Witness__WEBPACK_IMPORTED_MODULE_9__","scriptHashes","_ScriptContainer__WEBPACK_IMPORTED_MODULE_6__","deserializeConsensusMessageWire","_ChangeViewConsensusMessage__WEBPACK_IMPORTED_MODULE_2__","_ConsensusMessageType__WEBPACK_IMPORTED_MODULE_3__","_PrepareRequestConsensusMessage__WEBPACK_IMPORTED_MODULE_4__","_PrepareResponseConsensusMessage__WEBPACK_IMPORTED_MODULE_5__","FilterAddPayload","FilterLoadPayload","InvPayload","_InventoryType__WEBPACK_IMPORTED_MODULE_2__","HeadersPayload","StorageFlagsModel","hasStorageFlag","assertStorageFlags","toJSONStorageFlags","isStorageFlags","assertStorageFlagsJSON","isStorageFlagsJSON","MerkleBlockPayload","readVarUIntLE","merkleBlockPayloadSizeInternal","neverComplete","_neo_one_logger__WEBPACK_IMPORTED_MODULE_3__","MS_IN_SECOND","mutableQueue","_ConsensusQueue__WEBPACK_IMPORTED_MODULE_13__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","mutableConsensusContext","_ConsensusContext__WEBPACK_IMPORTED_MODULE_12__","_neo_one_utils__WEBPACK_IMPORTED_MODULE_4__","pause","doStart","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","fastForwardToTime","clearTimer","mutableStartPromise","completed","initialResult","_reactivex_ix_es2015_cjs_asynciterable_asynciterablex__WEBPACK_IMPORTED_MODULE_7__","_reactivex_ix_es2015_cjs_asynciterable_pipe_scan__WEBPACK_IMPORTED_MODULE_8__","_handlePersistBlock__WEBPACK_IMPORTED_MODULE_15__","_handleConsensusPayload__WEBPACK_IMPORTED_MODULE_14__","_handleTransactionReceived__WEBPACK_IMPORTED_MODULE_16__","_runConsensus__WEBPACK_IMPORTED_MODULE_17__","err","_neo_one_utils__WEBPACK_IMPORTED_MODULE_6__","handleResult","handleTimer","mutableTimerSeconds","mutableTimer","setTimeout","clearTimeout","mergeScanLatest","rxjs_internal_OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__","rxjs_internal_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__","EMPTY_LAST_VALUE","MergeScanSubscriber","destination","accumulator","hasValue","hasCompleted","active","_outerValue","innerValue","innerSub","remove","_innerSub","ish","MergeScanOperator","subscriber","lift","cloneInitial","_InitialContext__WEBPACK_IMPORTED_MODULE_0__","cloneBlockSent","_BlockSentContext__WEBPACK_IMPORTED_MODULE_0__","RequestReceivedContext","_SignatureSentContext__WEBPACK_IMPORTED_MODULE_1__","_ViewChangingContext__WEBPACK_IMPORTED_MODULE_2__","_neo_one_logger__WEBPACK_IMPORTED_MODULE_7__","RPC_METHODS","getaccountstate","getassetstate","getbestblockhash","getblock","getblockcount","getblockhash","getblocksysfee","getconnectioncount","getcontractstate","getrawmempool","getrawtransaction","getstorage","gettxout","invokefunction","invokescript","sendrawtransaction","submitblock","validateaddress","getpeers","relaytransaction","getoutput","getclaimamount","getallstorage","testinvocation","gettransactionreceipt","getinvocationdata","getvalidators","getnetworksettings","runconsensusnow","updatesettings","getsettings","fastforwardoffset","fastforwardtotime","UNKNOWN","INVALID","rpcTag","_neo_one_utils__WEBPACK_IMPORTED_MODULE_14__","RPC_METHOD","requestDurations","_neo_one_client_switch__WEBPACK_IMPORTED_MODULE_15__","_neo_one_client_switch__WEBPACK_IMPORTED_MODULE_16__","requestErrors","SINGLE_REQUESTS_HISTOGRAM","SINGLE_REQUEST_ERRORS_COUNTER","createJSONRPCHandler","handlers","handleSingleRequest","labels","request","validateRequest","requestIn","handlerParams","tags","handleRequestSafe","batchRequest","errorResponse","RPC_TYPE","getTransactionReceipt","createHandler","checkHeight","height","rxjs_operators__WEBPACK_IMPORTED_MODULE_18__","rxjs_operators__WEBPACK_IMPORTED_MODULE_19__","rxjs_operators__WEBPACK_IMPORTED_MODULE_20__","receipt","invokeScript","isvalid","transactionJSON","resultJSON","rxjs_operators__WEBPACK_IMPORTED_MODULE_21__","rxjs_operators__WEBPACK_IMPORTED_MODULE_22__","issueGASFee","runConsensusNow","newSettings","updateSettings","resume","_attribute__WEBPACK_IMPORTED_MODULE_0__","_ClaimTransactionModel__WEBPACK_IMPORTED_MODULE_1__","_InputModel__WEBPACK_IMPORTED_MODULE_2__","_InvocationTransactionModel__WEBPACK_IMPORTED_MODULE_3__","_OutputModel__WEBPACK_IMPORTED_MODULE_4__","_TransactionBaseModel__WEBPACK_IMPORTED_MODULE_5__","_TransactionModel__WEBPACK_IMPORTED_MODULE_6__","_TransactionTypeModel__WEBPACK_IMPORTED_MODULE_7__","_AttributeModel__WEBPACK_IMPORTED_MODULE_0__","_AttributeUsageModel__WEBPACK_IMPORTED_MODULE_1__","_BufferAttributeModel__WEBPACK_IMPORTED_MODULE_2__","_ECPointAttributeModel__WEBPACK_IMPORTED_MODULE_3__","_UInt160AttributeModel__WEBPACK_IMPORTED_MODULE_4__","_UInt256AttributeModel__WEBPACK_IMPORTED_MODULE_5__","BufferAttributeModel","_AttributeBaseModel__WEBPACK_IMPORTED_MODULE_0__","ECPointAttributeModel","_AttributeBaseModel__WEBPACK_IMPORTED_MODULE_1__","UInt160AttributeModel","UInt256AttributeModel","ClaimTransactionModel","_TransactionBaseModel__WEBPACK_IMPORTED_MODULE_1__","_TransactionTypeModel__WEBPACK_IMPORTED_MODULE_2__","InputModel","_IOHelper__WEBPACK_IMPORTED_MODULE_1__","SIZE","InvocationTransactionModel","_TransactionBaseModel__WEBPACK_IMPORTED_MODULE_3__","_TransactionTypeModel__WEBPACK_IMPORTED_MODULE_4__","OutputModel","_IOHelper__WEBPACK_IMPORTED_MODULE_0__","ArrayStackItem","_ArrayLikeStackItem__WEBPACK_IMPORTED_MODULE_1__","_StackItemType__WEBPACK_IMPORTED_MODULE_3__","ArrayLikeStackItem","_StackItemBase__WEBPACK_IMPORTED_MODULE_4__","newSeen","incrementInternalArray","decrementInternalArray","InvalidContractPropertyStateError","InvalidVersionError","JSONRPCProvider","responseJSON","getUtilityValue","TransactionBase","Base","TransactionBaseClass","outputsForInputs","inputValue","outputValue","getReferencesInternal","getTransactionResultsInternal","addOutputs","lodash_pickBy__WEBPACK_IMPORTED_MODULE_4___default","baseGetScriptHashesForVerifyingInternal","inputHashes","outputHashes","attributeHashes","_attribute__WEBPACK_IMPORTED_MODULE_16__","_attribute__WEBPACK_IMPORTED_MODULE_17__","_Input__WEBPACK_IMPORTED_MODULE_19__","_Output__WEBPACK_IMPORTED_MODULE_20__","_Witness__WEBPACK_IMPORTED_MODULE_15__","_utils__WEBPACK_IMPORTED_MODULE_14__","vin","sys_fee","net_fee","_common__WEBPACK_IMPORTED_MODULE_18__","verifyScripts","verifyDoubleSpend","verifyOutputs","verifyTransactionResults","outputsGrouped","resultsDestroy","resultsIssue","__","hashesArr","lodash_zip__WEBPACK_IMPORTED_MODULE_2___default","_ScriptContainer__WEBPACK_IMPORTED_MODULE_12__","BufferStackItem","_StackItemBase__WEBPACK_IMPORTED_MODULE_2__","p256","hash_js__WEBPACK_IMPORTED_MODULE_0__","prime","p","gRed","doubles","step","points","naf","wnd","BooleanStackItem","TRUE","FALSE","_StackItemType__WEBPACK_IMPORTED_MODULE_5__","IntegerStackItem","_StackItemBase__WEBPACK_IMPORTED_MODULE_6__","_constants__WEBPACK_IMPORTED_MODULE_4__","_StorageContextStackItem__WEBPACK_IMPORTED_MODULE_8__","StorageContextStackItem","StructStackItem","_ArrayLikeStackItem__WEBPACK_IMPORTED_MODULE_2__","Struct","MapStackItem","_StackItemBase__WEBPACK_IMPORTED_MODULE_8__","referenceKeys","referenceValues","_referenceCounter__WEBPACK_IMPORTED_MODULE_7__","referenceKey","_ArrayStackItem__WEBPACK_IMPORTED_MODULE_5__","lodash_fromPairs__WEBPACK_IMPORTED_MODULE_1___default","_StackItemType__WEBPACK_IMPORTED_MODULE_9__","BaseState","versionIn","ContractPropertyStateModel","HasStorage","HasStorageDynamicInvoke","HasStoragePayable","HasStorageDynamicInvokePayable","HasDynamicInvoke","HasDynamicInvokePayable","HasPayable","Payable","assertContractPropertyState","isContractPropertyState","_errors__WEBPACK_IMPORTED_MODULE_1__","getContractProperties","NoProperty","ScriptContainerType","StorageChangeType","assertStorageChangeType","isStorageChangeType","signAndRelay","relayConsensusPayload","initializeConsensusCommon","initializeNewConsensus","lodash_findIndex__WEBPACK_IMPORTED_MODULE_3___default","_context__WEBPACK_IMPORTED_MODULE_12__","lodash_range__WEBPACK_IMPORTED_MODULE_2___default","initializeConsensus","_context__WEBPACK_IMPORTED_MODULE_13__","checkSignatures","M","mutablePublicKeyToSignature","signAndRelayChangeView","checkExpectedView","initializeConsensusInitial","getPrimaryIndexType","incrementExpectedView","addTransaction","verified","transactionsLength","cloneSignatureSent","cloneViewChanging","requestChangeViewBackup","lodash_zip__WEBPACK_IMPORTED_MODULE_1___default","deserializeStackItemBase","_StackItemType__WEBPACK_IMPORTED_MODULE_12__","_BufferStackItem__WEBPACK_IMPORTED_MODULE_8__","_BooleanStackItem__WEBPACK_IMPORTED_MODULE_7__","_IntegerStackItem__WEBPACK_IMPORTED_MODULE_10__","_errors__WEBPACK_IMPORTED_MODULE_9__","lodash_range__WEBPACK_IMPORTED_MODULE_1___default","_ArrayStackItem__WEBPACK_IMPORTED_MODULE_6__","_StructStackItem__WEBPACK_IMPORTED_MODULE_13__","_MapStackItem__WEBPACK_IMPORTED_MODULE_11__","deserializeStackItem","ByteArrayContractParameter","BooleanContractParameter","Hash160ContractParameter","IntegerContractParameter","ArrayContractParameter","MapContractParameter","AttributeBase","AttributeBaseClass","BlockBase","scriptInternal","AccountInput","_transaction__WEBPACK_IMPORTED_MODULE_3__","getMessage","getLine","ThrowError","ShiftTooLargeError","ContainerTooLargeError","ItemTooLargeError","StackUnderflowError","stackLength","NumberTooLargeError","AltStackUnderflowError","StackOverflowError","InvocationStackOverflowError","OutOfGASError","CodeOverflowError","UnknownSysCallError","UnknownError","XTuckNegativeError","XSwapNegativeError","XDropNegativeError","XDropUnderflowError","PickNegativeError","RollNegativeError","SubstrNegativeEndError","SubstrNegativeStartError","LeftNegativeError","RightNegativeError","RightLengthError","InvalidCheckMultisigArgumentsError","InvalidPackCountError","InvalidPickItemKeyError","InvalidRemoveIndexError","InvalidHasKeyIndexError","InvalidSetItemIndexError","InvalidGetHeaderArgumentsError","InvalidGetBlockArgumentsError","InvalidIndexError","InvalidInvocationTransactionError","ContractNoStorageError","ContractNoDynamicInvokeError","AccountFrozenError","NotEligibleVoteError","BadWitnessCheckError","UnexpectedScriptContainerError","InvalidContractGetStorageContextError","ReadOnlyStorageContextError","InsufficientReturnValueError","stackSize","InvalidTailCallReturnValueError","found","TemplateVMError","ConstantStorageError","InvalidVerifySyscallError","syscall","ConsensusMessageType","assertConsensusMessageType","isConsensusMessageType","Context","class","_neo_one_node_browser__WEBPACK_IMPORTED_MODULE_0__","makeErrorWithCode","Labels","labelToTag","label","replace","tracer","globalStats","_opencensus_web_core__WEBPACK_IMPORTED_MODULE_0__","noOp","getMetrics","registerExporter","unregisterExporter","withTagContext","getCurrentTagContext","lodash_range__WEBPACK_IMPORTED_MODULE_4___default","fromCharCode","grouped","coinsGroup","ustart","istart","uend","iend","sysFeeEnd","sysFeeStart","bn_js__WEBPACK_IMPORTED_MODULE_7__","crypto__WEBPACK_IMPORTED_MODULE_8__","clazz","toKey","thiz","equalsFunc","valuePromise","lazyOrValue","sumWeight","bignumber_js__WEBPACK_IMPORTED_MODULE_6___default","sumValue","plus","isEqualTo","integerValue","ROUND_FLOOR","startIn","endIn","getValueIn","sum","old","minus","ROUND_CEIL","BinaryReader","mutableIndex","checkRead","readInt8","lodash_takeWhile__WEBPACK_IMPORTED_MODULE_3___default","fb","firstByte","IssueTransactionModel","ContractModel","_BaseState__WEBPACK_IMPORTED_MODULE_5__","_ContractPropertyStateModel__WEBPACK_IMPORTED_MODULE_6__","serializeContractWireBase","Header","_BlockBase__WEBPACK_IMPORTED_MODULE_4__","contractSizeInternal","sizeOfContract","deserializeContractWireBase","parameters","returntype","code_version","properties","dynamic_invoke","_neo_one_client_full_common__WEBPACK_IMPORTED_MODULE_7__","UnknownTypeError","KeyNotFoundError","UnknownChangeTypeError","keyString","ActionType","assertActionType","isActionType","ConsensusMessageBase","HeaderContext","_Context__WEBPACK_IMPORTED_MODULE_6__","toJSON","_models__WEBPACK_IMPORTED_MODULE_0__","_types__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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wiG,IAAA,IAAAC,EAAA5iG,EAAA,KAGO,MAAM2iG,EAAO,CAClBz2F,KAAM,QAEN22F,MAAO,KACPC,EAAG,0EACH3+F,EAAG,0EACH6B,EAAG,0EACHmzB,EAAG,0EACHpuB,KAAM63F,EAAA,OACNG,MAAM,EACNtoE,EAAG,CACD,mEACA,mEACA,CACEuoE,QAAS,CACPC,KAAM,EACNC,OAAQ,CACN,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,mEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,kEACA,oEAEF,CACE,mEACA,sEAINC,IAAK,CACHC,IAAK,EACLF,OAAQ,CACN,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,kEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,iEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,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","file":"workers.17.c144d707.js","sourcesContent":["export * from './BinaryWriter';\nexport * from './IOHelper';\nexport * from './JSONHelper';\nexport * from './ScriptBuilder';\nexport * from './common';\nexport * from './contractParameters';\nexport * from './crypto';\nexport * from './errors';\nexport * from './helpers';\nexport * from './models';\nexport * from './types';\nexport * from './utils';\n","import { common, crypto, ECPoint, PrivateKey } from '@neo-one/client-common';\nimport {\n  Blockchain,\n  ChangeViewConsensusMessage,\n  ConsensusMessage,\n  ConsensusPayload,\n  Node,\n  PrepareResponseConsensusMessage,\n  Transaction,\n  UnsignedConsensusPayload,\n  Witness,\n} from '@neo-one/node-core';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport _ from 'lodash';\nimport { ConsensusContext } from './ConsensusContext';\nimport {\n  BlockSentContext,\n  cloneBlockSent,\n  cloneInitial,\n  Context,\n  HeaderContext,\n  InitialContext,\n  RequestReceivedContext,\n  SignatureSentContext,\n  Type,\n  ViewChangingContext,\n} from './context';\nimport { Result } from './types';\n\nexport const signAndRelay = ({\n  node,\n  privateKey,\n  context,\n  consensusMessage,\n}: {\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly context: Context;\n  readonly consensusMessage: ConsensusMessage;\n}) => {\n  const payload = ConsensusPayload.sign(\n    new UnsignedConsensusPayload({\n      version: context.version,\n      previousHash: context.previousHash,\n      blockIndex: context.blockIndex,\n      validatorIndex: context.myIndex,\n      consensusMessage,\n    }),\n\n    privateKey,\n  );\n\n  node.relayConsensusPayload(payload);\n};\n\nexport const getInitialContextAdd = ({\n  blockchain,\n  publicKey,\n  validators,\n  blockReceivedTimeSeconds,\n}: {\n  readonly blockchain: Blockchain;\n  readonly publicKey: ECPoint;\n  readonly validators: readonly ECPoint[];\n  readonly blockReceivedTimeSeconds?: number;\n}) => {\n  const blockIndex = blockchain.currentBlock.index + 1;\n  const primaryIndex = blockIndex % validators.length;\n  const myIndex = _.findIndex(validators, (validator) => common.ecPointEqual(validator, publicKey));\n\n  return {\n    type: primaryIndex === myIndex ? 'primary' : 'backup',\n    previousHash: blockchain.currentBlock.hash,\n    blockIndex,\n    viewNumber: 0,\n    myIndex,\n    primaryIndex,\n    expectedView: _.range(0, validators.length).map(() => 0),\n    validators,\n    blockReceivedTimeSeconds,\n  };\n};\n\nfunction initializeConsensusCommon<TContext extends InitialContext | SignatureSentContext>({\n  context,\n  blockchain,\n  consensusContext,\n}: {\n  readonly context: TContext;\n  readonly blockchain: Blockchain;\n  readonly consensusContext: ConsensusContext;\n}): Result<TContext> {\n  if (context.myIndex < 0) {\n    return { context };\n  }\n\n  if (context.type === 'primary') {\n    return {\n      context,\n      timerSeconds: Math.max(\n        0,\n        blockchain.settings.secondsPerBlock - (consensusContext.nowSeconds() - context.blockReceivedTimeSeconds),\n      ),\n    };\n  }\n\n  const { secondsPerBlock } = blockchain.settings;\n\n  return {\n    context,\n    // tslint:disable-next-line no-bitwise\n    timerSeconds: secondsPerBlock << (context.viewNumber + 1),\n  };\n}\n\nexport const initializeNewConsensus = async ({\n  blockchain,\n  publicKey,\n  consensusContext,\n}: {\n  readonly blockchain: Blockchain;\n  readonly publicKey: ECPoint;\n  readonly consensusContext: ConsensusContext;\n}): Promise<Result<InitialContext>> => {\n  const validators = await blockchain.getValidators([]);\n  const blockReceivedTimeSeconds = blockchain.currentBlock.timestamp;\n  const blockIndex = blockchain.currentBlock.index + 1;\n  const primaryIndex = blockIndex % validators.length;\n  const myIndex = _.findIndex(validators, (validator) => common.ecPointEqual(validator, publicKey));\n\n  const context = new InitialContext({\n    type: primaryIndex === myIndex ? 'primary' : 'backup',\n    previousHash: blockchain.currentBlock.hash,\n    blockIndex,\n    viewNumber: 0,\n    myIndex,\n    primaryIndex,\n    expectedView: _.range(0, validators.length).map(() => 0),\n    validators,\n    blockReceivedTimeSeconds,\n  });\n\n  return initializeConsensusCommon({ context, blockchain, consensusContext });\n};\n\nconst getPrimaryIndexType = ({\n  context,\n  viewNumber,\n}: {\n  readonly context: Context;\n  readonly viewNumber: number;\n}): {\n  readonly type: Type;\n  readonly primaryIndex: number;\n} => {\n  let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n  if (primaryIndex < 0) {\n    primaryIndex += context.validators.length;\n  }\n\n  return {\n    type: primaryIndex === context.myIndex ? 'primary' : 'backup',\n    primaryIndex,\n  };\n};\n\nexport const initializeConsensus = ({\n  node,\n  context: contextIn,\n  viewNumber,\n  consensusContext,\n}: {\n  readonly node: Node;\n  readonly context: Context;\n  readonly viewNumber: number;\n  readonly consensusContext: ConsensusContext;\n}): Result<InitialContext | SignatureSentContext> => {\n  if (viewNumber <= 0) {\n    throw new Error('Programming error');\n  }\n  const { blockchain } = node;\n  let context = contextIn;\n  let primaryIndex = (context.blockIndex - viewNumber) % context.validators.length;\n  if (primaryIndex < 0) {\n    primaryIndex += context.validators.length;\n  }\n  const type = primaryIndex === context.myIndex ? 'primary' : 'backup';\n  context =\n    type === 'primary' && context instanceof SignatureSentContext\n      ? context.clone({ type, primaryIndex, viewNumber })\n      : cloneInitial(context, { type, primaryIndex, viewNumber });\n\n  return initializeConsensusCommon({ blockchain, context, consensusContext });\n};\n\nexport async function checkSignatures<TContext extends HeaderContext>({\n  node,\n  context,\n}: {\n  readonly node: Node;\n  readonly context: TContext;\n}): Promise<Result<TContext | BlockSentContext>> {\n  const signaturesLength = context.signatures.filter((p) => p !== undefined).length;\n\n  if (\n    signaturesLength >= context.M &&\n    context.transactionHashes.every((hash) => context.transactions[hash] !== undefined)\n  ) {\n    const mutablePublicKeyToSignature: { [key: string]: Buffer } = {};\n    // tslint:disable-next-line no-loop-statement\n    for (let i = 0, j = 0; i < context.validators.length && j < context.M; i += 1) {\n      const validator = context.validators[i];\n      const signature = context.signatures[i];\n      if (signature !== undefined) {\n        mutablePublicKeyToSignature[common.ecPointToHex(validator)] = signature;\n        j += 1;\n      }\n    }\n    const script = crypto.createMultiSignatureWitness(\n      context.M,\n      context.validators,\n      mutablePublicKeyToSignature,\n      Witness,\n    );\n\n    const block = context.header.clone({\n      transactions: context.transactionHashes.map((hash) => context.transactions[hash]).filter(commonUtils.notNull),\n      script,\n    });\n\n    await node.relayBlock(block);\n\n    return { context: cloneBlockSent(context) };\n  }\n\n  return { context };\n}\n\nexport const signAndRelayChangeView = ({\n  node,\n  privateKey,\n  context,\n}: {\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly context: Context;\n}) => {\n  signAndRelay({\n    node,\n    privateKey,\n    context,\n    consensusMessage: new ChangeViewConsensusMessage({\n      viewNumber: context.viewNumber,\n      newViewNumber: context.expectedView[context.myIndex],\n    }),\n  });\n};\n\nexport const checkExpectedView = ({\n  context,\n  viewNumber,\n}: {\n  readonly context: Context;\n  readonly viewNumber: number;\n}) => context.viewNumber !== viewNumber && context.expectedView.filter((p) => p === viewNumber).length >= context.M;\n\nexport const initializeConsensusInitial = ({\n  blockchain,\n  context,\n  viewNumber,\n  consensusContext,\n}: {\n  readonly blockchain: Blockchain;\n  readonly context: Context;\n  readonly viewNumber: number;\n  readonly consensusContext: ConsensusContext;\n}): Result<InitialContext> => {\n  const { primaryIndex, type } = getPrimaryIndexType({ context, viewNumber });\n\n  return initializeConsensusCommon({\n    blockchain,\n    context: cloneInitial(context, { type, primaryIndex, viewNumber }),\n    consensusContext,\n  });\n};\n\nexport const incrementExpectedView = (context: Context): readonly number[] => {\n  const mutableExpectedView = [...context.expectedView];\n  mutableExpectedView[context.myIndex] += 1;\n\n  return mutableExpectedView;\n};\n\nconst requestChangeViewBackup = ({\n  context: contextIn,\n  node,\n  privateKey,\n  consensusContext,\n}: {\n  readonly context: RequestReceivedContext;\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly consensusContext: ConsensusContext;\n}): Result<InitialContext | ViewChangingContext> => {\n  const context = contextIn.cloneViewChanging({\n    expectedView: incrementExpectedView(contextIn),\n  });\n\n  signAndRelayChangeView({ context, node, privateKey });\n\n  const viewNumber = context.expectedView[context.myIndex];\n  if (checkExpectedView({ context, viewNumber })) {\n    return initializeConsensusInitial({\n      blockchain: node.blockchain,\n      context,\n      viewNumber,\n      consensusContext,\n    });\n  }\n\n  return { context };\n};\n\nexport const addTransaction = async ({\n  context: contextIn,\n  node,\n  privateKey,\n  transaction,\n  verify,\n  consensusContext,\n}: {\n  readonly context: RequestReceivedContext;\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly transaction: Transaction;\n  readonly verify: boolean;\n  readonly consensusContext: ConsensusContext;\n}): Promise<\n  Result<RequestReceivedContext | InitialContext | ViewChangingContext | SignatureSentContext | BlockSentContext>\n> => {\n  let context = contextIn;\n  const { blockchain } = node;\n  const tx = await blockchain.transaction.tryGet({ hash: transaction.hash });\n  if (tx !== undefined) {\n    return { context };\n  }\n  if (verify) {\n    let verified = true;\n    try {\n      const { verifications } = await blockchain.verifyTransaction({\n        transaction,\n        memPool: Object.values(context.transactions).filter(commonUtils.notNull),\n      });\n      verified = verifications.every(({ failureMessage }) => failureMessage === undefined);\n    } catch {\n      verified = false;\n    }\n    if (!verified) {\n      return { context };\n    }\n  }\n\n  context = context.clone({\n    transactions: {\n      ...context.transactions,\n      [transaction.hashHex]: transaction,\n    },\n  });\n\n  const transactionsLength = Object.values(context.transactions).length;\n  if (context.transactionHashes.length === transactionsLength) {\n    const validators = await blockchain.getValidators(Object.values(context.transactions).filter(commonUtils.notNull));\n\n    const consensusAddress = crypto.getConsensusAddress(validators);\n    if (common.uInt160Equal(consensusAddress, context.header.nextConsensus)) {\n      const mutableSignatures = [...context.signatures];\n      mutableSignatures[context.myIndex] = crypto.sign({\n        message: context.header.message,\n        privateKey,\n      });\n\n      const newContext = context.cloneSignatureSent({ signatures: mutableSignatures });\n      signAndRelay({\n        node,\n        context: newContext,\n        privateKey,\n        consensusMessage: new PrepareResponseConsensusMessage({\n          viewNumber: newContext.viewNumber,\n          signature: commonUtils.nullthrows(mutableSignatures[newContext.myIndex]),\n        }),\n      });\n\n      return checkSignatures({ node, context: newContext });\n    }\n\n    return requestChangeViewBackup({\n      context,\n      node,\n      privateKey,\n      consensusContext,\n    });\n  }\n\n  return { context };\n};\n","import { makeErrorWithCode } from '@neo-one/utils';\n\nexport const NotFoundError = makeErrorWithCode('NOT_FOUND', () => 'Not found.');\nexport const UnknownTypeError = makeErrorWithCode(\n  'UNKNOWN_TYPE',\n  (type?: string) => `Unknown type${type === undefined ? `.` : `, found: ${type}`}`,\n);\nexport const KeyNotFoundError = makeErrorWithCode(\n  'KEY_NOT_FOUND',\n  (keyString: string) => `Key ${keyString} not found in database.`,\n);\nexport const UnknownChangeTypeError = makeErrorWithCode('UNKNOWN_CHANGE_TYPE', () => 'Unknown change type.');\n","import { utils as clientUtils } from '@neo-one/client-common';\nimport BigNumber from 'bignumber.js';\nimport { BN } from 'bn.js';\nimport { randomBytes } from 'crypto';\nimport _ from 'lodash';\n\nconst toASCII = (bytes: Buffer) => {\n  let result = '';\n  _.range(bytes.length).forEach((i) => {\n    result += String.fromCharCode(bytes.readUInt8(i));\n  });\n\n  return result;\n};\n\nconst toUTF8 = (bytes: Buffer) => bytes.toString('utf8');\n\nconst calculateClaimAmount = async ({\n  coins,\n  decrementInterval,\n  generationAmount,\n  getSystemFee,\n}: {\n  readonly coins: ReadonlyArray<{\n    readonly value: BN;\n    readonly startHeight: number;\n    readonly endHeight: number;\n  }>;\n  readonly decrementInterval: number;\n  readonly generationAmount: readonly number[];\n  readonly getSystemFee: (index: number) => Promise<BN>;\n}): Promise<BN> => {\n  const grouped = Object.values(_.groupBy(coins, (coin) => `${coin.startHeight}:${coin.endHeight}`));\n\n  const claimed = await Promise.all(\n    grouped.map(async (coinsGroup) => {\n      const { startHeight, endHeight } = coinsGroup[0];\n\n      let amount = clientUtils.ZERO;\n      let ustart = Math.floor(startHeight / decrementInterval);\n      if (ustart < generationAmount.length) {\n        let istart = startHeight % decrementInterval;\n        let uend = Math.floor(endHeight / decrementInterval);\n        let iend = endHeight % decrementInterval;\n        if (uend >= generationAmount.length) {\n          uend = generationAmount.length;\n          iend = 0;\n        }\n\n        if (iend === 0) {\n          uend -= 1;\n          iend = decrementInterval;\n        }\n\n        // tslint:disable-next-line no-loop-statement\n        while (ustart < uend) {\n          amount = amount.addn((decrementInterval - istart) * generationAmount[ustart]);\n\n          ustart += 1;\n          istart = 0;\n        }\n\n        amount = amount.addn((iend - istart) * generationAmount[ustart]);\n      }\n\n      const [sysFeeEnd, sysFeeStart] = await Promise.all([\n        getSystemFee(endHeight - 1),\n        startHeight === 0 ? Promise.resolve(clientUtils.ZERO) : getSystemFee(startHeight - 1),\n      ]);\n\n      amount = amount.add(sysFeeEnd.sub(sysFeeStart).div(clientUtils.ONE_HUNDRED_MILLION));\n      const totalValue = coinsGroup.reduce((acc, { value }) => acc.add(value), clientUtils.ZERO);\n\n      return [totalValue, amount];\n    }),\n  );\n\n  return claimed.reduce(\n    (acc, [value, amount]) => acc.add(value.div(clientUtils.ONE_HUNDRED_MILLION).mul(amount)),\n    clientUtils.ZERO,\n  );\n};\n\nconst randomUInt64 = (): BN => new BN(randomBytes(8).toString('hex'), 16);\n\nconst toKeyString = (clazz: { readonly name: string }, toKey: () => string) => () => `${clazz.name}:${toKey()}`;\n\nfunction lazyAsync<Input, Value>(getValue: (input: Input) => Promise<Value>): (input: Input) => Promise<Value> {\n  let valuePromise: Promise<Value> | undefined;\n\n  return async (input) => {\n    if (valuePromise === undefined) {\n      valuePromise = getValue(input);\n    }\n\n    return valuePromise;\n  };\n}\n\nfunction lazyOrValue<Value>(getValue: (() => Value) | Value): () => Value {\n  // tslint:disable-next-line no-any\n  let settings: any =\n    typeof getValue === 'function' ? { type: 'lazy', getValue } : { type: 'evaluated', value: getValue };\n\n  return () => {\n    if (settings.type === 'lazy') {\n      settings = { type: 'evaluated', value: settings.getValue() };\n    }\n\n    return settings.value;\n  };\n}\n\nfunction weightedAverage(\n  input: ReadonlyArray<{\n    readonly value: number;\n    readonly weight: BigNumber;\n  }>,\n): number {\n  let sumWeight = new BigNumber(0);\n  let sumValue = new BigNumber(0);\n  input.forEach((value) => {\n    sumWeight = sumWeight.plus(value.weight);\n    sumValue = sumValue.plus(value.weight.times(value.value));\n  });\n\n  if (sumValue.isEqualTo(0) || sumWeight.isEqualTo(0)) {\n    return 0;\n  }\n\n  return sumValue\n    .div(sumWeight)\n    .integerValue(BigNumber.ROUND_FLOOR)\n    .toNumber();\n}\n\nfunction weightedFilter<T>(\n  input: readonly T[],\n  startIn: number,\n  endIn: number,\n  getValueIn: (value: T) => BN,\n): ReadonlyArray<readonly [T, BigNumber]> {\n  const start = new BigNumber(startIn);\n  const end = new BigNumber(endIn);\n  const getValue = (value: T) => new BigNumber(getValueIn(value).toString(10));\n  const amount = input.reduce((acc, value) => acc.plus(getValue(value)), new BigNumber(0));\n\n  let sum = new BigNumber(0);\n  let current = new BigNumber(0);\n  const mutableResult: Array<readonly [T, BigNumber]> = [];\n  // tslint:disable-next-line no-loop-statement\n  for (const value of input) {\n    if (current.gte(end)) {\n      break;\n    }\n    let weight = getValue(value);\n    sum = sum.plus(weight);\n    const old = current;\n    current = sum.div(amount);\n    if (current.lte(start)) {\n      // eslint-disable-next-line\n      continue;\n    }\n    if (old.lt(start)) {\n      weight = current.gt(end) ? end.minus(start).times(amount) : current.minus(start).times(amount);\n    } else if (current.gt(end)) {\n      weight = end.minus(old).times(amount);\n    }\n\n    mutableResult.push([\n      value,\n      weight.gte(0) ? weight.integerValue(BigNumber.ROUND_FLOOR) : weight.integerValue(BigNumber.ROUND_CEIL),\n    ] as const);\n  }\n\n  return mutableResult;\n}\n\nfunction equals<T>(\n  // tslint:disable-next-line no-any readonly-array\n  clazz: new (...args: any[]) => T,\n  thiz: T,\n  equalsFunc: (other: T) => boolean,\n  // tslint:disable-next-line no-any\n): (other: any) => boolean {\n  return (other): boolean => other != undefined && (thiz === other || (other instanceof clazz && equalsFunc(other)));\n}\n\nexport const utils = {\n  ...clientUtils,\n  toASCII,\n  toUTF8,\n  calculateClaimAmount,\n  randomUInt64,\n  toKeyString,\n  equals,\n  lazyAsync,\n  lazyOrValue,\n  weightedAverage,\n  weightedFilter,\n};\n","import { BinaryWriter } from '@neo-one/client-common';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n  SerializeWire,\n} from '../Serializable';\nimport { BinaryReader } from '../utils';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport abstract class ContractParameterBase<\n  T = {},\n  TJSON = {},\n  Type extends ContractParameterType = ContractParameterType\n> implements SerializableWire<T>, SerializableJSON<TJSON> {\n  public static deserializeContractParameterBaseWireBase({ reader }: DeserializeWireBaseOptions) {\n    const type = reader.readUInt8();\n\n    return { type };\n  }\n\n  public static deserializeWireBase(_options: DeserializeWireBaseOptions): ContractParameterBase {\n    throw new Error('Not Implemented');\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): ContractParameterBase {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public abstract readonly type: Type;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public asBuffer(): Buffer {\n    throw new Error('Unimplemented.');\n  }\n\n  public asBoolean(): boolean {\n    return this.asBuffer().some((value) => value !== 0);\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.type);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): TJSON {\n    throw new Error('Not Implemented');\n  }\n}\n","import { ECPoint, UInt160 } from '@neo-one/client-common';\nimport { Action } from './action';\nimport { Asset } from './Asset';\nimport { Contract } from './Contract';\nimport { InvocationResult } from './invocationResult';\nimport { StorageChange } from './storageChange';\nimport { FeeContext, Input, InvocationTransaction, Transaction } from './transaction';\nimport { TransactionData } from './TransactionData';\nimport { BinaryReader } from './utils';\n\nexport { SerializeWire, SerializableWire, createSerializeWire } from '@neo-one/client-common';\n\nexport interface DeserializeWireContext {\n  readonly messageMagic: number;\n}\n\nexport interface DeserializeWireBaseOptions {\n  readonly context: DeserializeWireContext;\n  readonly reader: BinaryReader;\n}\n\nexport interface DeserializeWireOptions {\n  readonly context: DeserializeWireContext;\n  readonly buffer: Buffer;\n}\n\nexport type DeserializeWireBase<T> = (options: DeserializeWireBaseOptions) => T;\nexport type DeserializeWire<T> = (options: DeserializeWireOptions) => T;\n\nexport function createDeserializeWire<T>(deserializeWireBase: DeserializeWireBase<T>): DeserializeWire<T> {\n  return (options) =>\n    deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n}\n\nexport interface SerializableInvocationData {\n  readonly asset: Asset | undefined;\n  readonly contracts: readonly Contract[];\n  readonly deletedContractHashes: readonly UInt160[];\n  readonly migratedContractHashes: ReadonlyArray<readonly [UInt160, UInt160]>;\n  readonly voteUpdates: ReadonlyArray<readonly [UInt160, ReadonlyArray<ECPoint>]>;\n  readonly result: InvocationResult;\n  readonly actions: readonly Action[];\n  readonly storageChanges: readonly StorageChange[];\n}\n\nexport interface SerializeJSONContext {\n  readonly addressVersion: number;\n  readonly feeContext: FeeContext;\n  readonly tryGetInvocationData: (\n    transaction: InvocationTransaction,\n  ) => Promise<SerializableInvocationData | undefined>;\n  readonly tryGetTransactionData: (transaction: Transaction) => Promise<TransactionData | undefined>;\n  readonly getUnclaimed: (hash: UInt160) => Promise<readonly Input[]>;\n  readonly getUnspent: (hash: UInt160) => Promise<readonly Input[]>;\n}\n\nexport type SerializeJSON<TJSON> = (context: SerializeJSONContext) => TJSON | Promise<TJSON>;\n\nexport interface SerializableJSON<TJSON> {\n  readonly serializeJSON: SerializeJSON<TJSON>;\n}\n","import { makeErrorWithCode } from '@neo-one/utils';\n\nexport enum StackItemType {\n  ByteArray = 0x00,\n  Boolean = 0x01,\n  Integer = 0x02,\n  InteropInterface = 0x40,\n  Array = 0x80,\n  Struct = 0x81,\n  Map = 0x82,\n}\n\nexport const InvalidStackItemTypeError = makeErrorWithCode(\n  'INVALID_STACK_ITEM_TYPE',\n  (stackItemType: number) => `Expected StackItemType, found: ${stackItemType.toString(16)}`,\n);\n\nconst isStackItemType = (value: number): value is StackItemType =>\n  // tslint:disable-next-line strict-type-predicates\n  StackItemType[value] !== undefined;\n\nexport const assertStackItemType = (value: number): StackItemType => {\n  if (isStackItemType(value)) {\n    return value;\n  }\n\n  throw new InvalidStackItemTypeError(value);\n};\n","import { BinaryWriter, common, ECPoint, UInt160, UInt256 } from '@neo-one/client-common';\nimport {\n  Account,\n  Asset,\n  Attribute,\n  Block,\n  BlockBase,\n  Contract,\n  ContractParameter,\n  Equatable,\n  Input,\n  Output,\n  Transaction,\n  utils,\n  Validator,\n  VMSettings,\n  Witness,\n} from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport { BLOCK_HEIGHT_MAX_SIZE_CHECKS, MAX_SIZE_BIG_INTEGER } from '../constants';\nimport { AttributeStackItem } from './AttributeStackItem';\nimport {\n  IntegerTooLargeError,\n  InvalidRecursiveSerializeError,\n  InvalidValueAccountError,\n  InvalidValueArrayError,\n  InvalidValueAssetError,\n  InvalidValueAttributeError,\n  InvalidValueAttributeStackItemError,\n  InvalidValueBlockBaseError,\n  InvalidValueBlockError,\n  InvalidValueContractError,\n  InvalidValueEnumeratorError,\n  InvalidValueHeaderError,\n  InvalidValueInputError,\n  InvalidValueIteratorError,\n  InvalidValueMapStackItemError,\n  InvalidValueOutputError,\n  InvalidValueStorageContextStackItemError,\n  InvalidValueTransactionError,\n  InvalidValueValidatorError,\n  InvalidValueWitnessError,\n} from './errors';\nimport { MapStackItem } from './MapStackItem';\nimport { StackItem } from './StackItem';\nimport { StackItemEnumerator } from './StackItemEnumerator';\nimport { StackItemIterator } from './StackItemIterator';\nimport { StackItemType } from './StackItemType';\nimport { StorageContextStackItem } from './StorageContextStackItem';\n\nexport interface AsStorageContextStackItemOptions {\n  readonly currentBlockIndex: number;\n  readonly vm: VMSettings;\n  readonly scriptHash: UInt160;\n  readonly callingScriptHash: UInt160 | undefined;\n  readonly entryScriptHash: UInt160;\n}\n\nexport class StackItemBase implements Equatable {\n  private mutableCount = 0;\n\n  public get referenceCount(): number {\n    return this.mutableCount;\n  }\n\n  public increment(seen = new Set<StackItemBase>()): number {\n    if (seen.has(this)) {\n      return 1;\n    }\n    seen.add(this);\n    this.mutableCount += 1;\n\n    if (this.mutableCount > 1) {\n      return 1;\n    }\n\n    return this.incrementInternal(seen) + 1;\n  }\n\n  public decrement(seen = new Set<StackItemBase>()): number {\n    if (seen.has(this)) {\n      return -1;\n    }\n    seen.add(this);\n    this.mutableCount -= 1;\n\n    if (this.mutableCount >= 1) {\n      return -1;\n    }\n\n    return this.decrementInternal(seen) - 1;\n  }\n\n  public toStructuralKey(): string {\n    return this.asBuffer().toString('hex');\n  }\n\n  // tslint:disable-next-line no-any\n  public equals(other: any): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof StackItemBase) {\n      // Note that we don't use serialize here because\n      const thisValue = this.asBufferMaybe();\n      const otherValue = other.asBufferMaybe();\n\n      return thisValue !== undefined && otherValue !== undefined && thisValue.equals(otherValue);\n    }\n\n    return false;\n  }\n\n  public serialize(seen = new Set<StackItemBase>()): Buffer {\n    if (seen.has(this)) {\n      throw new InvalidRecursiveSerializeError();\n    }\n    const nextSeen = new Set(seen);\n    nextSeen.add(this);\n\n    return this.serializeInternal(nextSeen);\n  }\n\n  // tslint:disable-next-line readonly-array\n  public asArray(): StackItem[] {\n    throw new InvalidValueArrayError();\n  }\n\n  public asBigInteger(currentBlockIndex?: number): BN {\n    if (currentBlockIndex === undefined || currentBlockIndex < BLOCK_HEIGHT_MAX_SIZE_CHECKS) {\n      return this.asBigIntegerUnsafe();\n    }\n    const value = this.asBuffer();\n    if (value.length > MAX_SIZE_BIG_INTEGER) {\n      /* istanbul ignore next */\n      throw new IntegerTooLargeError();\n    }\n\n    return utils.fromSignedBuffer(value);\n  }\n\n  public asBigIntegerUnsafe(): BN {\n    return utils.fromSignedBuffer(this.asBuffer());\n  }\n\n  public asBuffer(): Buffer {\n    /* istanbul ignore next */\n    throw new Error('Unimplemented.');\n  }\n\n  public asBufferMaybe(): Buffer | undefined {\n    try {\n      return this.asBuffer();\n    } catch {\n      return undefined;\n    }\n  }\n\n  public asBoolean(): boolean {\n    return this.asBuffer().some((value) => value !== 0);\n  }\n\n  public asUInt160(): UInt160 {\n    return common.bufferToUInt160(this.asBuffer());\n  }\n\n  public asUInt160Maybe(): UInt160 | undefined {\n    try {\n      return this.asUInt160();\n    } catch {\n      return undefined;\n    }\n  }\n\n  public asUInt256(): UInt256 {\n    return common.bufferToUInt256(this.asBuffer());\n  }\n\n  public asUInt256Maybe(): UInt256 | undefined {\n    try {\n      return this.asUInt256();\n    } catch {\n      return undefined;\n    }\n  }\n\n  public asECPoint(): ECPoint {\n    return common.bufferToECPoint(this.asBuffer());\n  }\n\n  public asECPointMaybe(): ECPoint | undefined {\n    try {\n      return this.asECPoint();\n    } catch {\n      return undefined;\n    }\n  }\n\n  public asString(): string {\n    return utils.toUTF8(this.asBuffer());\n  }\n\n  public asHeader(): BlockBase {\n    throw new InvalidValueHeaderError();\n  }\n\n  public asBlockBase(): BlockBase {\n    throw new InvalidValueBlockBaseError();\n  }\n\n  public asBlock(): Block {\n    throw new InvalidValueBlockError();\n  }\n\n  public asTransaction(): Transaction {\n    throw new InvalidValueTransactionError();\n  }\n\n  public asWitness(): Witness {\n    throw new InvalidValueWitnessError();\n  }\n\n  public asAttribute(): Attribute {\n    throw new InvalidValueAttributeError();\n  }\n\n  public asAttributeStackItem(): AttributeStackItem {\n    throw new InvalidValueAttributeStackItemError();\n  }\n\n  public asInput(): Input {\n    throw new InvalidValueInputError();\n  }\n\n  public asOutput(): Output {\n    throw new InvalidValueOutputError();\n  }\n\n  public asAccount(): Account {\n    throw new InvalidValueAccountError();\n  }\n\n  public asAsset(): Asset {\n    throw new InvalidValueAssetError();\n  }\n\n  public asContract(): Contract {\n    throw new InvalidValueContractError();\n  }\n\n  public asValidator(): Validator {\n    throw new InvalidValueValidatorError();\n  }\n\n  public asMapStackItem(): MapStackItem {\n    throw new InvalidValueMapStackItemError();\n  }\n\n  public asEnumerator(): StackItemEnumerator {\n    throw new InvalidValueEnumeratorError();\n  }\n\n  public asIterator(): StackItemIterator {\n    throw new InvalidValueIteratorError();\n  }\n\n  public asStorageContextStackItem(_options: AsStorageContextStackItemOptions): StorageContextStackItem {\n    /* istanbul ignore next */\n    throw new InvalidValueStorageContextStackItemError();\n  }\n\n  public isArray(): boolean {\n    return false;\n  }\n\n  public isMap(): boolean {\n    return false;\n  }\n\n  public toContractParameter(): ContractParameter {\n    /* istanbul ignore next */\n    throw new Error('Not Implemented');\n  }\n\n  public get size(): number {\n    return this.asBuffer().length;\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.convertJSON());\n  }\n\n  // tslint:disable-next-line no-any\n  public convertJSON(seen = new Set<StackItemBase>()): any {\n    if (seen.has(this)) {\n      return '<circular>';\n    }\n    const nextSeen = new Set(seen);\n    nextSeen.add(this);\n\n    return this.convertJSONInternal(nextSeen);\n  }\n\n  protected incrementInternal(_seen: Set<StackItemBase>): number {\n    return 0;\n  }\n\n  protected decrementInternal(_seen: Set<StackItemBase>): number {\n    return 0;\n  }\n\n  protected incrementInternalArray(stackItems: readonly StackItem[], seen: Set<StackItemBase>): number {\n    return stackItems.reduce((acc, val) => acc + val.increment(seen), 0);\n  }\n\n  protected decrementInternalArray(stackItems: readonly StackItem[], seen: Set<StackItemBase>): number {\n    return stackItems.reduce((acc, val) => acc + val.decrement(seen), 0);\n  }\n\n  protected serializeInternal(_seen: Set<StackItemBase>): Buffer {\n    const writer = new BinaryWriter();\n    writer.writeUInt8(StackItemType.ByteArray);\n    writer.writeVarBytesLE(this.asBuffer());\n\n    return writer.toBuffer();\n  }\n\n  // tslint:disable-next-line no-any\n  protected convertJSONInternal(_seen: Set<StackItemBase>): any {\n    try {\n      return this.asBuffer().toString('hex');\n    } catch {\n      return 'UNKNOWN';\n    }\n  }\n}\n","import { BinaryWriter } from '../../../BinaryWriter';\nimport { createSerializeWire, SerializableWire, SerializeWire } from '../../Serializable';\nimport { AttributeModel } from './AttributeModel';\nimport { AttributeUsageModel } from './AttributeUsageModel';\n\nexport abstract class AttributeBaseModel<Usage extends AttributeUsageModel, Value extends Buffer>\n  implements SerializableWire<AttributeModel> {\n  public abstract readonly usage: Usage;\n  public abstract readonly value: Value;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.usage);\n  }\n}\n","import { common, InputJSON, InputModel, JSONHelper } from '@neo-one/client-common';\nimport { Equals, EquatableKey } from '../Equatable';\nimport {\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializeJSONContext,\n} from '../Serializable';\nimport { BinaryReader, utils } from '../utils';\n\nexport class Input extends InputModel implements EquatableKey, SerializableJSON<InputJSON> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): Input {\n    const hash = reader.readUInt256();\n    const index = reader.readUInt16LE();\n\n    return new this({ hash, index });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Input {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly equals: Equals = utils.equals(\n    Input,\n    this,\n    (other) => common.uInt256Equal(this.hash, other.hash) && other.index === this.index,\n  );\n  public readonly toKeyString = utils.toKeyString(Input, () => `${this.hashHex}:${this.index}`);\n\n  public serializeJSON(_context: SerializeJSONContext): InputJSON {\n    return {\n      txid: JSONHelper.writeUInt256(this.hash),\n      vout: this.index,\n    };\n  }\n}\n","import {\n  BinaryWriter,\n  BlockJSON,\n  common,\n  crypto,\n  ECPoint,\n  InvalidFormatError,\n  IOHelper,\n  TransactionJSON,\n  UInt160,\n  UInt256,\n} from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { Account, AccountKey } from './Account';\nimport { Asset, AssetKey } from './Asset';\nimport { BlockBase } from './BlockBase';\nimport { MerkleTree } from './crypto';\nimport { VerifyError } from './errors';\nimport { Header, HeaderKey } from './Header';\nimport { ScriptContainerType } from './ScriptContainer';\nimport {\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n} from './Serializable';\nimport {\n  deserializeTransactionWireBase,\n  FeeContext,\n  Input,\n  Output,\n  OutputKey,\n  RegisterTransaction,\n  Transaction,\n  TransactionType,\n} from './transaction';\nimport { BinaryReader, utils } from './utils';\nimport { Validator } from './Validator';\nimport { VerifyScript } from './vm';\nimport { Witness } from './Witness';\n\nexport interface BlockAdd {\n  readonly version?: number;\n  readonly previousHash: UInt256;\n  readonly merkleRoot?: UInt256;\n  readonly timestamp: number;\n  readonly index: number;\n  readonly consensusData: BN;\n  readonly nextConsensus: UInt160;\n  readonly script?: Witness;\n  readonly hash?: UInt256;\n  readonly transactions: readonly Transaction[];\n}\n\nexport interface BlockKey {\n  readonly hashOrIndex: UInt256 | number;\n}\n\nexport interface BlockVerifyOptions {\n  readonly genesisBlock: Block;\n  readonly tryGetBlock: (block: BlockKey) => Promise<Block | undefined>;\n  readonly tryGetHeader: (header: HeaderKey) => Promise<Header | undefined>;\n  readonly isSpent: (key: OutputKey) => Promise<boolean>;\n  readonly getAsset: (key: AssetKey) => Promise<Asset>;\n  readonly getOutput: (key: OutputKey) => Promise<Output>;\n  readonly tryGetAccount: (key: AccountKey) => Promise<Account | undefined>;\n  readonly getValidators: (transactions: readonly Transaction[]) => Promise<readonly ECPoint[]>;\n  readonly standbyValidators: readonly ECPoint[];\n  readonly getAllValidators: () => Promise<readonly Validator[]>;\n  readonly calculateClaimAmount: (inputs: readonly Input[]) => Promise<BN>;\n  readonly verifyScript: VerifyScript;\n  readonly currentHeight: number;\n  readonly governingToken: RegisterTransaction;\n  readonly utilityToken: RegisterTransaction;\n  readonly fees: { [K in TransactionType]?: BN };\n  readonly registerValidatorFee: BN;\n  readonly completely?: boolean;\n}\n\nexport class Block extends BlockBase implements SerializableWire<Block>, SerializableJSON<BlockJSON> {\n  public static async calculateNetworkFee(context: FeeContext, transactions: readonly Transaction[]): Promise<BN> {\n    const fees = await Promise.all(transactions.map(async (transaction) => transaction.getNetworkFee(context)));\n\n    return fees.reduce((acc, fee) => acc.add(fee), utils.ZERO);\n  }\n\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): Block {\n    const { reader } = options;\n    const blockBase = super.deserializeBlockBaseWireBase(options);\n    const transactions = reader.readArray(() => deserializeTransactionWireBase(options), 0x10000);\n\n    if (transactions.length === 0) {\n      throw new InvalidFormatError('Expected at least one transcaction in the block');\n    }\n\n    const merkleRoot = MerkleTree.computeRoot(transactions.map((transaction) => transaction.hash));\n\n    if (!common.uInt256Equal(merkleRoot, blockBase.merkleRoot)) {\n      throw new InvalidFormatError('Invalid merkle root');\n    }\n\n    return new this({\n      version: blockBase.version,\n      previousHash: blockBase.previousHash,\n      merkleRoot: blockBase.merkleRoot,\n      timestamp: blockBase.timestamp,\n      index: blockBase.index,\n      consensusData: blockBase.consensusData,\n      nextConsensus: blockBase.nextConsensus,\n      script: blockBase.script,\n      transactions,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Block {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly transactions: readonly Transaction[];\n  protected readonly sizeExclusive = utils.lazy(() =>\n    IOHelper.sizeOfArray(this.transactions, (transaction) => transaction.size),\n  );\n  private readonly headerInternal = utils.lazy(\n    () =>\n      new Header({\n        version: this.version,\n        previousHash: this.previousHash,\n        merkleRoot: this.merkleRoot,\n        timestamp: this.timestamp,\n        index: this.index,\n        consensusData: this.consensusData,\n        nextConsensus: this.nextConsensus,\n        script: this.script,\n      }),\n  );\n\n  public constructor({\n    version,\n    previousHash,\n    timestamp,\n    index,\n    consensusData,\n    nextConsensus,\n    script,\n    hash,\n    transactions,\n    merkleRoot = MerkleTree.computeRoot(transactions.map((transaction) => transaction.hash)),\n  }: BlockAdd) {\n    super({\n      version,\n      previousHash,\n      merkleRoot,\n      timestamp,\n      index,\n      consensusData,\n      nextConsensus,\n      script,\n      hash,\n    });\n\n    this.transactions = transactions;\n  }\n\n  public get header(): Header {\n    return this.headerInternal();\n  }\n\n  public clone({\n    transactions,\n    script,\n  }: {\n    readonly transactions: readonly Transaction[];\n    readonly script: Witness;\n  }): Block {\n    return new Block({\n      version: this.version,\n      previousHash: this.previousHash,\n      merkleRoot: this.merkleRoot,\n      timestamp: this.timestamp,\n      index: this.index,\n      consensusData: this.consensusData,\n      nextConsensus: this.nextConsensus,\n      transactions,\n      script,\n    });\n  }\n\n  public async getNetworkFee(context: FeeContext): Promise<BN> {\n    return Block.calculateNetworkFee(context, this.transactions);\n  }\n\n  public getSystemFee(context: FeeContext): BN {\n    return this.transactions.reduce((acc, transaction) => acc.add(transaction.getSystemFee(context)), utils.ZERO);\n  }\n\n  public async verify(options: BlockVerifyOptions): Promise<void> {\n    const { completely = false } = options;\n\n    if (\n      this.transactions.length === 0 ||\n      this.transactions[0].type !== TransactionType.Miner ||\n      this.transactions.slice(1).some((transaction) => transaction.type === TransactionType.Miner)\n    ) {\n      throw new VerifyError('Invalid miner transaction in block.');\n    }\n\n    await Promise.all([this.verifyBase(options), completely ? this.verifyComplete(options) : Promise.resolve()]);\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeArray(this.transactions, (transaction) => transaction.serializeWireBase(writer));\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<BlockJSON> {\n    const blockBaseJSON = super.serializeBlockBaseJSON(context);\n\n    return {\n      version: blockBaseJSON.version,\n      hash: blockBaseJSON.hash,\n      previousblockhash: blockBaseJSON.previousblockhash,\n      merkleroot: blockBaseJSON.merkleroot,\n      time: blockBaseJSON.time,\n      index: blockBaseJSON.index,\n      nonce: blockBaseJSON.nonce,\n      nextconsensus: blockBaseJSON.nextconsensus,\n      script: blockBaseJSON.script,\n      tx: await Promise.all(\n        this.transactions.map(\n          (transaction) => transaction.serializeJSON(context) as TransactionJSON | PromiseLike<TransactionJSON>,\n        ),\n      ),\n      size: blockBaseJSON.size,\n      confirmations: blockBaseJSON.confirmations,\n    };\n  }\n\n  private async verifyBase({\n    genesisBlock,\n    tryGetBlock,\n    tryGetHeader,\n    verifyScript,\n  }: BlockVerifyOptions): Promise<void> {\n    if (common.uInt256Equal(this.hash, genesisBlock.hash)) {\n      return;\n    }\n\n    const existingBlock = await tryGetBlock({ hashOrIndex: this.hash });\n    if (existingBlock !== undefined) {\n      return;\n    }\n\n    const previousHeader = await tryGetHeader({\n      hashOrIndex: this.previousHash,\n    });\n\n    if (previousHeader === undefined) {\n      throw new VerifyError('Previous header does not exist.');\n    }\n\n    if (previousHeader.index + 1 !== this.index) {\n      throw new VerifyError('Previous index + 1 does not match index.');\n    }\n\n    if (previousHeader.timestamp >= this.timestamp) {\n      throw new VerifyError('Previous timestamp is greater than block.');\n    }\n\n    const { failureMessage } = await verifyScript({\n      scriptContainer: { type: ScriptContainerType.Block, value: this },\n      hash: previousHeader.nextConsensus,\n      witness: this.script,\n    });\n\n    if (failureMessage !== undefined) {\n      throw new VerifyError(failureMessage);\n    }\n  }\n\n  private async verifyComplete(options: BlockVerifyOptions): Promise<void> {\n    await Promise.all([\n      this.verifyConsensus(options),\n      this.verifyTransactions(options),\n      this.verifyNetworkFee(options),\n    ]);\n  }\n\n  private async verifyConsensus({ getValidators }: BlockVerifyOptions): Promise<void> {\n    const validators = await getValidators(this.transactions);\n    if (!common.uInt160Equal(this.nextConsensus, crypto.getConsensusAddress(validators))) {\n      throw new VerifyError('Invalid next consensus address');\n    }\n  }\n\n  private async verifyTransactions(options: BlockVerifyOptions): Promise<void> {\n    const results = await Promise.all(\n      this.transactions.map(async (transaction) =>\n        transaction.verify({\n          isSpent: options.isSpent,\n          getAsset: options.getAsset,\n          getOutput: options.getOutput,\n          tryGetAccount: options.tryGetAccount,\n          calculateClaimAmount: options.calculateClaimAmount,\n          standbyValidators: options.standbyValidators,\n          getAllValidators: options.getAllValidators,\n          verifyScript: options.verifyScript,\n          currentHeight: options.currentHeight,\n          governingToken: options.governingToken,\n          utilityToken: options.utilityToken,\n          fees: options.fees,\n          registerValidatorFee: options.registerValidatorFee,\n        }),\n      ),\n    );\n    const failureResults = results.filter((verifyResults) =>\n      verifyResults.some(({ failureMessage }) => failureMessage !== undefined),\n    );\n    if (failureResults.length > 0) {\n      const failureResult = failureResults[0].find(({ failureMessage }) => failureMessage !== undefined);\n      if (failureResult !== undefined && failureResult.failureMessage !== undefined) {\n        throw new VerifyError(failureResult.failureMessage);\n      }\n    }\n  }\n\n  private async verifyNetworkFee(options: BlockVerifyOptions): Promise<void> {\n    const networkFee = await this.getNetworkFee({\n      getOutput: options.getOutput,\n      governingToken: options.governingToken,\n      utilityToken: options.utilityToken,\n      fees: options.fees,\n      registerValidatorFee: options.registerValidatorFee,\n    });\n\n    const minerTransaction = this.transactions.find((transaction) => transaction.type === TransactionType.Miner);\n\n    if (minerTransaction === undefined) {\n      throw new VerifyError('Missing miner transaction');\n    }\n\n    const minerTransactionNetworkFee = minerTransaction.outputs.reduce(\n      (acc, output) => acc.add(output.value),\n      utils.ZERO,\n    );\n\n    if (!networkFee.eq(minerTransactionNetworkFee)) {\n      throw new VerifyError('Miner output does not equal network fee.');\n    }\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  createSerializeWire,\n  IOHelper,\n  SerializableWire,\n  SerializeWire,\n  UInt256,\n  UInt256Hex,\n} from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { Equals, Equatable } from './Equatable';\nimport { DeserializeWireBaseOptions, DeserializeWireOptions } from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport interface BlockDataKey {\n  readonly hash: UInt256;\n}\n\nexport interface BlockDataAdd {\n  readonly hash: UInt256;\n  readonly lastGlobalTransactionIndex: BN;\n  readonly lastGlobalActionIndex: BN;\n  readonly systemFee: BN;\n}\n\nexport class BlockData implements Equatable, SerializableWire<BlockData> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): BlockData {\n    const hash = reader.readUInt256();\n    const lastGlobalTransactionIndex = reader.readInt64LE();\n    const lastGlobalActionIndex = reader.readInt64LE();\n    const systemFee = reader.readFixed8();\n\n    return new this({\n      hash,\n      systemFee,\n      lastGlobalTransactionIndex,\n      lastGlobalActionIndex,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): BlockData {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hash: UInt256;\n  public readonly hashHex: UInt256Hex;\n  public readonly lastGlobalTransactionIndex: BN;\n  public readonly lastGlobalActionIndex: BN;\n  public readonly systemFee: BN;\n  public readonly equals: Equals = utils.equals(BlockData, this, (other) => common.uInt256Equal(this.hash, other.hash));\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({ hash, lastGlobalTransactionIndex, lastGlobalActionIndex, systemFee }: BlockDataAdd) {\n    this.hash = hash;\n    this.hashHex = common.uInt256ToHex(hash);\n    this.lastGlobalTransactionIndex = lastGlobalTransactionIndex;\n    this.lastGlobalActionIndex = lastGlobalActionIndex;\n    this.systemFee = systemFee;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfUInt256 + IOHelper.sizeOfFixed8);\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt256(this.hash);\n    writer.writeInt64LE(this.lastGlobalTransactionIndex);\n    writer.writeInt64LE(this.lastGlobalActionIndex);\n    writer.writeFixed8(this.systemFee);\n  }\n}\n","import {\n  AccountJSON,\n  BinaryWriter,\n  common,\n  ECPoint,\n  IOHelper,\n  JSONHelper,\n  UInt160,\n  UInt160Hex,\n  UInt256Hex,\n} from '@neo-one/client-common';\nimport { BaseState } from '@neo-one/client-full-common';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport { Equals, EquatableKey } from './Equatable';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n  SerializeWire,\n} from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport interface AccountKey {\n  readonly hash: UInt160;\n}\nexport interface AccountAdd {\n  readonly version?: number;\n  readonly hash: UInt160;\n  readonly isFrozen?: boolean;\n  readonly votes?: readonly ECPoint[];\n  readonly balances?: { readonly [AssetHash in string]?: BN };\n}\n\nexport interface AccountUpdate {\n  readonly isFrozen?: boolean;\n  readonly votes?: readonly ECPoint[];\n  readonly balances?: AccountAdd['balances'];\n}\n\nexport class Account extends BaseState\n  implements SerializableWire<Account>, SerializableJSON<AccountJSON>, EquatableKey {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): Account {\n    const { reader } = options;\n    const version = reader.readUInt8();\n    const hash = reader.readUInt160();\n    const isFrozen = reader.readBoolean();\n    const votes = reader.readArray(() => reader.readECPoint());\n    const balances = reader.readObject(() => {\n      const key = common.uInt256ToHex(reader.readUInt256());\n      const value = reader.readFixed8();\n\n      return { key, value };\n    });\n\n    return new Account({\n      version,\n      hash,\n      isFrozen,\n      votes,\n      balances,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Account {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hash: UInt160;\n  public readonly hashHex: UInt160Hex;\n  public readonly isFrozen: boolean;\n  public readonly votes: readonly ECPoint[];\n  public readonly balances: { readonly [AssetHash in string]?: BN };\n  public readonly equals: Equals = utils.equals(Account, this, (other) => common.uInt160Equal(this.hash, other.hash));\n  public readonly toKeyString = utils.toKeyString(Account, () => this.hashHex);\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({ version, hash, isFrozen = false, votes = [], balances = {} }: AccountAdd) {\n    super({ version });\n    this.hash = hash;\n    this.hashHex = common.uInt160ToHex(hash);\n    this.isFrozen = isFrozen;\n    this.votes = votes;\n    this.balances = balances;\n    this.sizeInternal = utils.lazy(\n      () =>\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfUInt160 +\n        IOHelper.sizeOfBoolean +\n        IOHelper.sizeOfArray(this.votes, (vote) => IOHelper.sizeOfECPoint(vote)) +\n        IOHelper.sizeOfObject(this.balances, () => IOHelper.sizeOfUInt256 + IOHelper.sizeOfFixed8),\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public isDeletable(): boolean {\n    const balances = Object.values(this.balances);\n\n    return (\n      !this.isFrozen &&\n      this.votes.length === 0 &&\n      (balances.length === 0 || balances.every((value) => value !== undefined && value.lte(utils.ZERO)))\n    );\n  }\n\n  public getBalance(asset: UInt256Hex): BN {\n    const balance = this.balances[asset];\n\n    return balance === undefined ? utils.ZERO : balance;\n  }\n\n  public update({ isFrozen = this.isFrozen, votes = this.votes, balances = this.balances }: AccountUpdate): Account {\n    return new Account({\n      hash: this.hash,\n      isFrozen,\n      votes,\n      balances,\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.version);\n    writer.writeUInt160(this.hash);\n    writer.writeBoolean(this.isFrozen);\n    writer.writeArray(this.votes, (vote) => {\n      writer.writeECPoint(vote);\n    });\n    const balances = _.pickBy(this.balances, (value) => value !== undefined && value.gt(utils.ZERO)) as {\n      [assetHash: string]: BN;\n    };\n    writer.writeObject(balances, (key: string, value) => {\n      writer.writeUInt256(common.stringToUInt256(key));\n      writer.writeFixed8(value);\n    });\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<AccountJSON> {\n    const [unspent, unclaimed] = await Promise.all([context.getUnspent(this.hash), context.getUnclaimed(this.hash)]);\n\n    return {\n      version: this.version,\n      script_hash: JSONHelper.writeUInt160(this.hash),\n      frozen: this.isFrozen,\n      votes: this.votes.map((vote) => JSONHelper.writeECPoint(vote)),\n      balances: Object.entries(this.balances).map(([asset, value]) => ({\n        asset: JSONHelper.writeUInt256(asset),\n        // tslint:disable-next-line no-non-null-assertion\n        value: JSONHelper.writeFixed8(value!),\n      })),\n\n      unspent: unspent.map((input) => input.serializeJSON(context)),\n      unclaimed: unclaimed.map((input) => input.serializeJSON(context)),\n    };\n  }\n}\n","import { AccountInput, AccountInputAdd, AccountInputKey, AccountInputsKey } from './AccountInput';\n\nexport type AccountUnclaimedAdd = AccountInputAdd;\nexport type AccountUnclaimedKey = AccountInputKey;\nexport type AccountUnclaimedsKey = AccountInputsKey;\n\nexport class AccountUnclaimed extends AccountInput {}\n","import { AccountInput, AccountInputAdd, AccountInputKey, AccountInputsKey } from './AccountInput';\n\nexport type AccountUnspentAdd = AccountInputAdd;\nexport type AccountUnspentKey = AccountInputKey;\nexport type AccountUnspentsKey = AccountInputsKey;\n\nexport class AccountUnspent extends AccountInput {}\n","import { ActionBaseJSON, BinaryWriter, JSONHelper, UInt160 } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableWire,\n  SerializeJSONContext,\n  SerializeWire,\n} from '../Serializable';\nimport { BinaryReader } from '../utils';\nimport { ActionType } from './ActionType';\n\nexport interface ActionBaseAdd {\n  readonly version?: number;\n  readonly index: BN;\n  readonly scriptHash: UInt160;\n}\n\nexport interface ActionBaseAddWithType<Type extends ActionType> extends ActionBaseAdd {\n  readonly type: Type;\n}\n\n// tslint:disable-next-line no-any\nexport class ActionBase<T = any, Type extends ActionType = ActionType> implements SerializableWire<T> {\n  public static readonly VERSION = 0;\n\n  public static readonly deserializeActionBaseWireBase = ({ reader }: DeserializeWireBaseOptions) => {\n    const type = reader.readUInt8();\n    const version = reader.readUInt8();\n    const index = reader.readUInt64LE();\n    const scriptHash = reader.readUInt160();\n\n    return {\n      type,\n      version,\n      index,\n      scriptHash,\n    };\n  };\n\n  public static deserializeWireBase(_options: DeserializeWireBaseOptions): ActionBase {\n    throw new Error('Not Implemented');\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): ActionBase {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly type: Type;\n  public readonly version: number;\n  public readonly index: BN;\n  public readonly scriptHash: UInt160;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ type, version, index, scriptHash }: ActionBaseAddWithType<Type>) {\n    this.type = type;\n    this.version = version === undefined ? (this.constructor as typeof ActionBase).VERSION : version;\n    this.index = index;\n    this.scriptHash = scriptHash;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.type);\n    writer.writeUInt8(this.version);\n    writer.writeUInt64LE(this.index);\n    writer.writeUInt160(this.scriptHash);\n  }\n\n  public serializeActionBaseJSON(_context: SerializeJSONContext): ActionBaseJSON {\n    return {\n      version: this.version,\n      index: JSONHelper.writeUInt64(this.index),\n      scriptHash: JSONHelper.writeUInt160(this.scriptHash),\n    };\n  }\n}\n","import {\n  AssetJSON,\n  BinaryWriter,\n  common,\n  crypto,\n  ECPoint,\n  IOHelper,\n  JSONHelper,\n  UInt160,\n  UInt256,\n  UInt256Hex,\n} from '@neo-one/client-common';\nimport { BaseState } from '@neo-one/client-full-common';\nimport { makeErrorWithCode } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { assertAssetType, AssetType, toJSONAssetType } from './AssetType';\nimport { Equals, EquatableKey } from './Equatable';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n  SerializeWire,\n} from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport const InvalidAssetError = makeErrorWithCode('INVALID_ASSET', (message: string) => message);\n\nexport interface AssetKey {\n  readonly hash: UInt256;\n}\nexport interface AssetAdd {\n  readonly version?: number;\n  readonly hash: UInt256;\n  readonly type: AssetType;\n  readonly name: string;\n  readonly amount: BN;\n  readonly available?: BN;\n  readonly precision: number;\n  readonly feeMode?: number;\n  readonly fee?: BN;\n  readonly feeAddress?: UInt160;\n  readonly owner: ECPoint;\n  readonly admin: UInt160;\n  readonly issuer: UInt160;\n  readonly expiration: number;\n  readonly isFrozen?: boolean;\n}\n\nexport interface AssetUpdate {\n  readonly available?: BN;\n  readonly expiration?: number;\n  readonly isFrozen?: boolean;\n}\n\nconst NAME_MAX_LENGTH = 1024;\nconst PRECISION_MAX = 8;\n\nexport class Asset extends BaseState implements SerializableWire<Asset>, SerializableJSON<AssetJSON>, EquatableKey {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): Asset {\n    const version = reader.readUInt8();\n    const hash = reader.readUInt256();\n    const type = assertAssetType(reader.readUInt8());\n    const name = reader.readVarString();\n    const amount = reader.readFixed8();\n    const available = reader.readFixed8();\n    const precision = reader.readUInt8();\n    reader.readUInt8(); // FeeMode\n    const fee = reader.readFixed8();\n    const feeAddress = reader.readUInt160();\n    const owner = reader.readECPoint();\n    const admin = reader.readUInt160();\n    const issuer = reader.readUInt160();\n    const expiration = reader.readUInt32LE();\n    const isFrozen = reader.readBoolean();\n\n    return new Asset({\n      version,\n      hash,\n      type,\n      name,\n      amount,\n      available,\n      precision,\n      fee,\n      feeAddress,\n      owner,\n      admin,\n      issuer,\n      expiration,\n      isFrozen,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Asset {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hash: UInt256;\n  public readonly hashHex: UInt256Hex;\n  public readonly type: AssetType;\n  public readonly name: string;\n  public readonly amount: BN;\n  public readonly available: BN;\n  public readonly precision: number;\n  public readonly feeMode: number;\n  public readonly fee: BN;\n  public readonly feeAddress: UInt160;\n  public readonly owner: ECPoint;\n  public readonly admin: UInt160;\n  public readonly issuer: UInt160;\n  public readonly expiration: number;\n  public readonly isFrozen: boolean;\n  public readonly equals: Equals = utils.equals(Asset, this, (other) => common.uInt256Equal(this.hash, other.hash));\n  public readonly toKeyString = utils.toKeyString(Asset, () => this.hashHex);\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({\n    version,\n    hash,\n    type,\n    name,\n    amount,\n    available = utils.ZERO,\n    precision,\n    feeMode = 0,\n    fee = utils.ZERO,\n    feeAddress = common.ZERO_UINT160,\n    owner,\n    admin,\n    issuer,\n    expiration,\n    isFrozen = false,\n  }: AssetAdd) {\n    super({ version });\n    // tslint:disable-next-line\n    verifyAsset({ name, type, amount, precision });\n    this.hash = hash;\n    this.hashHex = common.uInt256ToHex(hash);\n    this.type = type;\n    this.name = name;\n    this.amount = amount;\n    this.available = available;\n    this.precision = precision;\n    this.feeMode = feeMode;\n    this.fee = fee;\n    this.feeAddress = feeAddress;\n    this.owner = owner;\n    this.admin = admin;\n    this.issuer = issuer;\n    this.expiration = expiration;\n    this.isFrozen = isFrozen;\n    this.sizeInternal = utils.lazy(\n      () =>\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfUInt256 +\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfVarString(this.name) +\n        IOHelper.sizeOfFixed8 +\n        IOHelper.sizeOfFixed8 +\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfFixed8 +\n        IOHelper.sizeOfUInt160 +\n        IOHelper.sizeOfECPoint(this.owner) +\n        IOHelper.sizeOfUInt160 +\n        IOHelper.sizeOfUInt160 +\n        IOHelper.sizeOfUInt32LE +\n        IOHelper.sizeOfBoolean,\n    );\n  }\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public update({\n    available = this.available,\n    expiration = this.expiration,\n    isFrozen = this.isFrozen,\n  }: AssetUpdate): Asset {\n    return new Asset({\n      hash: this.hash,\n      type: this.type,\n      name: this.name,\n      amount: this.amount,\n      precision: this.precision,\n      fee: this.fee,\n      feeAddress: this.feeAddress,\n      owner: this.owner,\n      admin: this.admin,\n      issuer: this.issuer,\n      available,\n      expiration,\n      isFrozen,\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.version);\n    writer.writeUInt256(this.hash);\n    writer.writeUInt8(this.type);\n    writer.writeVarString(this.name);\n    writer.writeFixed8(this.amount);\n    writer.writeFixed8(this.available);\n    writer.writeUInt8(this.precision);\n    writer.writeUInt8(this.feeMode);\n    writer.writeFixed8(this.fee);\n    writer.writeUInt160(this.feeAddress);\n    writer.writeECPoint(this.owner);\n    writer.writeUInt160(this.admin);\n    writer.writeUInt160(this.issuer);\n    writer.writeUInt32LE(this.expiration);\n    writer.writeBoolean(this.isFrozen);\n  }\n\n  public serializeJSON(context: SerializeJSONContext): AssetJSON {\n    let name = this.name;\n    try {\n      name = JSON.parse(name);\n    } catch {\n      // Ignore errors\n    }\n\n    return {\n      version: this.version,\n      id: JSONHelper.writeUInt256(this.hash),\n      type: toJSONAssetType(this.type),\n      name,\n      amount: JSONHelper.writeFixed8(this.amount),\n      available: JSONHelper.writeFixed8(this.available),\n      precision: this.precision,\n      owner: JSONHelper.writeECPoint(this.owner),\n      admin: crypto.scriptHashToAddress({\n        addressVersion: context.addressVersion,\n        scriptHash: this.admin,\n      }),\n\n      issuer: crypto.scriptHashToAddress({\n        addressVersion: context.addressVersion,\n        scriptHash: this.issuer,\n      }),\n\n      expiration: this.expiration,\n      frozen: this.isFrozen,\n    };\n  }\n}\n\nexport const verifyAsset = ({\n  name,\n  type,\n  amount,\n  precision,\n}: {\n  readonly name: AssetAdd['name'];\n  readonly type: AssetAdd['type'];\n  readonly amount: AssetAdd['amount'];\n  readonly precision: AssetAdd['precision'];\n}) => {\n  if (type === AssetType.CreditFlag || type === AssetType.DutyFlag) {\n    throw new InvalidAssetError(`Asset type cannot be CREDIT_FLAG or DUTY_FLAG, received: ${type}`);\n  }\n\n  const nameBuffer = Buffer.from(name, 'utf8');\n  if (nameBuffer.length > NAME_MAX_LENGTH) {\n    throw new InvalidAssetError(`Name too long. Max: ${NAME_MAX_LENGTH}, Received: ${nameBuffer.length}`);\n  }\n\n  if (amount.lte(utils.ZERO) && !amount.eq(common.NEGATIVE_SATOSHI_FIXED8)) {\n    throw new InvalidAssetError(`Amount must be greater than 0. (received ${amount})`);\n  }\n\n  if (type === AssetType.Invoice && !amount.eq(common.NEGATIVE_SATOSHI_FIXED8)) {\n    throw new InvalidAssetError('Invoice assets must have unlimited amount.');\n  }\n\n  if (precision > PRECISION_MAX) {\n    throw new InvalidAssetError(`Max precision is 8. Received: ${precision}`);\n  }\n\n  if (!amount.eq(utils.NEGATIVE_SATOSHI) && !amount.mod(utils.TEN.pow(utils.EIGHT.subn(precision))).eq(utils.ZERO)) {\n    throw new InvalidAssetError('Invalid precision for amount.');\n  }\n};\n","import { BinaryWriter, IOHelper, UInt256 } from '@neo-one/client-common';\nimport { BaseState } from '@neo-one/client-full-common';\nimport { BN } from 'bn.js';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableWire,\n  SerializeWire,\n} from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport interface TransactionDataAdd {\n  readonly version?: number;\n  readonly hash: UInt256;\n  readonly blockHash: UInt256;\n  readonly startHeight: number;\n  readonly index: number;\n  readonly globalIndex: BN;\n  readonly endHeights?: { readonly [index: number]: number };\n  readonly claimed?: { readonly [index: number]: boolean };\n}\n\nexport interface TransactionDataUpdate {\n  readonly endHeights?: { readonly [index: number]: number };\n  readonly claimed?: { readonly [index: number]: boolean };\n}\n\nexport interface TransactionDataKey {\n  readonly hash: UInt256;\n}\n\nexport class TransactionData extends BaseState implements SerializableWire<TransactionData> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): TransactionData {\n    const version = reader.readUInt8();\n    const hash = reader.readUInt256();\n    const blockHash = reader.readUInt256();\n    const startHeight = reader.readUInt32LE();\n    const index = reader.readUInt32LE();\n    const globalIndex = reader.readUInt64LE();\n    const endHeights = reader.readObject(() => {\n      const key = reader.readUInt32LE();\n      const value = reader.readUInt32LE();\n\n      return { key, value };\n    });\n    const claimed = reader.readObject(() => {\n      const key = reader.readUInt32LE();\n      const value = reader.readBoolean();\n\n      return { key, value };\n    });\n\n    return new this({\n      version,\n      hash,\n      blockHash,\n      startHeight,\n      index,\n      globalIndex,\n      endHeights,\n      claimed,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): TransactionData {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hash: UInt256;\n  public readonly blockHash: UInt256;\n  public readonly startHeight: number;\n  public readonly index: number;\n  public readonly globalIndex: BN;\n  public readonly endHeights: {\n    readonly [index: number]: number;\n  };\n  public readonly claimed: {\n    readonly [index: number]: boolean;\n  };\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({\n    version,\n    hash,\n    blockHash,\n    startHeight,\n    index,\n    globalIndex,\n    endHeights = {},\n    claimed = {},\n  }: TransactionDataAdd) {\n    super({ version });\n    this.hash = hash;\n    this.blockHash = blockHash;\n    this.startHeight = startHeight;\n    this.index = index;\n    this.globalIndex = globalIndex;\n    this.endHeights = endHeights;\n    this.claimed = claimed;\n    this.sizeInternal = utils.lazy(\n      () =>\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfUInt256 +\n        IOHelper.sizeOfUInt32LE +\n        IOHelper.sizeOfObject(this.endHeights, () => IOHelper.sizeOfUInt32LE + IOHelper.sizeOfUInt32LE) +\n        IOHelper.sizeOfObject(this.claimed, () => IOHelper.sizeOfUInt32LE + IOHelper.sizeOfBoolean),\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public update({ endHeights = this.endHeights, claimed = this.claimed }: TransactionDataUpdate): TransactionData {\n    return new TransactionData({\n      version: this.version,\n      hash: this.hash,\n      blockHash: this.blockHash,\n      startHeight: this.startHeight,\n      index: this.index,\n      globalIndex: this.globalIndex,\n      endHeights,\n      claimed,\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.version);\n    writer.writeUInt256(this.hash);\n    writer.writeUInt256(this.blockHash);\n    writer.writeUInt32LE(this.startHeight);\n    writer.writeUInt32LE(this.index);\n    writer.writeUInt64LE(this.globalIndex);\n    writer.writeObject(this.endHeights, (key, value) => {\n      writer.writeUInt32LE(key);\n      writer.writeUInt32LE(value);\n    });\n    writer.writeObject(this.claimed, (key, value) => {\n      writer.writeUInt32LE(key);\n      writer.writeBoolean(value);\n    });\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  IOHelper,\n  JSONHelper,\n  StorageItemJSON,\n  toJSONStorageFlags,\n  UInt160,\n} from '@neo-one/client-common';\nimport { Equals, Equatable } from './Equatable';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n  SerializeWire,\n} from './Serializable';\nimport { StorageFlags } from './StorageFlags';\nimport { BinaryReader, utils } from './utils';\n\nexport interface StorageItemAdd {\n  readonly hash: UInt160;\n  readonly key: Buffer;\n  readonly value: Buffer;\n  readonly flags: StorageFlags;\n}\n\nexport interface StorageItemUpdate {\n  readonly value: Buffer;\n  readonly flags: StorageFlags;\n}\n\nexport interface StorageItemsKey {\n  readonly hash?: UInt160;\n  readonly prefix?: Buffer;\n}\n\nexport interface StorageItemKey {\n  readonly hash: UInt160;\n  readonly key: Buffer;\n}\n\nexport class StorageItem implements SerializableWire<StorageItem>, Equatable, SerializableJSON<StorageItemJSON> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): StorageItem {\n    const hash = reader.readUInt160();\n    const key = reader.readVarBytesLE();\n    const value = reader.readVarBytesLE();\n    const flags = reader.readUInt8();\n\n    return new this({\n      hash,\n      key,\n      value,\n      flags,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): StorageItem {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hash: UInt160;\n  public readonly key: Buffer;\n  public readonly value: Buffer;\n  public readonly flags: StorageFlags;\n  public readonly equals: Equals = utils.equals(\n    StorageItem,\n    this,\n    (other) =>\n      common.uInt160Equal(this.hash, other.hash) &&\n      this.key.equals(other.key) &&\n      this.value.equals(other.value) &&\n      this.flags === other.flags,\n  );\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({ hash, key, value, flags }: StorageItemAdd) {\n    this.hash = hash;\n    this.key = key;\n    this.value = value;\n    this.flags = flags;\n    this.sizeInternal = utils.lazy(\n      () =>\n        IOHelper.sizeOfUInt160 +\n        IOHelper.sizeOfVarBytesLE(this.key) +\n        IOHelper.sizeOfVarBytesLE(this.value) +\n        IOHelper.sizeOfUInt8,\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public update({ value, flags }: StorageItemUpdate): StorageItem {\n    return new StorageItem({\n      hash: this.hash,\n      key: this.key,\n      value,\n      flags,\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt160(this.hash);\n    writer.writeVarBytesLE(this.key);\n    writer.writeVarBytesLE(this.value);\n    writer.writeUInt8(this.flags);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): StorageItemJSON {\n    return {\n      hash: JSONHelper.writeUInt160(this.hash),\n      key: JSONHelper.writeBuffer(this.key),\n      value: JSONHelper.writeBuffer(this.value),\n      flags: toJSONStorageFlags(this.flags),\n    };\n  }\n}\n","import { BinaryWriter, common, ECPoint, IOHelper, JSONHelper, ValidatorJSON } from '@neo-one/client-common';\nimport { BaseState } from '@neo-one/client-full-common';\nimport { BN } from 'bn.js';\nimport { Equals, EquatableKey } from './Equatable';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n  SerializeWire,\n} from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport interface ValidatorKey {\n  readonly publicKey: ECPoint;\n}\n\nexport interface ValidatorAdd {\n  readonly version?: number;\n  readonly publicKey: ECPoint;\n  readonly registered?: boolean;\n  readonly votes?: BN;\n}\n\nexport interface ValidatorUpdate {\n  readonly registered?: boolean;\n  readonly votes?: BN;\n}\n\nexport class Validator extends BaseState\n  implements SerializableWire<Validator>, EquatableKey, SerializableJSON<ValidatorJSON> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): Validator {\n    const version = reader.readUInt8();\n    const publicKey = reader.readECPoint();\n    const registered = reader.readBoolean();\n    const votes = reader.readFixed8();\n\n    return new this({ version, publicKey, registered, votes });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Validator {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly publicKey: ECPoint;\n  public readonly registered: boolean;\n  public readonly votes: BN;\n  public readonly equals: Equals = utils.equals(Validator, this, (other) =>\n    common.ecPointEqual(this.publicKey, other.publicKey),\n  );\n  public readonly toKeyString = utils.toKeyString(Validator, () => common.ecPointToString(this.publicKey));\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({ version, publicKey, registered = false, votes = utils.ZERO }: ValidatorAdd) {\n    super({ version });\n    this.publicKey = publicKey;\n    this.registered = registered;\n    this.votes = votes;\n    this.sizeInternal = utils.lazy(\n      () => IOHelper.sizeOfECPoint(this.publicKey) + IOHelper.sizeOfBoolean + IOHelper.sizeOfFixed8,\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public update({ votes = this.votes, registered = this.registered }: ValidatorUpdate): Validator {\n    return new Validator({\n      version: this.version,\n      publicKey: this.publicKey,\n      registered,\n      votes,\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.version);\n    writer.writeECPoint(this.publicKey);\n    writer.writeBoolean(this.registered);\n    writer.writeFixed8(this.votes);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): ValidatorJSON {\n    return {\n      version: this.version,\n      publicKey: JSONHelper.writeECPoint(this.publicKey),\n      registered: this.registered,\n      votes: JSONHelper.writeFixed8(this.votes),\n    };\n  }\n}\n","import { BinaryWriter, common, ECPoint, IOHelper, UInt160, UInt256 } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { deserializeInvocationResultWireBase, InvocationResult } from './invocationResult';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableWire,\n  SerializeWire,\n} from './Serializable';\nimport { deserializeStorageChangeWireBase, StorageChange } from './storageChange';\nimport { BinaryReader, utils } from './utils';\n\nexport interface InvocationDataAdd {\n  readonly hash: UInt256;\n  readonly assetHash?: UInt256;\n  readonly contractHashes: readonly UInt160[];\n  readonly deletedContractHashes: readonly UInt160[];\n  readonly migratedContractHashes: ReadonlyArray<readonly [UInt160, UInt160]>;\n  readonly voteUpdates: ReadonlyArray<readonly [UInt160, ReadonlyArray<ECPoint>]>;\n  readonly blockIndex: number;\n  readonly transactionIndex: number;\n  readonly actionIndexStart: BN;\n  readonly actionIndexStop: BN;\n  readonly result: InvocationResult;\n  readonly storageChanges: readonly StorageChange[];\n}\n\nexport interface InvocationDataKey {\n  readonly hash: UInt256;\n}\n\nexport class InvocationData implements SerializableWire<InvocationData> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): InvocationData {\n    const { reader } = options;\n    const hash = reader.readUInt256();\n    const assetHash = reader.readUInt256();\n    const contractHashes = reader.readArray(() => reader.readUInt160());\n    const deletedContractHashes = reader.readArray(() => reader.readUInt160());\n    const migratedContractHashes = reader.readArray<readonly [UInt160, UInt160]>(() => {\n      const from = reader.readUInt160();\n      const to = reader.readUInt160();\n\n      return [from, to] as const;\n    });\n    const voteUpdates = reader.readArray<readonly [UInt160, ReadonlyArray<ECPoint>]>(() => {\n      const address = reader.readUInt160();\n      const votes = reader.readArray<ECPoint>(() => reader.readECPoint());\n\n      return [address, votes] as const;\n    });\n    const blockIndex = reader.readUInt32LE();\n    const transactionIndex = reader.readUInt32LE();\n    const actionIndexStart = reader.readUInt64LE();\n    const actionIndexStop = reader.readUInt64LE();\n    const result = deserializeInvocationResultWireBase(options);\n    const storageChanges = reader.readArray(() => deserializeStorageChangeWireBase(options));\n\n    return new this({\n      hash,\n      assetHash: common.uInt256Equal(assetHash, common.ZERO_UINT256) ? undefined : assetHash,\n      contractHashes,\n      deletedContractHashes,\n      migratedContractHashes,\n      voteUpdates,\n      blockIndex,\n      transactionIndex,\n      actionIndexStart,\n      actionIndexStop,\n      result,\n      storageChanges,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): InvocationData {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hash: UInt256;\n  public readonly assetHash: UInt256 | undefined;\n  public readonly contractHashes: readonly UInt160[];\n  public readonly deletedContractHashes: readonly UInt160[];\n  public readonly migratedContractHashes: ReadonlyArray<readonly [UInt160, UInt160]>;\n  public readonly voteUpdates: ReadonlyArray<readonly [UInt160, ReadonlyArray<ECPoint>]>;\n  public readonly blockIndex: number;\n  public readonly transactionIndex: number;\n  public readonly actionIndexStart: BN;\n  public readonly actionIndexStop: BN;\n  public readonly result: InvocationResult;\n  public readonly storageChanges: readonly StorageChange[];\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({\n    hash,\n    assetHash,\n    contractHashes,\n    deletedContractHashes,\n    migratedContractHashes,\n    voteUpdates,\n    blockIndex,\n    transactionIndex,\n    actionIndexStart,\n    actionIndexStop,\n    result,\n    storageChanges,\n  }: InvocationDataAdd) {\n    this.hash = hash;\n    this.assetHash = assetHash;\n    this.contractHashes = contractHashes;\n    this.deletedContractHashes = deletedContractHashes;\n    this.migratedContractHashes = migratedContractHashes;\n    this.voteUpdates = voteUpdates;\n    this.blockIndex = blockIndex;\n    this.transactionIndex = transactionIndex;\n    this.actionIndexStart = actionIndexStart;\n    this.actionIndexStop = actionIndexStop;\n    this.result = result;\n    this.storageChanges = storageChanges;\n    this.sizeInternal = utils.lazy(\n      () =>\n        IOHelper.sizeOfUInt256 +\n        IOHelper.sizeOfUInt256 +\n        IOHelper.sizeOfArray(this.contractHashes, () => IOHelper.sizeOfUInt160) +\n        IOHelper.sizeOfArray(this.deletedContractHashes, () => IOHelper.sizeOfUInt160) +\n        IOHelper.sizeOfArray(this.migratedContractHashes, () => IOHelper.sizeOfUInt160) +\n        IOHelper.sizeOfArray(\n          this.voteUpdates,\n          (value) => IOHelper.sizeOfUInt160 + IOHelper.sizeOfArray(value[1], (val) => IOHelper.sizeOfECPoint(val)),\n        ) +\n        IOHelper.sizeOfUInt32LE +\n        IOHelper.sizeOfUInt32LE +\n        IOHelper.sizeOfUInt64LE +\n        IOHelper.sizeOfUInt64LE +\n        this.result.size,\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt256(this.hash);\n    writer.writeUInt256(this.assetHash === undefined ? common.ZERO_UINT256 : this.assetHash);\n    writer.writeArray(this.contractHashes, (contractHash) => {\n      writer.writeUInt160(contractHash);\n    });\n    writer.writeArray(this.deletedContractHashes, (contractHash) => {\n      writer.writeUInt160(contractHash);\n    });\n    writer.writeArray(this.migratedContractHashes, ([from, to]) => {\n      writer.writeUInt160(from);\n      writer.writeUInt160(to);\n    });\n    writer.writeArray(this.voteUpdates, ([address, votes]) => {\n      writer.writeUInt160(address);\n      writer.writeArray(votes, (vote) => {\n        writer.writeECPoint(vote);\n      });\n    });\n    writer.writeUInt32LE(this.blockIndex);\n    writer.writeUInt32LE(this.transactionIndex);\n    writer.writeUInt64LE(this.actionIndexStart);\n    writer.writeUInt64LE(this.actionIndexStop);\n    this.result.serializeWireBase(writer);\n    writer.writeArray(this.storageChanges, (storageChange) => {\n      storageChange.serializeWireBase(writer);\n    });\n  }\n}\n","import { assertVMState, BinaryWriter, IOHelper, utils, VMState } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { ContractParameter, deserializeContractParameterWireBase } from '../contractParameter';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableWire,\n  SerializeWire,\n} from '../Serializable';\nimport { BinaryReader } from '../utils';\nimport { InvocationResult } from './InvocationResult';\n\nexport interface InvocationResultBaseAdd<T extends VMState> {\n  readonly state: T;\n  readonly gasConsumed: BN;\n  readonly gasCost: BN;\n  readonly stack: readonly ContractParameter[];\n}\n\nexport abstract class InvocationResultBase<T extends VMState = VMState> implements SerializableWire<InvocationResult> {\n  public static deserializeInvocationResultWireBase(\n    options: DeserializeWireBaseOptions,\n  ): {\n    readonly state: VMState;\n    readonly gasConsumed: BN;\n    readonly gasCost: BN;\n    readonly stack: readonly ContractParameter[];\n  } {\n    const { reader } = options;\n    const state = reader.readUInt8();\n    const gasConsumed = reader.readFixed8();\n    const gasCost = reader.readFixed8();\n    const stack = reader.readArray(() => deserializeContractParameterWireBase(options));\n\n    return {\n      state: assertVMState(state),\n      gasConsumed,\n      gasCost,\n      stack,\n    };\n  }\n\n  public static deserializeWireBase(_options: DeserializeWireBaseOptions): InvocationResultBase {\n    throw new Error('Not Implemented');\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): InvocationResultBase {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly state: T;\n  public readonly gasConsumed: BN;\n  public readonly gasCost: BN;\n  public readonly stack: readonly ContractParameter[];\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  protected readonly sizeExclusive: () => number;\n  private readonly sizeInternal: () => number;\n\n  public constructor({ state, gasConsumed, gasCost, stack }: InvocationResultBaseAdd<T>) {\n    this.state = state;\n    this.gasConsumed = gasConsumed;\n    this.gasCost = gasCost;\n    this.stack = stack;\n    this.sizeExclusive = () => 0;\n    this.sizeInternal = utils.lazy(\n      () =>\n        this.sizeExclusive() +\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfFixed8 +\n        IOHelper.sizeOfFixed8 +\n        IOHelper.sizeOfArray(this.stack, (value) => value.size),\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.state);\n    writer.writeFixed8(this.gasConsumed);\n    writer.writeFixed8(this.gasCost);\n    writer.writeArray(this.stack, (contractParameter) => contractParameter.serializeWireBase(writer));\n  }\n}\n","import { BinaryWriter, UInt160 } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions } from '../Serializable';\nimport { StorageChangeBase, StorageChangeBaseAdd } from './StorageChangeBase';\nimport { StorageChangeType } from './StorageChangeType';\n\nexport interface StorageChangeAddModifyBaseAdd<T extends StorageChangeType> extends StorageChangeBaseAdd<T> {\n  readonly value: Buffer;\n}\n\nexport abstract class StorageChangeAddModifyBase<\n  T extends StorageChangeType = StorageChangeType\n> extends StorageChangeBase<T> {\n  public static deserializeStorageChangeAddModifyWireBase(\n    options: DeserializeWireBaseOptions,\n  ): {\n    readonly type: StorageChangeType;\n    readonly hash: UInt160;\n    readonly key: Buffer;\n    readonly value: Buffer;\n  } {\n    const { type, hash, key } = super.deserializeStorageChangeWireBase(options);\n    const { reader } = options;\n    const value = reader.readVarBytesLE();\n\n    return { type, hash, key, value };\n  }\n\n  public readonly value: Buffer;\n\n  public constructor({ type, hash, key, value }: StorageChangeAddModifyBaseAdd<T>) {\n    super({ type, hash, key });\n    this.value = value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarBytesLE(this.value);\n  }\n}\n","import { BinaryWriter, IOHelper, UInt160, utils } from '@neo-one/client-common';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableWire,\n  SerializeWire,\n} from '../Serializable';\nimport { BinaryReader } from '../utils';\nimport { StorageChange } from './StorageChange';\nimport { assertStorageChangeType, StorageChangeType } from './StorageChangeType';\n\nexport interface StorageChangeBaseAdd<T extends StorageChangeType> {\n  readonly type: T;\n  readonly hash: UInt160;\n  readonly key: Buffer;\n}\n\nexport abstract class StorageChangeBase<T extends StorageChangeType = StorageChangeType>\n  implements SerializableWire<StorageChange> {\n  public static deserializeStorageChangeWireBase(\n    options: DeserializeWireBaseOptions,\n  ): {\n    readonly type: StorageChangeType;\n    readonly hash: UInt160;\n    readonly key: Buffer;\n  } {\n    const { reader } = options;\n    const type = reader.readUInt8();\n    const hash = reader.readUInt160();\n    const key = reader.readVarBytesLE();\n\n    return {\n      type: assertStorageChangeType(type),\n      hash,\n      key,\n    };\n  }\n\n  public static deserializeWireBase(_options: DeserializeWireBaseOptions): StorageChangeBase {\n    throw new Error('Not Implemented');\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): StorageChangeBase {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly type: T;\n  public readonly hash: UInt160;\n  public readonly key: Buffer;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  protected readonly sizeExclusive: () => number;\n  private readonly sizeInternal: () => number;\n\n  public constructor({ type, hash, key }: StorageChangeBaseAdd<T>) {\n    this.type = type;\n    this.hash = hash;\n    this.key = key;\n    this.sizeExclusive = () => 0;\n    this.sizeInternal = utils.lazy(\n      () => this.sizeExclusive() + IOHelper.sizeOfUInt8 + IOHelper.sizeOfUInt160 + IOHelper.sizeOfVarBytesLE(this.key),\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.type);\n    writer.writeUInt160(this.hash);\n    writer.writeVarBytesLE(this.key);\n  }\n}\n","import {\n  BinaryWriter,\n  createSerializeWire,\n  IOHelper,\n  SerializableWire,\n  SerializeWire,\n  utils,\n} from '@neo-one/client-common';\nimport { BaseState } from '@neo-one/client-full-common';\nimport { BN } from 'bn.js';\nimport { DeserializeWireBaseOptions, DeserializeWireOptions } from './Serializable';\nimport { BinaryReader } from './utils';\n\ntype Votes = ReadonlyArray<BN | undefined>;\nexport interface ValidatorsCountUpdate {\n  readonly votes?: Votes;\n}\n\nexport interface ValidatorsCountAdd {\n  readonly version?: number;\n  readonly votes?: Votes;\n}\n\nexport class ValidatorsCount extends BaseState implements SerializableWire<ValidatorsCount> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): ValidatorsCount {\n    const { reader } = options;\n    const version = reader.readUInt8();\n    const votes = reader.readArray(() => reader.readFixed8());\n\n    return new this({ version, votes });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): ValidatorsCount {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  public readonly votes: Votes;\n  private readonly sizeInternal: () => number;\n\n  public constructor({ version, votes = [] }: ValidatorsCountAdd = {}) {\n    super({ version });\n    this.votes = votes;\n    this.sizeInternal = utils.lazy(\n      () => IOHelper.sizeOfUInt8 + IOHelper.sizeOfArray(this.votes, () => IOHelper.sizeOfFixed8),\n    );\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public update({ votes = this.votes }: ValidatorsCountUpdate): ValidatorsCount {\n    return new ValidatorsCount({\n      version: this.version,\n      votes,\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.version);\n    writer.writeArray(this.votes, (value) => {\n      writer.writeFixed8(value === undefined ? utils.ZERO : value);\n    });\n  }\n}\n","// tslint:disable no-object-mutation no-array-mutation no-loop-statement\nimport { common, ECPoint, UInt160, UInt256Hex } from '@neo-one/client-common';\nimport {\n  Account,\n  BinaryReader,\n  Output,\n  StateDescriptor,\n  StateTransaction,\n  Transaction,\n  TransactionType,\n  utils,\n  Validator,\n  ValidatorKey,\n  ValidatorsCount,\n  ValidatorsCountUpdate,\n  ValidatorUpdate,\n} from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport { Blockchain } from './Blockchain';\nimport { ValidatorCache } from './ValidatorCache';\n\nconst processOutput = async (\n  blockchain: Blockchain,\n  cache: ValidatorCache,\n  output: Output,\n  negative: boolean,\n): Promise<void> => {\n  let { value } = output;\n  if (negative) {\n    value = value.neg();\n  }\n  const [account] = await Promise.all([\n    cache.getAccount(output.address),\n    cache.updateAccountBalance(output.address, output.asset, value),\n  ]);\n\n  if (common.uInt256Equal(output.asset, blockchain.settings.governingToken.hash) && account.votes.length > 0) {\n    await Promise.all([\n      Promise.all(account.votes.map(async (publicKey) => cache.updateValidatorVotes(publicKey, value))),\n\n      cache.updateValidatorsCountVotes(account.votes.length - 1, value),\n    ]);\n  }\n};\n\nconst processTransaction = async (\n  blockchain: Blockchain,\n  cache: ValidatorCache,\n  transaction: Transaction,\n): Promise<void> => {\n  let allOutputs = await Promise.all(\n    transaction.inputs.map(async (input) => {\n      const output = await blockchain.output.get(input);\n\n      return { output, negative: true };\n    }),\n  );\n\n  allOutputs = allOutputs.concat(transaction.outputs.map((output) => ({ output, negative: false })));\n\n  await Promise.all(allOutputs.map(async ({ output, negative }) => processOutput(blockchain, cache, output, negative)));\n\n  const accountHashes = [...new Set(allOutputs.map(({ output }) => common.uInt160ToHex(output.address)))].map((hash) =>\n    common.hexToUInt160(hash),\n  );\n  const touchedValidators = await Promise.all(\n    accountHashes.map(async (hash) => {\n      const account = await cache.getAccount(hash);\n\n      return account.votes;\n    }),\n  );\n\n  const touchedValidatorsSet = [\n    ...new Set(\n      touchedValidators.reduce<readonly string[]>(\n        (acc, votes) => acc.concat(votes.map((vote) => common.ecPointToHex(vote))),\n        [],\n      ),\n    ),\n  ].map((publicKey) => common.hexToECPoint(publicKey));\n  await Promise.all(\n    touchedValidatorsSet.map(async (publicKey) => {\n      const validator = await cache.getValidator(publicKey);\n      if (!validator.registered && validator.votes.eq(utils.ZERO)) {\n        await cache.deleteValidator(publicKey);\n      }\n    }),\n  );\n};\n\n// tslint:disable readonly-keyword readonly-array\nexport interface AccountChanges {\n  [hash: string]: readonly ECPoint[];\n}\nexport interface ValidatorVotesChanges {\n  [hash: string]: BN;\n}\nexport interface ValidatorRegisteredChanges {\n  [hash: string]: boolean;\n}\ninterface ValidatorChange {\n  readonly registered?: boolean;\n  readonly votes?: BN;\n}\nexport interface ValidatorChanges {\n  [hash: string]: ValidatorChange;\n}\nexport type ValidatorsCountChanges = BN[];\n// tslint:enable readonly-keyword readonly-array\n\nexport const getDescriptorChanges = async ({\n  transactions,\n  getAccount,\n  governingTokenHash,\n}: {\n  readonly transactions: readonly StateTransaction[];\n  readonly getAccount: (hash: UInt160) => Promise<Account>;\n  readonly governingTokenHash: UInt256Hex;\n}): Promise<{\n  readonly accountChanges: AccountChanges;\n  readonly validatorChanges: ValidatorChanges;\n  readonly validatorsCountChanges: ValidatorsCountChanges;\n}> => {\n  const accountChanges: AccountChanges = {};\n  const validatorVotesChanges: ValidatorVotesChanges = {};\n  const validatorRegisteredChanges: ValidatorRegisteredChanges = {};\n  const validatorsCountChanges: ValidatorsCountChanges = [];\n  const allDescriptors = transactions.reduce<readonly StateDescriptor[]>(\n    (acc, transaction) => acc.concat(transaction.descriptors),\n    [],\n  );\n\n  const accountDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x40);\n\n  const groupedAccountDescriptors = Object.entries(\n    _.groupBy(accountDescriptors, (descriptor) => common.uInt160ToHex(common.bufferToUInt160(descriptor.key))),\n  );\n\n  await Promise.all(\n    groupedAccountDescriptors.map(async ([hash, descriptors]) => {\n      const account = await getAccount(common.hexToUInt160(hash));\n      const balance = account.getBalance(governingTokenHash);\n\n      // tslint:disable-next-line no-loop-statement\n      for (const vote of account.votes) {\n        const voteHex = common.ecPointToHex(vote);\n        validatorVotesChanges[voteHex] = ((validatorVotesChanges[voteHex] as BN | undefined) === undefined\n          ? utils.ZERO\n          : validatorVotesChanges[voteHex]\n        ).sub(balance);\n      }\n\n      const descriptor = descriptors[descriptors.length - 1];\n      const reader = new BinaryReader(descriptor.value);\n      const votes = reader.readArray(() => reader.readECPoint());\n      if (votes.length !== account.votes.length) {\n        if (account.votes.length > 0) {\n          validatorsCountChanges[account.votes.length - 1] = ((validatorsCountChanges[account.votes.length - 1] as\n            | BN\n            | undefined) === undefined\n            ? utils.ZERO\n            : validatorsCountChanges[account.votes.length - 1]\n          ).sub(balance);\n        }\n\n        if (votes.length > 0) {\n          validatorsCountChanges[votes.length - 1] = ((validatorsCountChanges[votes.length - 1] as BN | undefined) ===\n          undefined\n            ? utils.ZERO\n            : validatorsCountChanges[votes.length - 1]\n          ).add(balance);\n        }\n      }\n\n      accountChanges[hash] = votes;\n      for (const vote of votes) {\n        const voteHex = common.ecPointToHex(vote);\n        validatorVotesChanges[voteHex] = ((validatorVotesChanges[voteHex] as BN | undefined) === undefined\n          ? utils.ZERO\n          : validatorVotesChanges[voteHex]\n        ).add(balance);\n      }\n    }),\n  );\n\n  const validatorDescriptors = allDescriptors.filter((descriptor) => descriptor.type === 0x48);\n\n  for (const descriptor of validatorDescriptors) {\n    const publicKey = common.bufferToECPoint(descriptor.key);\n    validatorRegisteredChanges[common.ecPointToHex(publicKey)] = descriptor.value.some((byte) => byte !== 0);\n  }\n\n  const validatorChanges: ValidatorChanges = {};\n  for (const [publicKey, votes] of Object.entries(validatorVotesChanges)) {\n    validatorChanges[publicKey] = { votes };\n  }\n\n  for (const [publicKey, registered] of Object.entries(validatorRegisteredChanges)) {\n    const current =\n      (validatorChanges[publicKey] as ValidatorChange | undefined) === undefined ? {} : validatorChanges[publicKey];\n    validatorChanges[publicKey] = {\n      registered,\n      votes: current.votes,\n    };\n  }\n\n  return {\n    accountChanges,\n    validatorChanges,\n    validatorsCountChanges,\n  };\n};\n\nexport const processStateTransaction = async ({\n  validatorChanges,\n  validatorsCountChanges,\n  tryGetValidatorsCount,\n  addValidatorsCount,\n  updateValidatorsCount,\n  tryGetValidator,\n  addValidator,\n  deleteValidator,\n  updateValidator,\n}: {\n  readonly validatorChanges: ValidatorChanges;\n  readonly validatorsCountChanges: ValidatorsCountChanges;\n  readonly tryGetValidatorsCount: () => Promise<ValidatorsCount | undefined>;\n  readonly addValidatorsCount: (validatorsCount: ValidatorsCount) => Promise<void>;\n  readonly updateValidatorsCount: (validatorsCount: ValidatorsCount, update: ValidatorsCountUpdate) => Promise<void>;\n\n  readonly tryGetValidator: (key: ValidatorKey) => Promise<Validator | undefined>;\n  readonly addValidator: (validator: Validator) => Promise<void>;\n  readonly deleteValidator: (key: ValidatorKey) => Promise<void>;\n  readonly updateValidator: (validator: Validator, update: ValidatorUpdate) => Promise<Validator>;\n}): Promise<void> => {\n  const validatorsCount = await tryGetValidatorsCount();\n  const mutableValidatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n  [...validatorsCountChanges.entries()].forEach(([index, value]) => {\n    mutableValidatorsCountVotes[index] = value;\n  });\n\n  await Promise.all([\n    Promise.all(\n      Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n        const publicKey = common.hexToECPoint(publicKeyHex);\n        const validator = await tryGetValidator({ publicKey });\n        if (validator === undefined) {\n          await addValidator(\n            new Validator({\n              publicKey,\n              registered,\n              votes,\n            }),\n          );\n        } else if (\n          ((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n          ((votes !== undefined && votes.eq(utils.ZERO)) || (votes === undefined && validator.votes.eq(utils.ZERO)))\n        ) {\n          await deleteValidator({ publicKey: validator.publicKey });\n        } else {\n          await updateValidator(validator, { votes, registered });\n        }\n      }),\n    ),\n    validatorsCount === undefined\n      ? addValidatorsCount(\n          new ValidatorsCount({\n            votes: mutableValidatorsCountVotes,\n          }),\n        )\n      : updateValidatorsCount(validatorsCount, {\n          votes: mutableValidatorsCountVotes,\n        }),\n  ]);\n};\n\nexport const getValidators = async (\n  blockchain: Blockchain,\n  transactions: readonly Transaction[],\n): Promise<readonly ECPoint[]> => {\n  const cache = new ValidatorCache(blockchain);\n  await Promise.all(transactions.map(async (transaction) => processTransaction(blockchain, cache, transaction)));\n\n  const { validatorChanges, validatorsCountChanges } = await getDescriptorChanges({\n    transactions: transactions.filter(\n      (transaction): transaction is StateTransaction =>\n        transaction.type === TransactionType.State && transaction instanceof StateTransaction,\n    ),\n\n    getAccount: async (hash) => cache.getAccount(hash),\n    governingTokenHash: blockchain.settings.governingToken.hashHex,\n  });\n\n  await processStateTransaction({\n    validatorChanges,\n    validatorsCountChanges,\n    tryGetValidatorsCount: async () => cache.getValidatorsCount(),\n    addValidatorsCount: async (value) => cache.addValidatorsCount(value),\n    updateValidatorsCount: async (update) => {\n      await cache.updateValidatorsCount(update);\n    },\n    tryGetValidator: async (key) => cache.getValidator(key.publicKey),\n    addValidator: async (validator) => cache.addValidator(validator),\n    deleteValidator: async (key) => cache.deleteValidator(key.publicKey),\n    updateValidator: async (value, update) => cache.updateValidator(value.publicKey, update),\n  });\n\n  const [validatorsCount, validators] = await Promise.all([cache.getValidatorsCount(), cache.getAllValidators()]);\n\n  const numValidators = Math.max(\n    utils.weightedAverage(\n      utils\n        .weightedFilter(\n          validatorsCount.votes\n            .map((votes, count) => ({ count, votes: votes === undefined ? utils.ZERO : votes }))\n            .filter(({ votes }) => votes.gt(utils.ZERO)),\n          0.25,\n          0.75,\n          ({ count }) => new BN(count),\n        )\n        .map(([{ count }, weight]) => ({ value: count, weight })),\n    ),\n\n    blockchain.settings.standbyValidators.length,\n  );\n\n  const standbyValidatorsSet = new Set(\n    blockchain.settings.standbyValidators.map((publicKey) => common.ecPointToHex(publicKey)),\n  );\n\n  const validatorsPublicKeySet = new Set(\n    _.take(\n      validators\n        .filter(\n          (validator) =>\n            (validator.registered && validator.votes.gt(utils.ZERO)) ||\n            standbyValidatorsSet.has(common.ecPointToHex(validator.publicKey)),\n        )\n        .sort((aValidator, bValidator) =>\n          aValidator.votes.eq(bValidator.votes)\n            ? common.ecPointCompare(aValidator.publicKey, bValidator.publicKey)\n            : -aValidator.votes.cmp(bValidator.votes),\n        )\n        .map((validator) => common.ecPointToHex(validator.publicKey)),\n      numValidators,\n    ),\n  );\n\n  const standbyValidatorsArray = [...standbyValidatorsSet];\n  for (let i = 0; i < standbyValidatorsArray.length && validatorsPublicKeySet.size < numValidators; i += 1) {\n    validatorsPublicKeySet.add(standbyValidatorsArray[i]);\n  }\n\n  const validatorsPublicKeys = [...validatorsPublicKeySet].map((hex) => common.hexToECPoint(hex));\n\n  return validatorsPublicKeys.sort((aKey, bKey) => common.ecPointCompare(aKey, bKey));\n};\n","import { createHash } from 'crypto';\nimport _ from 'lodash';\nimport { InvalidSysCallError, InvalidVMByteCodeError, InvalidVMStateError } from '../errors';\n\nexport enum Op {\n  PUSH0 = 0x0,\n  PUSHBYTES1 = 0x1,\n  PUSHBYTES2 = 0x2,\n  PUSHBYTES3 = 0x3,\n  PUSHBYTES4 = 0x4,\n  PUSHBYTES5 = 0x5,\n  PUSHBYTES6 = 0x6,\n  PUSHBYTES7 = 0x7,\n  PUSHBYTES8 = 0x8,\n  PUSHBYTES9 = 0x9,\n  PUSHBYTES10 = 0xa,\n  PUSHBYTES11 = 0xb,\n  PUSHBYTES12 = 0xc,\n  PUSHBYTES13 = 0xd,\n  PUSHBYTES14 = 0xe,\n  PUSHBYTES15 = 0xf,\n  PUSHBYTES16 = 0x10,\n  PUSHBYTES17 = 0x11,\n  PUSHBYTES18 = 0x12,\n  PUSHBYTES19 = 0x13,\n  PUSHBYTES20 = 0x14,\n  PUSHBYTES21 = 0x15,\n  PUSHBYTES22 = 0x16,\n  PUSHBYTES23 = 0x17,\n  PUSHBYTES24 = 0x18,\n  PUSHBYTES25 = 0x19,\n  PUSHBYTES26 = 0x1a,\n  PUSHBYTES27 = 0x1b,\n  PUSHBYTES28 = 0x1c,\n  PUSHBYTES29 = 0x1d,\n  PUSHBYTES30 = 0x1e,\n  PUSHBYTES31 = 0x1f,\n  PUSHBYTES32 = 0x20,\n  PUSHBYTES33 = 0x21,\n  PUSHBYTES34 = 0x22,\n  PUSHBYTES35 = 0x23,\n  PUSHBYTES36 = 0x24,\n  PUSHBYTES37 = 0x25,\n  PUSHBYTES38 = 0x26,\n  PUSHBYTES39 = 0x27,\n  PUSHBYTES40 = 0x28,\n  PUSHBYTES41 = 0x29,\n  PUSHBYTES42 = 0x2a,\n  PUSHBYTES43 = 0x2b,\n  PUSHBYTES44 = 0x2c,\n  PUSHBYTES45 = 0x2d,\n  PUSHBYTES46 = 0x2e,\n  PUSHBYTES47 = 0x2f,\n  PUSHBYTES48 = 0x30,\n  PUSHBYTES49 = 0x31,\n  PUSHBYTES50 = 0x32,\n  PUSHBYTES51 = 0x33,\n  PUSHBYTES52 = 0x34,\n  PUSHBYTES53 = 0x35,\n  PUSHBYTES54 = 0x36,\n  PUSHBYTES55 = 0x37,\n  PUSHBYTES56 = 0x38,\n  PUSHBYTES57 = 0x39,\n  PUSHBYTES58 = 0x3a,\n  PUSHBYTES59 = 0x3b,\n  PUSHBYTES60 = 0x3c,\n  PUSHBYTES61 = 0x3d,\n  PUSHBYTES62 = 0x3e,\n  PUSHBYTES63 = 0x3f,\n  PUSHBYTES64 = 0x40,\n  PUSHBYTES65 = 0x41,\n  PUSHBYTES66 = 0x42,\n  PUSHBYTES67 = 0x43,\n  PUSHBYTES68 = 0x44,\n  PUSHBYTES69 = 0x45,\n  PUSHBYTES70 = 0x46,\n  PUSHBYTES71 = 0x47,\n  PUSHBYTES72 = 0x48,\n  PUSHBYTES73 = 0x49,\n  PUSHBYTES74 = 0x4a,\n  PUSHBYTES75 = 0x4b,\n  PUSHDATA1 = 0x4c,\n  PUSHDATA2 = 0x4d,\n  PUSHDATA4 = 0x4e,\n  PUSHM1 = 0x4f,\n  PUSH1 = 0x51,\n  PUSH2 = 0x52,\n  PUSH3 = 0x53,\n  PUSH4 = 0x54,\n  PUSH5 = 0x55,\n  PUSH6 = 0x56,\n  PUSH7 = 0x57,\n  PUSH8 = 0x58,\n  PUSH9 = 0x59,\n  PUSH10 = 0x5a,\n  PUSH11 = 0x5b,\n  PUSH12 = 0x5c,\n  PUSH13 = 0x5d,\n  PUSH14 = 0x5e,\n  PUSH15 = 0x5f,\n  PUSH16 = 0x60,\n  NOP = 0x61,\n  JMP = 0x62,\n  JMPIF = 0x63,\n  JMPIFNOT = 0x64,\n  CALL = 0x65,\n  RET = 0x66,\n  APPCALL = 0x67,\n  SYSCALL = 0x68,\n  TAILCALL = 0x69,\n  DUPFROMALTSTACK = 0x6a,\n  TOALTSTACK = 0x6b,\n  FROMALTSTACK = 0x6c,\n  XDROP = 0x6d,\n  XSWAP = 0x72,\n  XTUCK = 0x73,\n  DEPTH = 0x74,\n  DROP = 0x75,\n  DUP = 0x76,\n  NIP = 0x77,\n  OVER = 0x78,\n  PICK = 0x79,\n  ROLL = 0x7a,\n  ROT = 0x7b,\n  SWAP = 0x7c,\n  TUCK = 0x7d,\n  CAT = 0x7e,\n  SUBSTR = 0x7f,\n  LEFT = 0x80,\n  RIGHT = 0x81,\n  SIZE = 0x82,\n  INVERT = 0x83,\n  AND = 0x84,\n  OR = 0x85,\n  XOR = 0x86,\n  EQUAL = 0x87,\n  OP_EQUALVERIFY = 0x88,\n  OP_RESERVED1 = 0x89,\n  OP_RESERVED2 = 0x8a,\n  INC = 0x8b,\n  DEC = 0x8c,\n  SIGN = 0x8d,\n  NEGATE = 0x8f,\n  ABS = 0x90,\n  NOT = 0x91,\n  NZ = 0x92,\n  ADD = 0x93,\n  SUB = 0x94,\n  MUL = 0x95,\n  DIV = 0x96,\n  MOD = 0x97,\n  SHL = 0x98,\n  SHR = 0x99,\n  BOOLAND = 0x9a,\n  BOOLOR = 0x9b,\n  NUMEQUAL = 0x9c,\n  NUMNOTEQUAL = 0x9e,\n  LT = 0x9f,\n  GT = 0xa0,\n  LTE = 0xa1,\n  GTE = 0xa2,\n  MIN = 0xa3,\n  MAX = 0xa4,\n  WITHIN = 0xa5,\n  SHA1 = 0xa7,\n  SHA256 = 0xa8,\n  HASH160 = 0xa9,\n  HASH256 = 0xaa,\n  CHECKSIG = 0xac,\n  VERIFY = 0xad,\n  CHECKMULTISIG = 0xae,\n  ARRAYSIZE = 0xc0,\n  PACK = 0xc1,\n  UNPACK = 0xc2,\n  PICKITEM = 0xc3,\n  SETITEM = 0xc4,\n  NEWARRAY = 0xc5,\n  NEWSTRUCT = 0xc6,\n  NEWMAP = 0xc7,\n  APPEND = 0xc8,\n  REVERSE = 0xc9,\n  REMOVE = 0xca,\n  HASKEY = 0xcb,\n  KEYS = 0xcc,\n  VALUES = 0xcd,\n  CALL_I = 0xe0,\n  CALL_E = 0xe1,\n  CALL_ED = 0xe2,\n  CALL_ET = 0xe3,\n  CALL_EDT = 0xe4,\n  THROW = 0xf0,\n  THROWIFNOT = 0xf1,\n}\n\nexport type OpCode = keyof typeof Op;\n\nexport type ByteCode = Op;\n\n// tslint:disable-next-line variable-name no-any\nexport const Byte: { [K in ByteCode]: OpCode } = Op as any;\n// tslint:disable-next-line variable-name\nexport const ByteBuffer: { [K in ByteCode]: Buffer } = _.fromPairs(\n  Object.values(Op).map((byteCode) => [byteCode, Buffer.from([byteCode])]),\n  // tslint:disable-next-line no-any\n) as any;\n\nexport const isByteCode = (value: number): value is ByteCode =>\n  // tslint:disable-next-line strict-type-predicates\n  Op[value] !== undefined;\n\nexport const assertByteCode = (value: number): ByteCode => {\n  if (isByteCode(value)) {\n    return value;\n  }\n\n  throw new InvalidVMByteCodeError(value);\n};\n\nexport enum SysCall {\n  'System.Runtime.Platform' = 'System.Runtime.Platform',\n  'Neo.Runtime.GetTrigger' = 'Neo.Runtime.GetTrigger',\n  'Neo.Runtime.CheckWitness' = 'Neo.Runtime.CheckWitness',\n  'Neo.Runtime.Notify' = 'Neo.Runtime.Notify',\n  'Neo.Runtime.Log' = 'Neo.Runtime.Log',\n  'Neo.Runtime.GetTime' = 'Neo.Runtime.GetTime',\n  'Neo.Runtime.Serialize' = 'Neo.Runtime.Serialize',\n  'Neo.Runtime.Deserialize' = 'Neo.Runtime.Deserialize',\n  'Neo.Blockchain.GetHeight' = 'Neo.Blockchain.GetHeight',\n  'Neo.Blockchain.GetHeader' = 'Neo.Blockchain.GetHeader',\n  'Neo.Blockchain.GetBlock' = 'Neo.Blockchain.GetBlock',\n  'Neo.Blockchain.GetTransaction' = 'Neo.Blockchain.GetTransaction',\n  'Neo.Blockchain.GetTransactionHeight' = 'Neo.Blockchain.GetTransactionHeight',\n  'Neo.Blockchain.GetAccount' = 'Neo.Blockchain.GetAccount',\n  'Neo.Blockchain.GetValidators' = 'Neo.Blockchain.GetValidators',\n  'Neo.Blockchain.GetAsset' = 'Neo.Blockchain.GetAsset',\n  'Neo.Blockchain.GetContract' = 'Neo.Blockchain.GetContract',\n  'Neo.Header.GetHash' = 'Neo.Header.GetHash',\n  'Neo.Header.GetIndex' = 'Neo.Header.GetIndex',\n  'Neo.Header.GetVersion' = 'Neo.Header.GetVersion',\n  'Neo.Header.GetPrevHash' = 'Neo.Header.GetPrevHash',\n  'Neo.Header.GetMerkleRoot' = 'Neo.Header.GetMerkleRoot',\n  'Neo.Header.GetTimestamp' = 'Neo.Header.GetTimestamp',\n  'Neo.Header.GetConsensusData' = 'Neo.Header.GetConsensusData',\n  'Neo.Header.GetNextConsensus' = 'Neo.Header.GetNextConsensus',\n  'Neo.Block.GetTransactionCount' = 'Neo.Block.GetTransactionCount',\n  'Neo.Block.GetTransactions' = 'Neo.Block.GetTransactions',\n  'Neo.Block.GetTransaction' = 'Neo.Block.GetTransaction',\n  'Neo.Transaction.GetHash' = 'Neo.Transaction.GetHash',\n  'Neo.Transaction.GetType' = 'Neo.Transaction.GetType',\n  'Neo.Transaction.GetAttributes' = 'Neo.Transaction.GetAttributes',\n  'Neo.Transaction.GetInputs' = 'Neo.Transaction.GetInputs',\n  'Neo.Transaction.GetOutputs' = 'Neo.Transaction.GetOutputs',\n  'Neo.Transaction.GetReferences' = 'Neo.Transaction.GetReferences',\n  'Neo.Transaction.GetUnspentCoins' = 'Neo.Transaction.GetUnspentCoins',\n  'Neo.Transaction.GetWitnesses' = 'Neo.Transaction.GetWitnesses',\n  'Neo.InvocationTransaction.GetScript' = 'Neo.InvocationTransaction.GetScript',\n  'Neo.Attribute.GetUsage' = 'Neo.Attribute.GetUsage',\n  'Neo.Attribute.GetData' = 'Neo.Attribute.GetData',\n  'Neo.Input.GetHash' = 'Neo.Input.GetHash',\n  'Neo.Input.GetIndex' = 'Neo.Input.GetIndex',\n  'Neo.Output.GetAssetId' = 'Neo.Output.GetAssetId',\n  'Neo.Output.GetValue' = 'Neo.Output.GetValue',\n  'Neo.Output.GetScriptHash' = 'Neo.Output.GetScriptHash',\n  'Neo.Account.GetScriptHash' = 'Neo.Account.GetScriptHash',\n  'Neo.Account.GetVotes' = 'Neo.Account.GetVotes',\n  'Neo.Account.GetBalance' = 'Neo.Account.GetBalance',\n  'Neo.Account.IsStandard' = 'Neo.Account.IsStandard',\n  'Neo.Asset.GetAssetId' = 'Neo.Asset.GetAssetId',\n  'Neo.Asset.GetAssetType' = 'Neo.Asset.GetAssetType',\n  'Neo.Asset.GetAmount' = 'Neo.Asset.GetAmount',\n  'Neo.Asset.GetAvailable' = 'Neo.Asset.GetAvailable',\n  'Neo.Asset.GetPrecision' = 'Neo.Asset.GetPrecision',\n  'Neo.Asset.GetOwner' = 'Neo.Asset.GetOwner',\n  'Neo.Asset.GetAdmin' = 'Neo.Asset.GetAdmin',\n  'Neo.Asset.GetIssuer' = 'Neo.Asset.GetIssuer',\n  'Neo.Contract.GetScript' = 'Neo.Contract.GetScript',\n  'Neo.Contract.IsPayable' = 'Neo.Contract.IsPayable',\n  'Neo.Storage.GetContext' = 'Neo.Storage.GetContext',\n  'Neo.Storage.GetReadOnlyContext' = 'Neo.Storage.GetReadOnlyContext',\n  'Neo.Storage.Get' = 'Neo.Storage.Get',\n  'Neo.Storage.Find' = 'Neo.Storage.Find',\n  'Neo.StorageContext.AsReadOnly' = 'Neo.StorageContext.AsReadOnly',\n  'Neo.Enumerator.Create' = 'Neo.Enumerator.Create',\n  'Neo.Iterator.Create' = 'Neo.Iterator.Create',\n  'Neo.Enumerator.Next' = 'Neo.Enumerator.Next',\n  'Neo.Iterator.Key' = 'Neo.Iterator.Key',\n  'Neo.Enumerator.Value' = 'Neo.Enumerator.Value',\n  'Neo.Enumerator.Concat' = 'Neo.Enumerator.Concat',\n  'Neo.Iterator.Concat' = 'Neo.Iterator.Concat',\n  'Neo.Iterator.Keys' = 'Neo.Iterator.Keys',\n  'Neo.Iterator.Values' = 'Neo.Iterator.Values',\n  'Neo.Account.SetVotes' = 'Neo.Account.SetVotes',\n  'Neo.Validator.Register' = 'Neo.Validator.Register',\n  'Neo.Asset.Create' = 'Neo.Asset.Create',\n  'Neo.Asset.Renew' = 'Neo.Asset.Renew',\n  'Neo.Contract.Create' = 'Neo.Contract.Create',\n  'Neo.Contract.Migrate' = 'Neo.Contract.Migrate',\n  'Neo.Contract.GetStorageContext' = 'Neo.Contract.GetStorageContext',\n  'Neo.Contract.Destroy' = 'Neo.Contract.Destroy',\n  'Neo.Storage.Put' = 'Neo.Storage.Put',\n  'Neo.Storage.PutEx' = 'Neo.Storage.PutEx',\n  'Neo.Storage.Delete' = 'Neo.Storage.Delete',\n  'Neo.Witness.GetVerificationScript' = 'Neo.Witness.GetVerificationScript',\n  'System.ExecutionEngine.GetScriptContainer' = 'System.ExecutionEngine.GetScriptContainer',\n  'System.ExecutionEngine.GetExecutingScriptHash' = 'System.ExecutionEngine.GetExecutingScriptHash',\n  'System.ExecutionEngine.GetCallingScriptHash' = 'System.ExecutionEngine.GetCallingScriptHash',\n  'System.ExecutionEngine.GetEntryScriptHash' = 'System.ExecutionEngine.GetEntryScriptHash',\n}\n\nexport type SysCallName = keyof typeof SysCall;\n\nconst isSysCall = (value: string): value is SysCall =>\n  // tslint:disable-next-line strict-type-predicates no-any\n  SysCall[value as any] !== undefined;\n\nexport const assertSysCall = (value: string): SysCall => {\n  if (isSysCall(value)) {\n    return value;\n  }\n  throw new InvalidSysCallError(value);\n};\n\nexport enum VMState {\n  None = 0x00,\n  Halt = 0x01,\n  Fault = 0x02,\n  Break = 0x04,\n}\n\nconst isVMState = (state: number): state is VMState =>\n  // tslint:disable-next-line strict-type-predicates\n  VMState[state] !== undefined;\n\nexport const assertVMState = (state: number): VMState => {\n  if (isVMState(state)) {\n    return state;\n  }\n  throw new InvalidVMStateError(state);\n};\n\nexport type SysCallHash = number & { readonly __uint256: undefined };\n\nexport const sha256 = (value: Buffer): Buffer =>\n  createHash('sha256')\n    .update(value)\n    .digest();\n\n// @ts-ignore\nconst mutableCache: { [K in SysCall]: SysCallHash } = {};\n\nexport const toSysCallHash = (value: SysCall): SysCallHash => {\n  let hash = mutableCache[value];\n  if ((hash as SysCallHash | undefined) === undefined) {\n    mutableCache[value] = hash = sha256(Buffer.from(value, 'ascii')).readUInt32LE(0) as SysCallHash;\n  }\n\n  return hash;\n};\n","import { utils, VMState } from '@neo-one/client-common';\nimport {\n  ExecuteScriptsResult,\n  InvocationResult,\n  InvocationResultError,\n  InvocationResultSuccess,\n} from '@neo-one/node-core';\n\nexport const wrapExecuteScripts = async (execute: () => Promise<ExecuteScriptsResult>): Promise<InvocationResult> => {\n  try {\n    const result = await execute();\n    if (result.state === VMState.Halt) {\n      return new InvocationResultSuccess({\n        gasConsumed: result.gasConsumed,\n        gasCost: result.gasCost,\n        stack: result.stack,\n      });\n    }\n\n    return new InvocationResultError({\n      gasConsumed: result.gasConsumed,\n      gasCost: result.gasCost,\n      stack: result.stack,\n      message: result.errorMessage === undefined ? 'Unknown Error' : result.errorMessage,\n    });\n  } catch (error) {\n    return new InvocationResultError({\n      gasConsumed: utils.ZERO,\n      gasCost: utils.ZERO,\n      stack: [],\n      message: error.message,\n    });\n  }\n};\n","// tslint:disable prefer-switch\nimport { Byte, isByteCode, Op, OpCode } from '@neo-one/client-common';\nimport { BinaryReader, utils } from './utils';\n\nconst createHexString = (bytes: Buffer): string => {\n  let mutableResult = '';\n  bytes.forEach((byte) => {\n    mutableResult += `${byte.toString(16).padStart(2, '0')}`;\n  });\n\n  return `0x${mutableResult}`;\n};\n\ninterface Line {\n  readonly pc: number;\n  readonly value: string;\n}\n\nexport const disassembleByteCode = (bytes: Buffer): readonly Line[] => {\n  const reader = new BinaryReader(bytes);\n\n  const mutableResult: Array<readonly [number, OpCode | 'UNKNOWN', string | undefined]> = [];\n  // tslint:disable-next-line no-loop-statement\n  while (reader.hasMore()) {\n    const pc = reader.index;\n    const byte = reader.readUInt8();\n    if (!isByteCode(byte)) {\n      mutableResult.push([pc, 'UNKNOWN', undefined] as const);\n      continue;\n    }\n\n    const pushBytes = byte >= Op.PUSHBYTES1 && byte <= Op.PUSHBYTES75;\n    const pushData1 = byte === Op.PUSHDATA1;\n    const pushData2 = byte === Op.PUSHDATA2;\n    const pushData4 = byte === Op.PUSHDATA4;\n\n    const opCode = Byte[byte];\n\n    if (pushBytes || pushData1 || pushData2 || pushData4) {\n      let numBytes;\n      if (pushBytes) {\n        numBytes = byte;\n      } else if (pushData1) {\n        numBytes = reader.readUInt8();\n      } else if (pushData2) {\n        numBytes = reader.readUInt16LE();\n      } else {\n        numBytes = reader.readInt32LE();\n      }\n      mutableResult.push([pc, opCode, createHexString(reader.readBytes(numBytes))] as const);\n    } else if (byte === Op.JMP || byte === Op.JMPIF || byte === Op.JMPIFNOT || byte === Op.CALL) {\n      mutableResult.push([pc, opCode, `${reader.readInt16LE()}`] as const);\n    } else if (byte === Op.APPCALL || byte === Op.TAILCALL) {\n      const mutableAppBytes = [...reader.readBytes(20)];\n      mutableAppBytes.reverse();\n      mutableResult.push([pc, opCode, createHexString(Buffer.from(mutableAppBytes))] as const);\n    } else if (byte === Op.SYSCALL) {\n      mutableResult.push([pc, opCode, utils.toASCII(reader.readVarBytesLE(252))] as const);\n      // tslint:disable-next-line strict-type-predicate\n    } else if (byte === Op.CALL_E || byte === Op.CALL_ET) {\n      const returnValueCount = reader.readBytes(1);\n      const parametersCount = reader.readBytes(1);\n      const mutableAppBytes = [...reader.readBytes(20)];\n      mutableAppBytes.reverse();\n      mutableResult.push([\n        pc,\n        opCode,\n        `${createHexString(returnValueCount)} ${createHexString(parametersCount)} ${createHexString(\n          Buffer.from(mutableAppBytes),\n        )}`,\n      ] as const);\n    } else if (byte === Op.CALL_ED || byte === Op.CALL_EDT || byte === Op.CALL_I) {\n      const returnValueCount = reader.readBytes(1);\n      const parametersCount = reader.readBytes(1);\n      const jumpVal = byte === Op.CALL_I ? reader.readBytes(2) : undefined;\n      mutableResult.push([\n        pc,\n        opCode,\n        `${createHexString(returnValueCount)} ${createHexString(parametersCount)} ${\n          jumpVal === undefined ? '' : createHexString(jumpVal)\n        }`,\n      ] as const);\n    } else {\n      mutableResult.push([pc, opCode, undefined] as const);\n    }\n  }\n\n  return mutableResult.map(([index, opCode, val]) => ({\n    pc: index,\n    value: `${index.toString().padStart(4, '0')}:${opCode}${val === undefined ? '' : ` ${val}`}`,\n  }));\n};\n","import { utils } from '@neo-one/client-common';\n// tslint:disable-next-line:match-default-export-name\nimport bitwise from 'bitwise';\n// tslint:disable-next-line:no-submodule-imports\nimport { Bit, UInt8 } from 'bitwise/types';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport { ExecutionContext } from './constants';\nimport { NumberTooLargeError, ReadOnlyStorageContextError } from './errors';\nimport { StackItem, StorageContextStackItem } from './stackItem';\n\nconst toNumber = (context: ExecutionContext, value: BN): number => {\n  try {\n    return value.toNumber();\n  } catch {\n    throw new NumberTooLargeError(context, value);\n  }\n};\n\nconst shiftLeft = (value: BN, shift: BN): BN => value.mul(utils.TWO.pow(shift));\n\nconst shiftRight = (value: BN, shift: BN): BN => {\n  let result = utils.ZERO;\n  if (new BN(utils.toSignedBuffer(value).length * 8).gt(shift)) {\n    result = value.div(utils.TWO.pow(shift));\n    if (result.mul(shift).lt(utils.ZERO)) {\n      result = result.sub(utils.ONE);\n    }\n  }\n\n  if (result.eq(utils.ZERO) && value.isNeg()) {\n    result = utils.NEGATIVE_ONE;\n  }\n\n  return result;\n};\n\nconst toStorageContext = ({\n  context,\n  value,\n  write = false,\n}: {\n  readonly context: ExecutionContext;\n  readonly value: StackItem;\n  readonly write?: boolean;\n}): StorageContextStackItem => {\n  const item = value.asStorageContextStackItem({\n    currentBlockIndex: context.blockchain.currentBlockIndex,\n    vm: context.blockchain.settings.vm,\n    scriptHash: context.scriptHash,\n    callingScriptHash: context.callingScriptHash,\n    entryScriptHash: context.entryScriptHash,\n  });\n\n  if (write && item.isReadOnly) {\n    throw new ReadOnlyStorageContextError(context);\n  }\n\n  return item;\n};\n\nconst leftPad = (value: Buffer, length: number): Buffer => {\n  if (value.length === 0) {\n    return Buffer.alloc(0, length);\n  }\n\n  const lastByte = bitwise.byte.read(value[value.length - 1] as UInt8);\n\n  return Buffer.concat([\n    value.slice(0, -1),\n    bitwise.buffer.create(\n      lastByte\n        .slice(0, -1)\n        .concat(_.range((length - value.length) * 8).map(() => 0 as Bit))\n        .concat([lastByte[7]]),\n    ),\n  ]);\n};\n\nconst bitwiseOp = (func: (a: Buffer, b: Buffer) => Buffer, a: BN, b: BN): BN => {\n  let aBuffer = utils.toSignedBuffer(a);\n  let bBuffer = utils.toSignedBuffer(b);\n\n  if (aBuffer.length < bBuffer.length) {\n    aBuffer = leftPad(aBuffer, bBuffer.length);\n  } else if (aBuffer.length > bBuffer.length) {\n    bBuffer = leftPad(bBuffer, aBuffer.length);\n  }\n\n  return utils.fromSignedBuffer(func(aBuffer, bBuffer));\n};\n\nexport const vmUtils = {\n  toNumber,\n  toStorageContext,\n  shiftLeft,\n  shiftRight,\n  bitwiseOp,\n};\n","import { ContractParameter, InteropInterfaceContractParameter } from '@neo-one/node-core';\nimport { InvalidValueBufferError, UnsupportedStackItemSerdeError } from './errors';\nimport { StackItemBase } from './StackItemBase';\n\nexport class ObjectStackItem<Value> extends StackItemBase {\n  public readonly value: Value;\n\n  public constructor(value: Value) {\n    super();\n    this.value = value;\n  }\n\n  public asBoolean(): boolean {\n    return this.value !== undefined;\n  }\n\n  public asBuffer(): Buffer {\n    throw new InvalidValueBufferError();\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new InteropInterfaceContractParameter();\n  }\n\n  // tslint:disable-next-line no-any\n  protected toJSONInternal(): any {\n    /* istanbul ignore next */\n    return JSON.stringify(this.value);\n  }\n\n  protected serializeInternal(): Buffer {\n    throw new UnsupportedStackItemSerdeError();\n  }\n}\n","import { makeErrorWithCode } from '@neo-one/utils';\n\nexport enum Command {\n  addr = 'addr',\n  block = 'block',\n  consensus = 'consensus',\n  filteradd = 'filteradd',\n  filterclear = 'filterclear',\n  filterload = 'filterload',\n  getaddr = 'getaddr',\n  getblocks = 'getblocks',\n  getdata = 'getdata',\n  getheaders = 'getheaders',\n  headers = 'headers',\n  inv = 'inv',\n  mempool = 'mempool',\n  tx = 'tx',\n  verack = 'verack',\n  version = 'version',\n  alert = 'alert',\n  merkleblock = 'merkleblock',\n  notfound = 'notfound',\n  ping = 'ping',\n  pong = 'pong',\n  reject = 'reject',\n}\n\nexport const InvalidCommandError = makeErrorWithCode(\n  'INVALID_COMMAND',\n  (command: string) => `Invalid Command. Found: ${command}`,\n);\n\nconst isCommand = (command: string): command is Command =>\n  // tslint:disable-next-line strict-type-predicates no-any\n  Command[command as any] !== undefined;\n\nexport const assertCommand = (command: string): Command => {\n  if (isCommand(command)) {\n    return command;\n  }\n\n  throw new InvalidCommandError(command);\n};\n","// tslint:disable deprecation no-any\nimport { OmitStrict } from '@neo-one/utils';\nimport BigNumber from 'bignumber.js';\nimport { BN } from 'bn.js';\nimport { Observable } from 'rxjs';\nimport { RawSourceMap } from 'source-map';\nimport { ECPoint, UInt160, UInt256 } from './common';\n\n/**\n * Base58 encoded string that represents a NEO address.\n *\n * Also accepts Hash160 strings (hex encoded string prefixed by '0x') when used as a parameter to a NEO•ONE function.\n * Always the base58 encoded string form when returned from a NEO•ONE function.\n *\n * @example 'APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR'\n * @example '0xecc6b20d3ccac1ee9ef109af5a7cdb85706b1df9'\n */\nexport type AddressString = string;\n/**\n * Hex encoded string prefixed by '0x' that represents a NEO 256 bit hash.\n *\n * Examples of `Hash256String` include `Block` hashes and `Transaction` hashes.\n *\n * @example '0x7f48028c38117ac9e42c8e1f6f06ae027cdbb904eaf1a0bdc30c9d81694e045c'\n */\nexport type Hash256String = string;\n/**\n * Hex encoded string that represents a buffer.\n *\n * @example '908d323aa7f92656a77ec26e8861699ef'\n */\nexport type BufferString = string;\n/**\n * Hex encoded string that represents a public key.\n *\n * @example '02028a99826edc0c97d18e22b6932373d908d323aa7f92656a77ec26e8861699ef'\n */\nexport type PublicKeyString = string;\n/**\n * WIF strings that represents a private key.\n *\n * Also accepts hex encoded strings when used as a parameter to a NEO•ONE function.\n * Always a WIF string when returned from a NEO•ONE function.\n *\n * @example 'L1QqQJnpBwbsPGAuutuzPTac8piqvbR1HRjrY5qHup48TBCBFe4g'\n * @example '9ab7e154840daca3a2efadaf0df93cd3a5b51768c632f5433f86909d9b994a69'\n */\nexport type PrivateKeyString = string;\n/**\n * Hex encoded string that represents a signature for a message.\n *\n * @example 'ccaab040cc25021c91567b75db4778853441869157b8f6aad960cdcf1069812480027a528ca9b98e2205027de20696f848cf81824eeb7af1d5110870870ceb67'\n */\nexport type SignatureString = string;\n/**\n * Implementation defined string for selecting the network to use. `'main'` refers to the NEO MainNet and `'test'` refers to the NEO TestNet. `'local'` is typically used to indicate a local development network.\n */\nexport type NetworkType = 'main' | 'test' | string;\n\n/**\n * `Attribute` usage flag indicating the data is an arbitrary `Buffer`\n *\n * @see BufferAttribute\n */\nexport type BufferAttributeUsage =\n  | 'DescriptionUrl'\n  | 'Description'\n  | 'Remark'\n  | 'Remark1'\n  | 'Remark2'\n  | 'Remark3'\n  | 'Remark4'\n  | 'Remark5'\n  | 'Remark6'\n  | 'Remark7'\n  | 'Remark8'\n  | 'Remark9'\n  | 'Remark10'\n  | 'Remark11'\n  | 'Remark12'\n  | 'Remark13'\n  | 'Remark14'\n  | 'Remark15';\n/**\n * `Attribute` usage flag indicating the data is a `PublicKey`\n *\n * @see PublicKeyAttribute\n */\nexport type PublicKeyAttributeUsage = 'ECDH02' | 'ECDH03';\n/**\n * `Attribute` usage flag indicating the data is an `Address`\n *\n * @see AddressAttribute\n */\nexport type AddressAttributeUsage = 'Script';\n/**\n * `Attribute` usage flag indicating the data is a `Hash256`\n *\n * @see Hash256Attribute\n */\nexport type Hash256AttributeUsage =\n  | 'ContractHash'\n  | 'Vote'\n  | 'Hash1'\n  | 'Hash2'\n  | 'Hash3'\n  | 'Hash4'\n  | 'Hash5'\n  | 'Hash6'\n  | 'Hash7'\n  | 'Hash8'\n  | 'Hash9'\n  | 'Hash10'\n  | 'Hash11'\n  | 'Hash12'\n  | 'Hash13'\n  | 'Hash14'\n  | 'Hash15';\n\n/**\n * `Attribute` usage flag indicates the type of the data.\n *\n * @see BufferAttributeUsage\n * @see PublicKeyAttributeUsage\n * @see AddressAttributeUsage\n * @see Hash256AttributeUsage\n */\nexport type AttributeUsage =\n  | BufferAttributeUsage\n  | AddressAttributeUsage\n  | PublicKeyAttributeUsage\n  | Hash256AttributeUsage;\n\n/**\n * Base interface for `Attribute`s\n *\n * @see Attribute\n */\nexport interface AttributeBase {\n  /**\n   * `usage` distinguishes the various `Attribute` types.\n   */\n  readonly usage: AttributeUsage;\n}\n/**\n * `Attribute` whose data is an arbitrary `BufferString`.\n */\nexport interface BufferAttribute extends AttributeBase {\n  /**\n   * `usage` distinguishes `BufferAttribute` from other `Attribute` object types.\n   */\n  readonly usage: BufferAttributeUsage;\n  /**\n   * Hex encoded data of the `Attribute`.\n   */\n  readonly data: BufferString;\n}\n/**\n * `Attribute` whose data is a `PublicKeyString`.\n */\nexport interface PublicKeyAttribute extends AttributeBase {\n  /**\n   * `usage` distinguishes `PublicKeyAttribute` from other `Attribute` object types.\n   */\n  readonly usage: PublicKeyAttributeUsage;\n  /**\n   * Public key as a string of the `Attribute`.\n   */\n  readonly data: PublicKeyString;\n}\n/**\n * `Attribute` whose data is a `Hash256`.\n */\nexport interface Hash256Attribute extends AttributeBase {\n  /**\n   * `usage` distinguishes `Hash256Attribute` from other `Attribute` object types.\n   */\n  readonly usage: Hash256AttributeUsage;\n  /**\n   * NEO `Hash256` as a string of the `Attribute`.\n   */\n  readonly data: Hash256String;\n}\n/**\n * `Attribute` whose data is an `AddressString`.\n */\nexport interface AddressAttribute extends AttributeBase {\n  /**\n   * `usage` distinguishes `AddressAttribute` from other `Attribute` object types.\n   */\n  readonly usage: AddressAttributeUsage;\n  /**\n   * NEO `Address` as a string of the `Attribute`.\n   */\n  readonly data: AddressString;\n}\n/**\n * `Attribute`s are used to store additional data on `Transaction`s. Most `Attribute`s are used to store arbitrary data, whereas some, like `AddressAttribute`, have specific uses in the NEO\n * protocol.\n */\nexport type Attribute = BufferAttribute | PublicKeyAttribute | Hash256Attribute | AddressAttribute;\n\n/**\n * `Input`s are a reference to an `Output` of a `Transaction` that has been persisted to the blockchain. The sum of the `value`s of the referenced `Output`s is the total amount transferred in the `Transaction`.\n */\nexport interface Input {\n  /**\n   * Hash of the `Transaction` this input references.\n   */\n  readonly hash: Hash256String;\n  /**\n   * `Output` index within the `Transaction` this input references.\n   */\n  readonly index: number;\n}\n\n/**\n * Both the `Output` and it's reference as an `Input`.\n */\nexport interface InputOutput extends Input, Output {}\n\n/**\n * `Output`s represent the destination `Address` and amount transferred of a given `Asset`.\n *\n * The sum of the unspent `Output`s of an `Address` represent the total balance of the `Address`.\n */\nexport interface Output {\n  /**\n   * Hash of the `Asset` that was transferred.\n   */\n  readonly asset: Hash256String;\n  /**\n   * Amount transferred.\n   */\n  readonly value: BigNumber;\n  /**\n   * Destination `Address`.\n   */\n  readonly address: AddressString;\n}\n\n/**\n * `Witness` is just that, a 'witness' to the transaction, meaning they have approved the transaction. Can vary from a simple signature of the transaction for a given `Address`' private key or a 'witness' being a smart contract and the way it's verified is by executing the smart contract code.\n */\nexport interface Witness {\n  /**\n   * Sets up the stack for the `verification` script.\n   */\n  readonly invocation: BufferString;\n  /**\n   * A script that should leave either a `true` value on the stack if the `Witness` is valid, or `false` otherwise.\n   */\n  readonly verification: BufferString;\n}\n\n/**\n * Base interface for all `Transaction`s\n */\nexport interface TransactionBase {\n  /**\n   * NEO protocol version.\n   */\n  readonly version: number;\n  /**\n   * `Hash256` of this `Transaction`.\n   */\n  readonly hash: Hash256String;\n  /**\n   * Byte size of this `Transaction`.\n   */\n  readonly size: number;\n  /**\n   * `Attribute`s attached to the `Transaction`.\n   */\n  readonly attributes: readonly Attribute[];\n  /**\n   * `Input`s of the `Transaction`.\n   */\n  readonly inputs: readonly Input[];\n  /**\n   * `Output`s of the `Transaction`.\n   */\n  readonly outputs: readonly Output[];\n  /**\n   * `Witness`es to the `Transaction`, i.e. the `Address`es that have signed the `Transasction`.\n   */\n  readonly scripts: readonly Witness[];\n  /**\n   * GAS execution fee for the transaction.\n   */\n  readonly systemFee: BigNumber;\n  /**\n   * GAS network priority fee for the transaction.\n   */\n  readonly networkFee: BigNumber;\n}\n\n/**\n * Common propreties for all `ConfirmedTransaction`s.\n */\nexport interface ConfirmedTransactionBase {\n  /**\n   * 'Receipt' of the confirmed transaction on the blockchain. This contains properties like the block the `Transaction` was included in.\n   */\n  readonly receipt: TransactionReceipt;\n}\n\n/**\n * Claims GAS for a set of spent `Output`s.\n */\nexport interface ClaimTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `ClaimTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'ClaimTransaction';\n  /**\n   * The spent outputs that this `ClaimTransaction` is claiming `GAS` for.\n   */\n  readonly claims: readonly Input[];\n}\n\n/**\n * Confirmed variant of `ClaimTransaction`\n */\nexport interface ConfirmedClaimTransaction extends ClaimTransaction, ConfirmedTransactionBase {}\n\n/**\n * Transfers first class `Asset`s\n */\nexport interface ContractTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `ContractTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'ContractTransaction';\n}\n\n/**\n * Confirmed variant of `ContractTransaction`\n */\nexport interface ConfirmedContractTransaction extends ContractTransaction, ConfirmedTransactionBase {}\n\n/**\n * Enrolls a new validator for a given `PublicKey`.\n *\n * @deprecated\n */\nexport interface EnrollmentTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `Enrollmentransaction` from other `Transaction` object types.\n   */\n  readonly type: 'EnrollmentTransaction';\n  /**\n   * The public key that is being enrolled as a validator.\n   */\n  readonly publicKey: PublicKeyString;\n}\n\n/**\n * Confirmed variant of `EnrollmentTransaction`\n */\nexport interface ConfirmedEnrollmentTransaction extends EnrollmentTransaction, ConfirmedTransactionBase {}\n\n/**\n * Issues new currency of a first-class `Asset`.\n */\nexport interface IssueTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `IssueTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'IssueTransaction';\n}\n\n/**\n * Confirmed variant of `IssueTransaction`\n */\nexport interface ConfirmedIssueTransaction extends IssueTransaction, ConfirmedTransactionBase {}\n\n/**\n * Runs a script in the NEO VM.\n */\nexport interface InvocationTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `InvocationTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'InvocationTransaction';\n  /**\n   * Script to execute in the NEO VM.\n   */\n  readonly script: BufferString;\n  /**\n   * GAS that has been attached to be used for the `systemFee` of the `Transaction`. All attached GAS will be consumed by this operation, regardless of if execution fails or provides too much GAS.\n   */\n  readonly gas: BigNumber;\n}\n\n/**\n * Confirmed variant of `InvocationTransaction`\n */\nexport interface ConfirmedInvocationTransaction extends InvocationTransaction, ConfirmedTransactionBase {\n  /**\n   * Additional raw data that is typically processed by an `ABI` for the client APIs.\n   */\n  readonly invocationData: RawInvocationData;\n}\n\n/**\n * First `Transaction` in each block which contains the `Block` rewards for the consensus node that produced the `Block`.\n */\nexport interface MinerTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `MinerTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'MinerTransaction';\n  /**\n   * Unique number in order to ensure the hash for this transaction is unique.\n   */\n  readonly nonce: number;\n}\n\n/**\n * Confirmed variant of `MinerTransaction`\n */\nexport interface ConfirmedMinerTransaction extends MinerTransaction, ConfirmedTransactionBase {}\n\n/**\n * Registers a new `Contract`\n *\n * @deprecated Replaced by `Client#publish`\n */\nexport interface PublishTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `PublishTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'PublishTransaction';\n  /**\n   * `Contract` to publish.\n   */\n  readonly contract: Contract;\n}\n\n/**\n * Confirmed variant of `PublishTransaction`\n */\nexport interface ConfirmedPublishTransaction extends PublishTransaction, ConfirmedTransactionBase {}\n\n/**\n * Registers a new first class `Asset`\n *\n * @deprecated Replaced by `Client#registerAsset`\n */\nexport interface RegisterTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `RegisterTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'RegisterTransaction';\n  /**\n   * `Asset` information to register.\n   */\n  readonly asset: Pick<Asset, 'type' | 'name' | 'amount' | 'precision' | 'owner' | 'admin'>;\n}\n\n/**\n * Confirmed variant of `RegisterTransaction`\n */\nexport interface ConfirmedRegisterTransaction extends RegisterTransaction, ConfirmedTransactionBase {}\n\n/**\n * Used for voting. Full support coming soon.\n */\nexport interface StateTransaction extends TransactionBase {\n  /**\n   * `type` distinguishes `StateTransaction` from other `Transaction` object types.\n   */\n  readonly type: 'StateTransaction';\n}\n\n/**\n * Confirmed variant of `StateTransaction`\n */\nexport interface ConfirmedStateTransaction extends StateTransaction, ConfirmedTransactionBase {}\n\n/**\n * `Transaction`s are relayed to the blockchain and contain information that is to be permanently stored on the blockchain. They may contain `Input`s and `Output`s corresponding to transfers of native `Asset`s. Each `Transaction` type serves a particular purpose, see the documentation for each for more information.\n */\nexport type Transaction =\n  | MinerTransaction\n  | IssueTransaction\n  | ClaimTransaction\n  | EnrollmentTransaction\n  | RegisterTransaction\n  | ContractTransaction\n  | PublishTransaction\n  | StateTransaction\n  | InvocationTransaction;\n/**\n * `Transaction` that has been confirmed on the blockchain. Includes all of the same properties as a `Transaction` as well as the `TransactionReceipt` of the confirmation.\n */\nexport type ConfirmedTransaction =\n  | ConfirmedMinerTransaction\n  | ConfirmedIssueTransaction\n  | ConfirmedClaimTransaction\n  | ConfirmedEnrollmentTransaction\n  | ConfirmedRegisterTransaction\n  | ConfirmedContractTransaction\n  | ConfirmedPublishTransaction\n  | ConfirmedStateTransaction\n  | ConfirmedInvocationTransaction;\n\n/**\n * All of the properties of a `Block` except the `Transaction`s themselves.\n */\nexport interface Header {\n  /**\n   * NEO blockchain version\n   */\n  readonly version: number;\n  /**\n   * `Block` hash\n   */\n  readonly hash: Hash256String;\n  /**\n   * Previous `Block` hash.\n   */\n  readonly previousBlockHash: Hash256String;\n  /**\n   * Merkle Root of the `Transaction`s of this `Block`.\n   */\n  readonly merkleRoot: Hash256String;\n  /**\n   * `Block` time persisted\n   */\n  readonly time: number;\n  /**\n   * `Block` index\n   */\n  readonly index: number;\n  /**\n   * Unique number to ensure the block hash is always unique.\n   */\n  readonly nonce: string;\n  /**\n   * Next consensus address.\n   */\n  readonly nextConsensus: AddressString;\n  /**\n   * 'Witness' to the `Block`'s validity.\n   */\n  readonly script: Witness;\n  /**\n   * Size in bytes of the `Block`.\n   */\n  readonly size: number;\n}\n\nexport interface Block extends Header {\n  /**\n   * `Transaction`s contained in the `Block`.\n   */\n  readonly transactions: readonly ConfirmedTransaction[];\n}\n\n/**\n * Receipt of a confirmed `Transaction` which contains data about the confirmation such as the `Block` index and the index of the `Transaction` within the block.\n */\nexport interface TransactionReceipt {\n  /**\n   * `Block` index of the `Transaction` for this receipt.\n   */\n  readonly blockIndex: number;\n  /**\n   * `Block` hash of the `Transaction` for this receipt.\n   */\n  readonly blockHash: Hash256String;\n  /**\n   * Transaction index of the `Transaction` within the `Block` for this receipt.\n   */\n  readonly transactionIndex: number;\n  /**\n   * Ordered globally unique index of the transaction.\n   */\n  readonly globalIndex: BigNumber;\n}\n\n/**\n * The result of a successful relay of a `Transaction`.\n */\nexport interface TransactionResult<\n  TTransactionReceipt extends TransactionReceipt = TransactionReceipt,\n  TTransaction extends Transaction = Transaction\n> {\n  /**\n   * `Transaction` that was relayed.\n   */\n  readonly transaction: TTransaction;\n  /**\n   * Waits for the `Transaction` to be confirmed on the blockchain.\n   *\n   * @param options Optional object that controls, in particular, the time to wait for the `Transaction` to confirm before timing out.\n   * @returns `Promise` that resolves when the `Transaction` has been confirmed, resolving to the confirmation receipt.\n   */\n  readonly confirmed: (options?: GetOptions) => Promise<TTransactionReceipt>;\n}\n\n/**\n * Common `InvocationResult` and `RawInvocationResult` properties.\n */\nexport interface RawInvocationResultBase {\n  /**\n   * GAS consumed by the operation. This is the total GAS consumed after the free GAS is subtracted.\n   */\n  readonly gasConsumed: BigNumber;\n  /**\n   * The total GAS cost before subtracting the free GAS.\n   */\n  readonly gasCost: BigNumber;\n}\n\n/**\n * Result of a successful invocation.\n */\nexport interface InvocationResultSuccess<TValue> extends RawInvocationResultBase {\n  /**\n   * Indicates a successful invocation.\n   */\n  readonly state: 'HALT';\n  /**\n   * The return value of the invocation.\n   */\n  readonly value: TValue;\n}\n\n/**\n * Result of a failed invocation.\n */\nexport interface InvocationResultError extends RawInvocationResultBase {\n  /**\n   * Indicates a failed invocation.\n   */\n  readonly state: 'FAULT';\n  /**\n   * Failure reason.\n   */\n  readonly message: string;\n}\n\n/**\n * Either a successful or error result, `InvocationResultSuccess` and `InvocationResultError`, respectively.\n */\nexport type InvocationResult<TValue> = InvocationResultSuccess<TValue> | InvocationResultError;\n\n/**\n * The receipt for a smart contract method invocation.\n */\nexport interface InvokeReceipt<TReturn extends Return = Return, TEvent extends Event<string, any> = Event>\n  extends TransactionReceipt {\n  /**\n   * The result of the invocation.\n   */\n  readonly result: InvocationResult<TReturn>;\n  /**\n   * The events emitted by the smart contract during the invocation.\n   */\n  readonly events: readonly TEvent[];\n  /**\n   * The logs emitted by the smart contract during the invocation.\n   */\n  readonly logs: readonly Log[];\n  /**\n   * The original, unprocessed, raw invoke receipt. The `RawInvokeReceipt` is transformed into this object (the `InvokeReceipt`) using the `ABI` to parse out the `Event`s and `InvocationResult`.\n   */\n  readonly raw: RawInvokeReceipt;\n}\n\n/**\n * Represents a transfer of native assets.\n */\nexport interface Transfer {\n  /**\n   * Amount to be transferred\n   */\n  readonly amount: BigNumber;\n  /**\n   * `Hash256` in string format of the native `Asset` to transfer.\n   */\n  readonly asset: Hash256String;\n  /**\n   * Destination address.\n   */\n  readonly to: AddressString;\n}\n\n/**\n * Uniquely identifies a `UserAccount` by its address and the network its used on.\n */\nexport interface UserAccountID {\n  /**\n   * Network that this address is used on.\n   */\n  readonly network: NetworkType;\n  /**\n   * The NEO address.\n   */\n  readonly address: AddressString;\n}\n\n/**\n * `UserAccount` is the base abstraction on which all of the @neo-one/client APIs work with.\n */\nexport interface UserAccount {\n  /**\n   * Uniquely identifies a `UserAccount` by its address and the network its used on.\n   */\n  readonly id: UserAccountID;\n  /**\n   * The name to use when displaying this account in a user-facing UI. Can be a user configured name or just the address.\n   */\n  readonly name: string;\n  /**\n   * The public key for the address.\n   */\n  readonly publicKey: PublicKeyString;\n}\n\n/**\n * `UserAccountProvider`s power `Client` instances. Multiple `UserAccountProvider`s may be provided, and the `Client` abstracts over them to provide a common layer of functionality independent of the underlying `UserAccountProvider`s.\n */\nexport interface UserAccountProvider {\n  /**\n   * An `Observable` that emits the currently selected `UserAccount`\n   */\n  readonly currentUserAccount$: Observable<UserAccount | undefined>;\n  /**\n   * An `Observable` that emits the available `UserAccount`s\n   */\n  readonly userAccounts$: Observable<readonly UserAccount[]>;\n  /**\n   * An `Observable` that emits the available networks this `UserAccountProvider` knows how to function with.\n   */\n  readonly networks$: Observable<readonly NetworkType[]>;\n  /**\n   * @returns the currently selected `UserAccount` or `undefined` if one is not selected.\n   */\n  readonly getCurrentUserAccount: () => UserAccount | undefined;\n  /**\n   * @returns the available `UserAccount`s\n   */\n  readonly getUserAccounts: () => readonly UserAccount[];\n  /**\n   * @returns the available networks this `UserAccountProvider` knows how to function with.\n   */\n  readonly getNetworks: () => readonly NetworkType[];\n  /**\n   * Set the given `UserAccountID` as the selected `UserAccount`.\n   *\n   * If the `UserAccountProvider` does not support programatically selecting a `UserAccountID`, it should only ever expose one available `UserAccount` and manage selecting other `UserAccount`s outside of the application.\n   */\n  readonly selectUserAccount: (id?: UserAccountID) => Promise<void>;\n  /**\n   * Optional support for deleting a `UserAccount`\n   */\n  readonly deleteUserAccount?: (id: UserAccountID) => Promise<void>;\n  /**\n   * Optional support for updating the name of a `UserAccount`\n   */\n  readonly updateUserAccountName?: (options: UpdateAccountNameOptions) => Promise<void>;\n  /**\n   * @returns the current `Block` height.\n   */\n  readonly getBlockCount: (network: NetworkType) => Promise<number>;\n  /**\n   * @returns `Account` for the specified network and address. Note that the provided network and address may not correspond to one of the available `UserAccount`s.\n   */\n  readonly getAccount: (network: NetworkType, address: AddressString) => Promise<Account>;\n  /**\n   * @returns `AsyncIterable` of `Block`s on the argument `network`.\n   */\n  readonly iterBlocks: (network: NetworkType, options?: IterOptions) => AsyncIterable<Block>;\n  /**\n   * While this method could be implemented simply as a function of `iterBlocks`, `iterActionsRaw` is provided in case the `UserAccountProvider` has a more efficient way of iterating over actions.\n   *\n   * @returns `AsyncIterable` over all actions emitted by the given `network`, filtered by the given `options`.\n   */\n  readonly iterActionsRaw?: (network: NetworkType, options?: IterOptions) => AsyncIterable<RawAction>;\n  /**\n   * Transfers native assets.\n   */\n  readonly transfer: (\n    transfers: readonly Transfer[],\n    options?: TransactionOptions,\n  ) => Promise<TransactionResult<TransactionReceipt, InvocationTransaction | ContractTransaction>>;\n  /**\n   * Claim all claimable GAS.\n   */\n  readonly claim: (options?: TransactionOptions) => Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;\n  /**\n   * Invoke the specified `method` with the given `params` on `contract`.\n   *\n   * `paramsZipped` contains the original parameters before processing with the ABI and are typically suitable for displaying to a user.\n   *\n   * `verify` will be true if the transaction should trigger verification for the `contract`\n   *\n   * `options` may specify additional native asset transfers to include with the transaction (either to or from the contract address).\n   */\n  readonly invoke: (\n    contract: AddressString,\n    method: string,\n    params: ReadonlyArray<ScriptBuilderParam | undefined>,\n    paramsZipped: ReadonlyArray<readonly [string, Param | undefined]>,\n    verify: boolean,\n    options?: InvokeSendUnsafeReceiveTransactionOptions,\n    sourceMaps?: Promise<SourceMaps>,\n  ) => Promise<TransactionResult<RawInvokeReceipt, InvocationTransaction>>;\n  /**\n   * Relays a transaction that is the first step of a two-step send process. The `Transfer`'s `to` property represents the ultimate destination of the funds, but this transaction will be constructed such that those funds are marked for transfer, not actually transferred.\n   *\n   * Otherwise, parameters are the same as `invoke`.\n   */\n  readonly invokeSend: (\n    contract: AddressString,\n    method: string,\n    params: ReadonlyArray<ScriptBuilderParam | undefined>,\n    paramsZipped: ReadonlyArray<readonly [string, Param | undefined]>,\n    transfer: Transfer,\n    options?: TransactionOptions,\n    sourceMaps?: Promise<SourceMaps>,\n  ) => Promise<TransactionResult<RawInvokeReceipt, InvocationTransaction>>;\n  /**\n   * Relays a transaction that is the second step of a two-step send process. The `hash` is the transaction hash of the first step in the process and is used to determine the amount to transfer to the `from` address.\n   *\n   * Otherwise, parameters are the same as `invoke`.\n   */\n  readonly invokeCompleteSend: (\n    contract: AddressString,\n    method: string,\n    params: ReadonlyArray<ScriptBuilderParam | undefined>,\n    paramsZipped: ReadonlyArray<readonly [string, Param | undefined]>,\n    hash: Hash256String,\n    options?: TransactionOptions,\n    sourceMaps?: Promise<SourceMaps>,\n  ) => Promise<TransactionResult<RawInvokeReceipt, InvocationTransaction>>;\n  /**\n   * Refunds native assets that were not processed by the contract. The `hash` is the transaction hash that should be refunded and is used to construct the transfers for this transaction.\n   *\n   * Otherwise, parameters are the same as `invoke`.\n   */\n  readonly invokeRefundAssets: (\n    contract: AddressString,\n    method: string,\n    params: ReadonlyArray<ScriptBuilderParam | undefined>,\n    paramsZipped: ReadonlyArray<readonly [string, Param | undefined]>,\n    hash: Hash256String,\n    options?: TransactionOptions,\n    sourceMaps?: Promise<SourceMaps>,\n  ) => Promise<TransactionResult<RawInvokeReceipt, InvocationTransaction>>;\n  /**\n   * Claims GAS. Currently only supports claiming all unclaimed GAS to the contract address.\n   *\n   * Otherwise, parameters are the same as `invoke`.\n   */\n  readonly invokeClaim: (\n    contract: AddressString,\n    method: string,\n    params: ReadonlyArray<ScriptBuilderParam | undefined>,\n    paramsZipped: ReadonlyArray<readonly [string, Param | undefined]>,\n    options?: TransactionOptions,\n    sourceMaps?: Promise<SourceMaps>,\n  ) => Promise<TransactionResult<TransactionReceipt, ClaimTransaction>>;\n  /**\n   * Invokes the constant `method` on `contract` with `params` on `network`.\n   */\n  readonly call: (\n    network: NetworkType,\n    contract: AddressString,\n    method: string,\n    params: ReadonlyArray<ScriptBuilderParam | undefined>,\n  ) => Promise<RawCallReceipt>;\n}\n\n/**\n * An object of `UserAccountProvider`s.\n */\nexport interface UserAccountProviders<TUserAccountProvider extends UserAccountProvider> {\n  /**\n   * Key index may be arbitrary and is primarily intended to allow for a more specific `Client` TypeScript type to enable direct access to the underlying providers, if needed.\n   */\n  readonly [type: string]: TUserAccountProvider;\n}\n\n/**\n * Settings that may be modified on a local NEO•ONE private network.\n */\nexport interface PrivateNetworkSettings {\n  /**\n   * Time until the next block starts to be produced.\n   */\n  readonly secondsPerBlock: number;\n}\n\n/**\n * Provides the core functionality required by the `DeveloperClient`.\n */\nexport interface DeveloperProvider {\n  /**\n   * Network the `DeveloperProvider` is acting on.\n   */\n  readonly network: NetworkType;\n  /**\n   * Trigger consensus to run immediately.\n   */\n  readonly runConsensusNow: () => Promise<void>;\n  /**\n   * Update the network's settings.\n   */\n  readonly updateSettings: (options: Partial<PrivateNetworkSettings>) => Promise<void>;\n  /**\n   * @returns the current network settings.\n   */\n  readonly getSettings: () => Promise<PrivateNetworkSettings>;\n  /**\n   * @param seconds fast forward by `seconds` number of seconds.\n   */\n  readonly fastForwardOffset: (seconds: number) => Promise<void>;\n  /**\n   * @param seconds fast forward to the unix timestamp defined by `seconds`\n   */\n  readonly fastForwardToTime: (seconds: number) => Promise<void>;\n  /**\n   * Reset the network to it's initial state, restarting from the genesis `Block`.\n   */\n  readonly reset: () => Promise<void>;\n}\n\n/**\n * An `Account` represents the balances of NEO, GAS an other native assets at a given `Address`.\n */\nexport interface Account {\n  /**\n   * The address of this `Account`.\n   */\n  readonly address: AddressString;\n  /**\n   * A mapping from a `Hash256String` of a native `Asset` to the value of the held by the `address` for this `Account`.\n   */\n  readonly balances: {\n    /**\n     * May be `undefined` if the `address` has 0 balance.\n     */\n    readonly [asset: string]: BigNumber;\n  };\n}\n\n/**\n * The base type of the `Event` parameters. This type is specialized automatically with the generated NEO•ONE smart contract APIs.\n */\nexport interface EventParameters {\n  /**\n   * Note that arbitrary string indices are not supported - the exact indices are implementation defined for a particular `Event` name.\n   */\n  readonly [name: string]: Param;\n}\n/**\n * Structured data emitted by a smart contract during a method invocation. Typically emitted in response to state changes within the contract and to notify contract listeners of an action happening within the contract.\n */\nexport interface Event<TName extends string = string, TEventParameters = EventParameters> extends RawActionBase {\n  /**\n   * `type` differentiates the `Event` object from other `Action` objects, i.e. `Log`.\n   */\n  readonly type: 'Event';\n  /**\n   * An implementation defined string identifying this `Event`. In the automatically generated NEO•ONE smart contract APIs this identifier distinguishes the type of `Event` and the exact type of the `parameters` of the `Event`.\n   *\n   * @example 'transfer'\n   * @example 'mint'\n   */\n  readonly name: TName;\n  /**\n   * Structured data attached to the event.\n   *\n   * @example { from: 'APyEx5f4Zm4oCHwFWiSTaph1fPBxZacYVR', to: 'ALfnhLg7rUyL6Jr98bzzoxz5J7m64fbR4s', amount: new BigNumber(10) }\n   */\n  readonly parameters: TEventParameters;\n}\n\n/**\n * Unstructured string emitted by a smart contract during a method invocation.\n */\nexport interface Log extends RawActionBase {\n  /**\n   * `type` differentiates the `Log` object from other `Action` objects, i.e. `Event`.\n   */\n  readonly type: 'Log';\n  /**\n   * An implementation defined string representing a log message.\n   */\n  readonly message: string;\n}\n\n/**\n * An `Action` is either an `Event` or `Log` emitted by the smart contract during a method invocation.\n */\nexport type Action = Event | Log;\n\n/**\n * Network specific smart contract configuration\n */\nexport interface SmartContractNetworkDefinition {\n  /**\n   * `AddressString` of the smart contract on the network.\n   */\n  readonly address: AddressString;\n}\n\n/**\n * Configuration for the smart contract by network.\n */\nexport interface SmartContractNetworksDefinition {\n  /**\n   * Network specific smart contract configuration\n   */\n  readonly [networkType: string]: SmartContractNetworkDefinition;\n}\n\n/**\n * Used to generate the smart contract APIs.\n */\nexport interface SmartContractDefinition {\n  /**\n   * Configuration for the smart contract by network.\n   */\n  readonly networks: SmartContractNetworksDefinition;\n  /**\n   * `ABI` of the smart contract\n   */\n  readonly abi: ABI;\n  /**\n   * `SourceMaps` associated with the smart contract.\n   */\n  readonly sourceMaps?: Promise<SourceMaps>;\n}\n\n/**\n * Additional optional options for methods that read data from a smart contract.\n */\nexport interface SmartContractReadOptions {\n  /**\n   * The network to read the smart contract data for. By default this is the network of the currently selected user account.\n   */\n  readonly network?: NetworkType;\n}\n\n/**\n * Additional optional options for methods that iterate over data from a smart contract.\n */\nexport interface SmartContractIterOptions extends SmartContractReadOptions, BlockFilter {}\n\n/**\n * Filter that specifies (optionally) a block index to start at and (optionally) a block index to end at.\n */\nexport interface BlockFilter {\n  /**\n   * The inclusive start index for the first block to include. Leaving `undefined` means start from the beginning of the blockchain, i.e. index 0.\n   */\n  readonly indexStart?: number;\n  /**\n   * The exclusive end index for the block to start at. Leaving `undefined` means continue indefinitely, waiting for new blocks to come in.\n   */\n  readonly indexStop?: number;\n}\n/**\n * Additional optional options for methods that iterate over data by block index.\n */\nexport interface IterOptions extends BlockFilter {}\n/**\n * Common options for operations that fetch data from the blockchain.\n */\nexport interface GetOptions {\n  /**\n   * Time in milliseconds before timing out the operation.\n   */\n  readonly timeoutMS?: number;\n}\n\n/**\n * Common options for all methods in the client APIs that create transactions.\n */\nexport interface TransactionOptions {\n  // tslint:disable readonly-keyword\n  /**\n   * The `UserAccount` that the transaction is 'from', i.e. the one that will be used for native asset transfers, claims, and signing the transaction.\n   *\n   * If unspecified, the currently selected `UserAccount` is used as the `from` address.\n   *\n   * DApp developers will typically want to leave this unspecified.\n   */\n  from?: UserAccountID;\n  /**\n   * Additional attributes to include with the transaction.\n   */\n  attributes?: readonly Attribute[];\n  /**\n   * An optional network fee to include with the transaction.\n   */\n  networkFee?: BigNumber;\n  /**\n   * A maximum system fee to include with the transaction. Note that this is a maximum, the client APIs will automatically calculate and add a system fee to the transaction up to the value specified here.\n   *\n   * Leaving `systemFee` `undefined` is equivalent to `new BigNumber(0)`, i.e. no system fee.\n   *\n   * A `systemFee` of `-1`, i.e. `new BigNumber(-1)` indicates no limit on the fee. This is typically used only during development.\n   */\n  systemFee?: BigNumber;\n  // tslint:enable readonly-keyword\n}\n\n/**\n * Additional options that are automatically provided by the `forward<method>Args` method. In particular, this object provides the event specification when forwarding values.\n */\nexport interface ForwardOptions<TEvent extends Event<string, any> = Event> {\n  /**\n   * Additional events that may be emitted due to forwarding arguments to another smart contract method.\n   */\n  readonly events?: readonly ABIEvent[];\n  readonly __tag?: TEvent;\n}\n\n/**\n * Additional parameters available to methods that support unsafely sending native `Asset`s from the smart contract, i.e. they have been annotated with `@sendUnsafe`.\n */\nexport interface InvokeSendUnsafeTransactionOptions extends TransactionOptions {\n  /**\n   * `Transfer`s that specify native assets to send from the contract.\n   */\n  readonly sendFrom?: readonly Transfer[];\n}\n\n/**\n * Additional parameters available to methods that support receiving native `Asset`s to the smart contract, i.e. they have been annotated with `@receive`.\n */\nexport interface InvokeReceiveTransactionOptions extends TransactionOptions {\n  /**\n   * `Transfer`s that specify native assets to send to the contract.\n   */\n  readonly sendTo?: ReadonlyArray<OmitStrict<Transfer, 'to'>>;\n}\n\n/**\n * Additional parameters available to methods that support unsafely sending native `Asset`s from the smart contract and receiving native `Asset`s to the smart contract, i.e. they have been annotated with both `@sendUnsafe` and `@receive`.\n */\nexport interface InvokeSendUnsafeReceiveTransactionOptions\n  extends InvokeSendUnsafeTransactionOptions,\n    InvokeReceiveTransactionOptions {}\n\n/**\n * Options for the `UserAccountProvider#updateAccountName` method.\n */\nexport interface UpdateAccountNameOptions {\n  /**\n   * `UserAccountID` of the `UserAccount` to update.\n   */\n  readonly id: UserAccountID;\n  /**\n   * New name of the `UserAccount`.\n   */\n  readonly name: string;\n}\n\n/**\n * Common properties of all `ABIReturn` specifications.\n *\n * @see ABIReturn\n */\nexport interface ABIReturnBase {\n  /**\n   * `true` if the value can be `undefined`\n   */\n  readonly optional?: boolean;\n  /**\n   * `true` if the smart contract expects this value to be forwarded by another smart contract.\n   */\n  readonly forwardedValue?: boolean;\n}\n\n/**\n * `Address` return type.\n *\n * @see ABIReturn\n * @see AddressString\n */\nexport interface AddressABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `AddressABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Address';\n}\n/**\n * `Array` return type.\n */\nexport interface ArrayABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `ArrayABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Array';\n  /**\n   * Value type of the `Array`.\n   */\n  readonly value: ABIReturn;\n}\n/**\n * `boolean` return type.\n *\n * @see ABIReturn\n */\nexport interface BooleanABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `BooleanABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Boolean';\n}\n/**\n * `Buffer` return type.\n *\n * @see ABIReturn\n * @see BufferString\n */\nexport interface BufferABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `BufferABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Buffer';\n}\n/**\n * `ForwardValue` return type.\n */\nexport interface ForwardValueABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `ForwardValueABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'ForwardValue';\n}\n/**\n * `Hash256` return type.\n *\n * @see ABIReturn\n * @see Hash256String\n */\nexport interface Hash256ABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `Hash256ABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Hash256';\n}\n/**\n * `Fixed<decimals>` return type. `decimals` indicates to the client APIs how many decimals the integer represents.\n *\n * @see Fixed<Decimals>\n */\nexport interface IntegerABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `IntegerABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Integer';\n  /**\n   * Number of decimals values of this type represent.\n   */\n  readonly decimals: number;\n}\n/**\n * `Map` return type.\n */\nexport interface MapABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `MapABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Map';\n  /**\n   * Key type of the `Map`.\n   */\n  readonly key: ABIReturn;\n  /**\n   * Value type of the `Map`.\n   */\n  readonly value: ABIReturn;\n}\n/**\n * `Object` return type.\n */\nexport interface ObjectABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `ObjectABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Object';\n  /**\n   * Properties of the `Object`.\n   */\n  readonly properties: { readonly [key: string]: ABIReturn };\n}\n/**\n * `PublicKey` return type.\n *\n * @see ABIReturn\n * @see PublicKeyString\n */\nexport interface PublicKeyABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `PublicKeyABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'PublicKey';\n}\n/**\n * `Signature` return type.\n *\n * @see ABIReturn\n * @see SignatureString\n */\nexport interface SignatureABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `SignatureABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Signature';\n}\n/**\n * `string` return type.\n *\n * @see ABIReturn\n */\nexport interface StringABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `StringABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'String';\n}\n/**\n * `void` return type.\n */\nexport interface VoidABIReturn extends ABIReturnBase {\n  /**\n   * `type` differentiates the `VoidABIReturn` object from other `ABIReturn` objects.\n   */\n  readonly type: 'Void';\n}\n\n/**\n * Default value is the `Transaction` sender `Address`\n */\nexport interface SenderAddressABIDefault {\n  /**\n   * `type` differentiates the `SenderAddressABIDefault` object from other `ABIDefault` objects.\n   */\n  readonly type: 'sender';\n}\n\n/**\n * Default value for the constructor/deploy parameter.\n */\nexport type ABIDefault = SenderAddressABIDefault;\n/**\n * All possible `ABIDefault#type` fields.\n */\nexport type ABIDefaultType = ABIDefault['type'];\n\n/**\n * Base interface for all `ABIParameter`s\n */\nexport interface ABIParameterBase {\n  /**\n   * Name of the parameter.\n   */\n  readonly name: string;\n  /**\n   * Runtime default value.\n   */\n  readonly default?: ABIDefault;\n  /**\n   * Represents a rest parameter.\n   */\n  readonly rest?: boolean;\n}\n\n/**\n * `Address` parameter type.\n *\n * @see ABIParameter\n * @see AddressABIReturn\n * @see AddressString\n */\nexport interface AddressABIParameter extends ABIParameterBase, AddressABIReturn {}\n/**\n * `Array` parameter type.\n *\n * @see ABIParameter\n * @see ArrayABIReturn\n */\nexport interface ArrayABIParameter extends ABIParameterBase, ArrayABIReturn {}\n/**\n * `boolean` parameter type.\n *\n * @see ABIParameter\n * @see BooleanABIReturn\n */\nexport interface BooleanABIParameter extends ABIParameterBase, BooleanABIReturn {}\n/**\n * `Buffer` parameter type.\n *\n * @see ABIParameter\n * @see BufferABIReturn\n * @see BufferString\n */\nexport interface BufferABIParameter extends ABIParameterBase, BufferABIReturn {}\n/**\n * `Hash256` parameter type.\n *\n * @see ABIParameter\n * @see Hash256ABIReturn\n * @see Hash256String\n */\nexport interface Hash256ABIParameter extends ABIParameterBase, Hash256ABIReturn {}\n/**\n * `Fixed<decimals>` parameter type. `decimals` indicates to the client APIs how many decimals the integer represents.\n *\n * @see ABIParameter\n * @see IntegerABIReturn\n * @see Fixed<Decimals>\n */\nexport interface IntegerABIParameter extends ABIParameterBase, IntegerABIReturn {}\n/**\n * `ForwardValue` parameter type.\n *\n * @see ABIParameter\n * @see ForwardValueABIReturn\n */\nexport interface ForwardValueABIParameter extends ABIParameterBase, ForwardValueABIReturn {}\n/**\n * `Map` parameter type.\n *\n * @see ABIParameter\n * @see MapABIReturn\n */\nexport interface MapABIParameter extends ABIParameterBase, MapABIReturn {}\n/**\n * `Object` parameter type.\n *\n * @see ABIParameter\n * @see ObjectABIReturn\n */\nexport interface ObjectABIParameter extends ABIParameterBase, ObjectABIReturn {}\n/**\n * `PublicKey` parameter type.\n *\n * @see ABIParameter\n * @see PublicKeyABIReturn\n * @see PublicKeyString\n */\nexport interface PublicKeyABIParameter extends ABIParameterBase, PublicKeyABIReturn {}\n/**\n * `Signature` parameter type.\n *\n * @see ABIParameter\n * @see SignatureABIReturn\n * @see SignatureString\n */\nexport interface SignatureABIParameter extends ABIParameterBase, SignatureABIReturn {}\n/**\n * `string` parameter type.\n *\n * @see ABIParameter\n * @see StringABIReturn\n */\nexport interface StringABIParameter extends ABIParameterBase, StringABIReturn {}\n/**\n * `void` parameter type.\n *\n * @see ABIParameter\n * @see VoidABIReturn\n */\nexport interface VoidABIParameter extends ABIParameterBase, VoidABIReturn {}\n\n/**\n * Return type specification of a function in the `ABI` of a smart contract.\n */\nexport type ABIReturn =\n  | SignatureABIReturn\n  | BooleanABIReturn\n  | AddressABIReturn\n  | Hash256ABIReturn\n  | BufferABIReturn\n  | PublicKeyABIReturn\n  | StringABIReturn\n  | ArrayABIReturn\n  | MapABIReturn\n  | ObjectABIReturn\n  | VoidABIReturn\n  | IntegerABIReturn\n  | ForwardValueABIReturn;\n/**\n * Parameter specification of a function or event in the `ABI` of a smart contract.\n */\nexport type ABIParameter =\n  | SignatureABIParameter\n  | BooleanABIParameter\n  | AddressABIParameter\n  | Hash256ABIParameter\n  | BufferABIParameter\n  | PublicKeyABIParameter\n  | StringABIParameter\n  | ArrayABIParameter\n  | MapABIParameter\n  | ObjectABIParameter\n  | VoidABIParameter\n  | IntegerABIParameter\n  | ForwardValueABIParameter;\n\nexport type ArrayABI = ArrayABIParameter | ArrayABIReturn;\nexport type MapABI = MapABIParameter | MapABIReturn;\nexport type ObjectABI = ObjectABIParameter | ObjectABIReturn;\nexport type SignatureABI = SignatureABIParameter | SignatureABIReturn;\nexport type BooleanABI = BooleanABIParameter | BooleanABIReturn;\nexport type AddressABI = AddressABIParameter | AddressABIReturn;\nexport type Hash256ABI = Hash256ABIParameter | Hash256ABIReturn;\nexport type BufferABI = BufferABIParameter | BufferABIReturn;\nexport type PublicKeyABI = PublicKeyABIParameter | PublicKeyABIReturn;\nexport type StringABI = StringABIParameter | StringABIReturn;\nexport type VoidABI = VoidABIParameter | VoidABIReturn;\nexport type IntegerABI = IntegerABIParameter | IntegerABIReturn;\nexport type ForwardValueABI = ForwardValueABIParameter | ForwardValueABIReturn;\n\n/**\n * Function specification in the `ABI` of a smart contract.\n */\nexport interface ABIFunction {\n  /**\n   * Name of the function\n   */\n  readonly name: string;\n  /**\n   * Parameters of the function.\n   */\n  readonly parameters?: readonly ABIParameter[];\n  /**\n   * Return type of the function.\n   */\n  readonly returnType: ABIReturn;\n  /**\n   * `true` if the function is constant or read-only.\n   */\n  readonly constant?: boolean;\n  /**\n   * `true` if the function is used for sending native assets with a two-phase send.\n   */\n  readonly send?: boolean;\n  /**\n   * `true` if the function is used for sending native assets.\n   */\n  readonly sendUnsafe?: boolean;\n  /**\n   * `true` if the function is used for receiving native assets.\n   */\n  readonly receive?: boolean;\n  /**\n   * `true` if the function is used for claiming GAS.\n   */\n  readonly claim?: boolean;\n  /**\n   * `true` if the function is used for refunding native assets.\n   */\n  readonly refundAssets?: boolean;\n  /**\n   * `true` if the function is used for the second phase of a send.\n   */\n  readonly completeSend?: boolean;\n}\n\n/**\n * Event specification in the `ABI` of a smart contract.\n */\nexport interface ABIEvent {\n  /**\n   * Name of the event.\n   */\n  readonly name: string;\n  /**\n   * Parameters of the event.\n   */\n  readonly parameters: readonly ABIParameter[];\n}\n\n/**\n * Full specification of the functions and events of a smart contract. Used by the client APIs to generate the smart contract interface.\n *\n * See the [Smart Contract APIs](https://neo-one.io/docs/smart-contract-apis) chapter of the main guide for more information.\n */\nexport interface ABI {\n  /**\n   * Specification of the smart contract functions.\n   */\n  readonly functions: readonly ABIFunction[];\n  /**\n   * Specification of the smart contract events.\n   */\n  readonly events?: readonly ABIEvent[];\n}\n\ndeclare const OpaqueTagSymbol: unique symbol;\n/**\n * `ForwardValue` represents a value that's intended to be forwarded to another smart contract method. This object is not meant to be directly constructued, instead one should produce them via the automatically generated `forward<method>Args` methods.\n *\n * See the [Forward Values](https://neo-one.io/docs/forward-values) chapter of the advanced guide for more information.\n */\nexport interface ForwardValue {\n  readonly name: string;\n  readonly converted: ScriptBuilderParam | undefined;\n  readonly param: Param | undefined;\n  readonly [OpaqueTagSymbol]: unique symbol;\n}\n\nexport interface ScriptBuilderParamArray extends Array<ScriptBuilderParam | undefined> {}\nexport interface ScriptBuilderParamMap extends Map<ScriptBuilderParam | undefined, ScriptBuilderParam | undefined> {}\nexport interface ScriptBuilderParamObject {\n  readonly [key: string]: ScriptBuilderParam;\n}\n/**\n * `Param` is converted internally via the `ABI` definition into a `ScriptBuilderParam` which is used to actually invoke the method on the smart contract.\n */\nexport type ScriptBuilderParam =\n  | BN\n  | number\n  | UInt160\n  | UInt256\n  | ECPoint\n  | string\n  | Buffer\n  | boolean\n  | ScriptBuilderParamArray\n  | ScriptBuilderParamMap\n  | ScriptBuilderParamObject;\n\nexport interface ParamToCallbacks<T> {\n  readonly undefined: () => T;\n  readonly array: (param: ScriptBuilderParamArray) => T;\n  readonly map: (param: ScriptBuilderParamMap) => T;\n  readonly uInt160: (param: UInt160) => T;\n  readonly uInt256: (param: UInt256) => T;\n  readonly ecPoint: (param: ECPoint) => T;\n  readonly number: (param: number | BN) => T;\n  readonly string: (param: string) => T;\n  readonly boolean: (param: boolean) => T;\n  readonly buffer: (param: Buffer) => T;\n  readonly object: (param: ScriptBuilderParamObject) => T;\n}\n\nexport interface ParamArray extends ReadonlyArray<Param> {}\nexport interface ParamMap extends ReadonlyMap<Param, Param> {}\nexport interface ParamObject {\n  readonly [key: string]: Param;\n}\n/**\n * Valid parameter types for a smart contract method.\n */\nexport type Param =\n  | undefined\n  | BigNumber\n  | BufferString\n  | AddressString\n  | Hash256String\n  | PublicKeyString\n  | boolean\n  | ParamArray\n  | ParamMap\n  | ParamObject\n  | ForwardValue;\nexport interface ReturnArray extends ReadonlyArray<Return> {}\nexport interface ReturnMap extends ReadonlyMap<Return, Return> {}\nexport interface ReturnObject {\n  readonly [key: string]: Return;\n}\n/**\n * Possible return types for a smart contract method.\n */\nexport type Return =\n  | undefined\n  | BigNumber\n  | BufferString\n  | AddressString\n  | Hash256String\n  | PublicKeyString\n  | boolean\n  | ReturnArray\n  | ReturnMap\n  | ReturnObject\n  | ContractParameter;\n\n/**\n * Constants that describe the type of `Asset`.\n *\n * The two most important ones are `'Governing'` and `'Utility'` which are reserved for NEO and GAS respectively.\n */\nexport type AssetType = 'Credit' | 'Duty' | 'Governing' | 'Utility' | 'Currency' | 'Share' | 'Invoice' | 'Token';\n\n/**\n * Attributes of a first class asset.\n *\n * Users will typically only interact with the NEO and GAS `Asset`s.\n *\n * @example\n *\n * const asset = readClient.getAsset(Hash256.NEO);\n * const neoAmount = asset.amount;\n *\n */\nexport interface Asset {\n  /**\n   * `Hash256String` of this `Asset`.\n   */\n  readonly hash: Hash256String;\n  /**\n   * Type of the `Asset`\n   *\n   * @see AssetType\n   */\n  readonly type: AssetType;\n  /**\n   * User configurable name of the `Asset`\n   */\n  readonly name: string;\n  /**\n   * Total possible supply of the `Asset`\n   */\n  readonly amount: BigNumber;\n  /**\n   * Amount currently available of the `Asset`\n   */\n  readonly available: BigNumber;\n  /**\n   * Precision (number of decimal places) of the `Asset`\n   */\n  readonly precision: number;\n  /**\n   * Owner of the `Asset`.\n   */\n  readonly owner: PublicKeyString;\n  /**\n   * Admin of the `Asset`.\n   */\n  readonly admin: AddressString;\n  /**\n   * Issuer of the `Asset`.\n   */\n  readonly issuer: AddressString;\n  /**\n   * Unix timestamp of when the `Asset` must be renewed by or it expires.\n   */\n  readonly expiration: number;\n  /**\n   * `true` if no transfers are allowed with the `Asset`.\n   */\n  readonly frozen: boolean;\n}\n\n/**\n * Attributes of a deployed smart contract.\n */\nexport interface Contract {\n  /**\n   * NEO protocol version.\n   */\n  readonly version: number;\n  /**\n   * `AddressString` of this `Contract`.\n   */\n  readonly address: AddressString;\n  /**\n   * `Contract` code.\n   */\n  readonly script: BufferString;\n  /**\n   * Expected parameters of this `Contract`\n   */\n  readonly parameters: readonly ContractParameterType[];\n  /**\n   * Return type of this `Contract`\n   */\n  readonly returnType: ContractParameterType;\n  /**\n   * Name of this `Contract`. For informational purposes only.\n   */\n  readonly name: string;\n  /**\n   * Version of this `Contract`. For informational purposes only.\n   */\n  readonly codeVersion: string;\n  /**\n   * Author of this `Contract`. For informational purposes only.\n   */\n  readonly author: string;\n  /**\n   * Email of this `Contract`. For informational purposes only.\n   */\n  readonly email: string;\n  /**\n   * Description of this `Contract`. For informational purposes only.\n   */\n  readonly description: string;\n  /**\n   * `true` if this `Contract` can use storage.\n   */\n  readonly storage: boolean;\n  /**\n   * `true` if this `Contract` can make dynamic invocations.\n   */\n  readonly dynamicInvoke: boolean;\n  /**\n   * `true` if this `Contract` accepts first-class `Asset`s and/or tokens.\n   */\n  readonly payable: boolean;\n}\n\n/* BEGIN LOW-LEVEL API */\n\n/**\n * Invocation stack item for a `Signature`.\n *\n * @see ContractParameter\n * @see SignatureString\n */\nexport interface SignatureContractParameter {\n  /**\n   * `type` distinguishes `SignatureContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Signature';\n  /**\n   * Raw signature string.\n   */\n  readonly value: SignatureString;\n}\n\n/**\n * Invocation stack item for a `boolean`.\n *\n * @see ContractParameter\n */\nexport interface BooleanContractParameter {\n  /**\n   * `type` distinguishes `BooleanContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Boolean';\n  /**\n   * Raw boolean value.\n   */\n  readonly value: boolean;\n}\n\n/**\n * Invocation stack item for a `BN`.\n *\n * Note that unlike most of the client APIs, we use a `BN` instead of a `BigNumber` here to indicate that this is an integer value.\n * For example, an `IntegerContractParameter` that represents a NEO value of 10 would be a `new BN(10_00000000)`.\n *\n * @see ContractParameter\n */\nexport interface IntegerContractParameter {\n  /**\n   * `type` distinguishes `IntegerContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Integer';\n  /**\n   * Always an integer. This value is processed using the ABI's `decimals` specification into a corresponding `BigNumber`.\n   */\n  readonly value: BN;\n}\n\n/**\n * Invocation stack item for an `Address`.\n *\n * @see ContractParameter\n * @see AddressString\n */\nexport interface AddressContractParameter {\n  /**\n   * `type` distinguishes `AddressContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Address';\n  /**\n   * NEO address in base58 encoded string format.\n   */\n  readonly value: AddressString;\n}\n\n/**\n * Invocation stack item for a `Hash256`.\n *\n * @see ContractParameter\n * @see Hash256String\n */\nexport interface Hash256ContractParameter {\n  /**\n   * `type` distinguishes `Hash256ContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Hash256';\n  /**\n   * NEO `Hash256` encoded as a string.\n   */\n  readonly value: Hash256String;\n}\n\n/**\n * Invocation stack item for a `Buffer`.\n *\n * @see ContractParameter\n * @see BufferString\n */\nexport interface BufferContractParameter {\n  /**\n   * `type` distinguishes `BufferContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Buffer';\n  /**\n   * Hex encoded `Buffer` string.\n   */\n  readonly value: BufferString;\n}\n\n/**\n * Invocation stack item for a `PublicKey`.\n *\n * @see ContractParameter\n * @see PublicKeyString\n */\nexport interface PublicKeyContractParameter {\n  /**\n   * `type` distinguishes `PublicKeyContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'PublicKey';\n  /**\n   * String format of a public key.\n   */\n  readonly value: PublicKeyString;\n}\n\n/**\n * Invocation stack item for a `string`.\n *\n * @see ContractParameter\n */\nexport interface StringContractParameter {\n  /**\n   * `type` distinguishes `StringContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'String';\n  /**\n   * Raw string value.\n   */\n  readonly value: string;\n}\n\n/**\n * Invocation stack item for an `Array`.\n *\n * @see ContractParameter\n */\nexport interface ArrayContractParameter {\n  /**\n   * `type` distinguishes `ArrayContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Array';\n  /**\n   * An array of `ContractParameter`s.\n   */\n  readonly value: readonly ContractParameter[];\n}\n\n/**\n * Invocation stack item for a `Map`.\n *\n * @see ContractParameter\n */\nexport interface MapContractParameter {\n  /**\n   * `type` distinguishes `MapContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Map';\n  /**\n   * A map of `ContractParameter` to `ContractParameter`. Represented as an array of pairs because JavaScript `Map` keys do not have the same semantics as the NEO VM.\n   */\n  readonly value: ReadonlyArray<readonly [ContractParameter, ContractParameter]>;\n}\n\n/**\n * Invocation stack item for anything other than the other valid contract parameters.\n *\n * Examples include the `Block` builtin. If these builtins remain on the stack after invocation, for example, as a return value, then they will be serialized as this empty interface.\n *\n * @see ContractParameter\n */\nexport interface InteropInterfaceContractParameter {\n  /**\n   * `type` distinguishes `InteropInterfaceContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'InteropInterface';\n}\n\n/**\n * Invocation stack item for `void`.\n *\n * @see ContractParameter\n */\nexport interface VoidContractParameter {\n  /**\n   * `type` distinguishes `VoidContractParameter` from other `ContractParameter` object types.\n   */\n  readonly type: 'Void';\n}\n\n/**\n * `ContractParameter`s are the serialized stack items of an invocation. These are typically the raw results of an invocation, but they may appear in other raw contexts.\n *\n * Low-level API for advanced usage only.\n */\nexport type ContractParameter =\n  | SignatureContractParameter\n  | BooleanContractParameter\n  | IntegerContractParameter\n  | AddressContractParameter\n  | Hash256ContractParameter\n  | BufferContractParameter\n  | PublicKeyContractParameter\n  | StringContractParameter\n  | ArrayContractParameter\n  | MapContractParameter\n  | InteropInterfaceContractParameter\n  | VoidContractParameter;\n\n/**\n * All of the possible `type`s that a `ContractParameter` may have.\n */\nexport type ContractParameterType = ContractParameter['type'];\n\n/**\n * Raw result of a successful invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawInvocationResultSuccess extends RawInvocationResultBase {\n  /**\n   * Indicates a successful invocation.\n   */\n  readonly state: 'HALT';\n  /**\n   * The state of the NEO VM after execution. Typically has one `ContractParameter` which is the return value of the method invoked.\n   */\n  readonly stack: readonly ContractParameter[];\n}\n\n/**\n * Raw result of a failed invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawInvocationResultError extends RawInvocationResultBase {\n  /**\n   * Indicates a failed invocation.\n   */\n  readonly state: 'FAULT';\n  /**\n   * The state of the NEO VM after execution. Typically has one `ContractParameter` which is the return value of the method invoked.\n   */\n  readonly stack: readonly ContractParameter[];\n  /**\n   * A descriptive message indicating why the invocation failed.\n   */\n  readonly message: string;\n}\n\n/**\n * Raw result of an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport type RawInvocationResult = RawInvocationResultSuccess | RawInvocationResultError;\n\n/**\n * Base properties of `Event`s and `Log`s as well as their raw counterparts, `RawNotification` and `RawLog`, respectively.\n */\nexport interface RawActionBase {\n  /**\n   * NEO network version number.\n   */\n  readonly version: number;\n  /**\n   * Index of the block this action was emitted in.\n   */\n  readonly blockIndex: number;\n  /**\n   * Hash of the block this action was emitted in.\n   */\n  readonly blockHash: Hash256String;\n  /**\n   * Index of the transaction within the block this action was emitted in.\n   */\n  readonly transactionIndex: number;\n  /**\n   * Hash of the transaction within the block this action was emitted in.\n   */\n  readonly transactionHash: Hash256String;\n  /**\n   * Ordered index of the action of when it occurred within the transaction.\n   */\n  readonly index: number;\n  /**\n   * Ordered globally unique index of the action.\n   */\n  readonly globalIndex: BigNumber;\n  /**\n   * Address of the smart contract that this action occurred in.\n   */\n  readonly address: AddressString;\n}\n\n/**\n * Raw notification emitted during an invocation. This is the unprocessed counterpart to an `Event`.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawNotification extends RawActionBase {\n  /**\n   * `type` differentiates the `RawNotification` object from other `RawAction` objects, i.e. `RawLog`.\n   */\n  readonly type: 'Notification';\n  /**\n   * The raw arguments of the notifications. These are processed into the `parameters` parameter of the `Event` object using the `ABI`.\n   */\n  readonly args: readonly ContractParameter[];\n}\n\n/**\n * Raw log emitted during an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawLog extends RawActionBase {\n  /**\n   * `type` differentiates the `RawLog` object from other `RawAction` objects, i.e. `RawNotification`.\n   */\n  readonly type: 'Log';\n  /**\n   * The raw message. This is unprocessed in the `message`.\n   */\n  readonly message: string;\n}\n\n/**\n * Raw action emitted during an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport type RawAction = RawNotification | RawLog;\n\n/**\n * Base properties of `RawStorageChange`s.\n */\nexport interface RawStorageChangeBase {\n  /**\n   * Address of the smart contract whose storage changed.\n   */\n  readonly address: AddressString;\n  /**\n   * Key of the storage change.\n   */\n  readonly key: BufferString;\n}\n\n/**\n * Common properties of `RawStorageChangeAdd` and `RawStorageChangeModify`.\n */\nexport interface RawStorageChangeAddModifyBase extends RawStorageChangeBase {\n  /**\n   * Value of the storage change.\n   */\n  readonly value: BufferString;\n}\n\n/**\n * Raw storage addition during an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawStorageChangeAdd extends RawStorageChangeAddModifyBase {\n  /**\n   * `type` differentiates the `RawStorageChangeAdd` object from other `RawStorageChange` objects.\n   */\n  readonly type: 'Add';\n}\n\n/**\n * Raw storage modification during an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawStorageChangeModify extends RawStorageChangeAddModifyBase {\n  /**\n   * `type` differentiates the `RawStorageChangeModify` object from other `RawStorageChange` objects.\n   */\n  readonly type: 'Modify';\n}\n\n/**\n * Raw storage deletion during an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawStorageChangeDelete extends RawStorageChangeBase {\n  /**\n   * `type` differentiates the `RawStorageChangeDelete` object from other `RawStorageChange` objects.\n   */\n  readonly type: 'Delete';\n}\n\n/**\n * Raw storage change which occurred an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport type RawStorageChange = RawStorageChangeAdd | RawStorageChangeModify | RawStorageChangeDelete;\n\n/**\n * Raw receipt of an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawCallReceipt {\n  readonly result: RawInvocationResult;\n  readonly actions: readonly RawAction[];\n}\n\n/**\n * Raw receipt of an invocation.\n *\n * Low-level API for advanced usage only.\n */\nexport interface RawInvokeReceipt extends TransactionReceipt {\n  readonly result: RawInvocationResult;\n  readonly actions: readonly RawAction[];\n}\n\n/**\n * Smart contract source maps.\n */\nexport interface SourceMaps {\n  /**\n   * `RawSourceMap` for the contract at `address`\n   */\n  readonly [address: string]: RawSourceMap;\n}\n\n/**\n * Encodes an error returned by the JSONRPC server.\n */\nexport interface JSONRPCErrorResponse {\n  /**\n   * Error code.\n   */\n  readonly code: number;\n  /**\n   * Error message.\n   */\n  readonly message: string;\n  /**\n   * Additional data, typically `undefined`.\n   */\n  readonly data?: any;\n}\n\n/**\n * An individual verification and the associated data.\n */\nexport interface VerifyScriptResult {\n  /**\n   * `undefined` if the verification passed, otherwise a message that describes the failure.\n   */\n  readonly failureMessage?: string;\n  /**\n   * The smart contract this result is associated with.\n   */\n  readonly address: AddressString;\n  /**\n   * The specific `Witness` that was checked.\n   */\n  readonly witness: Witness;\n  /**\n   * The actions emitted during the verification.\n   */\n  readonly actions: readonly RawAction[];\n}\n\n/**\n * Interface which describes the result of verification invocation.\n */\nexport interface VerifyTransactionResult {\n  /**\n   * All verifications that happened during the relay of the `Transaction`.\n   */\n  readonly verifications: readonly VerifyScriptResult[];\n}\n\n/**\n * Raw result of relaying a `Transaction`. Further consumed and processed by `LocalUserAccountProvider` and `ABI`.\n */\nexport interface RelayTransactionResult {\n  /**\n   * Relayed `Transaction`\n   */\n  readonly transaction: Transaction;\n  /**\n   * Verification result.\n   */\n  readonly verifyResult?: VerifyTransactionResult;\n}\n\n/**\n * Additional raw data that is typically processed by an `ABI` for the client APIs.\n */\nexport interface RawInvocationData {\n  /**\n   * `Asset` created by the invocation.\n   */\n  readonly asset?: Asset;\n  /**\n   * `Contract`s created by the invocation.\n   */\n  readonly contracts: readonly Contract[];\n  /**\n   * `Contract`s deleted by the invocation.\n   */\n  readonly deletedContractAddresses: readonly AddressString[];\n  /**\n   * `Contract`s migrated (upgraded) by the invocation.\n   */\n  readonly migratedContractAddresses: ReadonlyArray<readonly [AddressString, AddressString]>;\n  /**\n   * Raw result of an invocation.\n   */\n  readonly result: RawInvocationResult;\n  /**\n   * Raw actions emitted by the invocation.\n   */\n  readonly actions: readonly RawAction[];\n  /**\n   * Storage changes that occurred during this invocation\n   */\n  readonly storageChanges: readonly RawStorageChange[];\n}\n\nexport interface ParamJSONArray extends ReadonlyArray<ParamJSON> {}\n/**\n * JSON format of `Param`s that are added as an `Attribute` tag.\n */\nexport type ParamJSON =\n  | undefined\n  | string\n  | BufferString\n  | AddressString\n  | Hash256String\n  | PublicKeyString\n  | boolean\n  | ParamJSONArray;\n\n/**\n * Constant settings used to initialize the client APIs.\n */\nexport interface NetworkSettings {\n  readonly issueGASFee: BigNumber;\n}\n\n/**\n * Peers connected to the node.\n */\nexport interface Peer {\n  readonly address: string;\n  readonly port: number;\n}\n\n/**\n * Raw storage value\n */\nexport interface StorageItem {\n  readonly address: string;\n  readonly key: string;\n  readonly value: string;\n}\n\n/* END LOW-LEVEL API */\n","// tslint:disable no-any no-array-mutation\nimport ECKey from '@neo-one/ec-key';\nimport { Constructor, utils } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport base58 from 'bs58';\nimport xor from 'buffer-xor';\nimport { createCipheriv, createDecipheriv, createHash, createHmac, randomBytes } from 'crypto';\nimport { curves, ec as EC } from 'elliptic';\nimport scrypt from 'scrypt-js';\nimport WIF from 'wif';\nimport { common, ECPoint, InvalidFormatError, PrivateKey, UInt160, UInt256 } from './common';\nimport {\n  Base58CheckError,\n  InvalidAddressError,\n  InvalidBIP32ChildIndexError,\n  InvalidBIP32ExtendedKeyError,\n  InvalidBIP32HardenedError,\n  InvalidBIP32SerializePrivateNodeError,\n  InvalidBIP32VersionError,\n  InvalidNumberOfKeysError,\n  InvalidPrivateKeyError,\n  InvalidSignatureError,\n  InvalidSignaturesError,\n  TooManyPublicKeysError,\n} from './errors';\nimport { Op, sha256 as sha256In, WitnessModel } from './models';\nimport { p256 } from './precomputed';\nimport { ScriptBuilder } from './ScriptBuilder';\n\n// tslint:disable-next-line no-let\nlet ecCache: EC | undefined;\nconst ec = () => {\n  if (ecCache === undefined) {\n    ecCache = new EC(new curves.PresetCurve(p256));\n  }\n\n  return ecCache;\n};\n\nconst sha1 = (value: Buffer): Buffer =>\n  createHash('sha1')\n    .update(value)\n    .digest();\n\nconst sha256 = sha256In;\n\nconst rmd160 = (value: Buffer): Buffer =>\n  createHash(process.versions.hasOwnProperty('electron') ? 'ripemd160' : 'rmd160')\n    .update(value)\n    .digest();\n\nconst hash160 = (value: Buffer): UInt160 => common.bufferToUInt160(rmd160(sha256(value)));\n\nconst hash256 = (value: Buffer): UInt256 => common.bufferToUInt256(sha256(sha256(value)));\n\nconst hmacSha512 = (key: Buffer | string, data: Buffer) =>\n  createHmac('sha512', key)\n    .update(data)\n    .digest();\n\nconst sign = ({ message, privateKey }: { readonly message: Buffer; readonly privateKey: PrivateKey }): Buffer => {\n  const sig = ec().sign(sha256(message), common.privateKeyToBuffer(privateKey));\n\n  return Buffer.concat([sig.r.toArrayLike(Buffer, 'be', 32), sig.s.toArrayLike(Buffer, 'be', 32)]);\n};\n\n// tslint:disable readonly-array\n/* istanbul ignore next */\nconst rmPadding = (buf: number[]): number[] => {\n  let i = 0;\n  const len = buf.length - 1;\n  // tslint:disable-next-line\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i += 1;\n  }\n  if (i === 0) {\n    return buf;\n  }\n\n  return buf.slice(i);\n};\n/* istanbul ignore next */\nconst constructLength = (arr: number[], len: number): void => {\n  if (len < 0x80) {\n    arr.push(len);\n\n    return;\n  }\n  // tslint:disable-next-line\n  let octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);\n  // tslint:disable-next-line\n  arr.push(octets | 0x80);\n  // tslint:disable-next-line\n  while (--octets) {\n    // tslint:disable-next-line\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n};\n\nconst verify = ({\n  message,\n  signature: signatureIn,\n  publicKey,\n}: {\n  readonly message: Buffer;\n  readonly signature: Buffer;\n  readonly publicKey: ECPoint;\n}) => {\n  if (signatureIn.length !== 64) {\n    throw new InvalidSignatureError(signatureIn.length);\n  }\n  let r = [...signatureIn.slice(0, 32)];\n  let s = [...signatureIn.slice(32)];\n\n  // tslint:disable-next-line\n  if (r[0] & 0x80) {\n    /* istanbul ignore next */\n    r = [0].concat(r);\n  }\n  // tslint:disable-next-line\n  if (s[0] & 0x80) {\n    s = [0].concat(s);\n  }\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  // tslint:disable-next-line\n  while (s.length > 0 && !s[0] && !(s[1] & 0x80)) {\n    /* istanbul ignore next */\n    s = s.slice(1);\n  }\n  let arr = [0x02];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  const backHalf = arr.concat(s);\n  const res = [0x30];\n  constructLength(res, backHalf.length);\n  const signature = Buffer.from(res.concat(backHalf));\n\n  const key = new ECKey({\n    crv: 'P-256',\n    publicKey: Buffer.from(\n      ec()\n        .keyFromPublic(publicKey)\n        .getPublic(false, 'hex'),\n      'hex',\n    ),\n  });\n\n  return (key.createVerify('SHA256').update(message) as any).verify(signature);\n};\n// tslint:enable readonly-array\n\nconst toECPointFromKeyPair = (pair: EC.KeyPair): ECPoint =>\n  common.bufferToECPoint(Buffer.from(pair.getPublic(true, 'hex'), 'hex'));\n\nconst mutablePublicKeyCache: { [K in string]?: ECPoint } = {};\nconst addPublicKey = (privateKey: PrivateKey, publicKey: ECPoint) => {\n  mutablePublicKeyCache[common.privateKeyToString(privateKey)] = publicKey;\n};\nconst privateKeyToPublicKey = (privateKey: PrivateKey): ECPoint => {\n  const privateKeyHex = common.privateKeyToString(privateKey);\n  let publicKey = mutablePublicKeyCache[privateKeyHex];\n  if (publicKey === undefined) {\n    const key = ec().keyFromPrivate(common.privateKeyToBuffer(privateKey));\n    key.getPublic(true, 'hex');\n    const { result } = key.validate();\n    /* istanbul ignore next */\n    if (!result) {\n      throw new InvalidPrivateKeyError(privateKey);\n    }\n\n    mutablePublicKeyCache[privateKeyHex] = publicKey = toECPointFromKeyPair(key);\n  }\n\n  return publicKey;\n};\n\nconst createKeyPair = (): { readonly privateKey: PrivateKey; readonly publicKey: ECPoint } => {\n  const key = ec().genKeyPair();\n  const validation = key.validate();\n\n  if (!validation.result) {\n    return createKeyPair();\n  }\n\n  return {\n    privateKey: common.bufferToPrivateKey(key.getPrivate().toArrayLike(Buffer, 'be')),\n    publicKey: toECPointFromKeyPair(key),\n  };\n};\n\nconst createPrivateKey = (): PrivateKey => common.bufferToPrivateKey(randomBytes(32));\n\nconst toScriptHash = hash160;\n\n// Takes various formats and converts to standard ECPoint\nconst toECPoint = (publicKey: Buffer): ECPoint => toECPointFromKeyPair(ec().keyFromPublic(publicKey));\n\nconst base58Checksum = (buffer: Buffer): Buffer => common.uInt256ToBuffer(hash256(buffer)).slice(0, 4);\n\nconst base58CheckEncode = (buffer: Buffer): string => {\n  const checksum = base58Checksum(buffer);\n\n  return base58.encode(Buffer.concat([buffer, checksum]));\n};\n\nconst base58CheckDecode = (value: string): Buffer => {\n  const buffer = Buffer.from(base58.decode(value));\n  const payload = buffer.slice(0, -4);\n  const checksum = buffer.slice(-4);\n  const payloadChecksum = base58Checksum(payload);\n  if (!checksum.equals(payloadChecksum)) {\n    throw new Base58CheckError(value);\n  }\n\n  return payload;\n};\n\nconst scriptHashToAddress = ({\n  addressVersion,\n  scriptHash,\n}: {\n  readonly addressVersion: number;\n  readonly scriptHash: UInt160;\n}): string => {\n  const mutableBuffer = Buffer.allocUnsafe(21);\n  mutableBuffer[0] = addressVersion;\n  common.uInt160ToBuffer(scriptHash).copy(mutableBuffer, 1);\n\n  return base58CheckEncode(mutableBuffer);\n};\n\nconst addressToScriptHash = ({\n  addressVersion,\n  address,\n}: {\n  readonly addressVersion: number;\n  readonly address: string;\n}): UInt160 => {\n  const decodedAddress = base58CheckDecode(address);\n  if (decodedAddress.length !== 21 || decodedAddress[0] !== addressVersion) {\n    throw new InvalidAddressError(address);\n  }\n\n  return common.bufferToUInt160(decodedAddress.slice(1));\n};\n\nconst createInvocationScriptForSignature = (signature: Buffer): Buffer => {\n  const builder = new ScriptBuilder();\n  builder.emitPush(signature);\n\n  return builder.build();\n};\n\nconst createInvocationScript = (message: Buffer, privateKey: PrivateKey): Buffer =>\n  createInvocationScriptForSignature(sign({ message, privateKey }));\n\nconst createVerificationScript = (publicKey: ECPoint): Buffer => {\n  const builder = new ScriptBuilder();\n  builder.emitPushECPoint(publicKey);\n  builder.emitOp('CHECKSIG');\n\n  return builder.build();\n};\n\nconst createWitnessForSignature = <TWitness extends WitnessModel>(\n  signature: Buffer,\n  publicKey: ECPoint,\n  Witness: Constructor<TWitness>,\n): TWitness => {\n  const verification = createVerificationScript(publicKey);\n  const invocation = createInvocationScriptForSignature(signature);\n\n  return new Witness({ verification, invocation });\n};\n\nconst createWitness = <TWitness extends WitnessModel>(\n  message: Buffer,\n  privateKey: PrivateKey,\n  Witness: Constructor<TWitness>,\n): TWitness => createWitnessForSignature(sign({ message, privateKey }), privateKeyToPublicKey(privateKey), Witness);\n\nconst getVerificationScriptHash = (publicKey: ECPoint): UInt160 => toScriptHash(createVerificationScript(publicKey));\n\nconst compareKeys = (a: EC.KeyPair, b: EC.KeyPair): number => {\n  const aPublic = a.getPublic();\n  const bPublic = b.getPublic();\n  const result = aPublic.getX().cmp(bPublic.getX());\n  if (result !== 0) {\n    return result;\n  }\n\n  /* istanbul ignore next */\n  return aPublic.getY().cmp(bPublic.getY());\n};\n\nconst sortKeys = (publicKeys: readonly ECPoint[]): readonly ECPoint[] =>\n  publicKeys\n    .map((publicKey) => ec().keyFromPublic(publicKey))\n    .sort(compareKeys)\n    .map(toECPointFromKeyPair);\n\nconst createMultiSignatureVerificationScript = (mIn: number, publicKeys: readonly ECPoint[]) => {\n  const m = Math.floor(mIn);\n  if (m < 1 || m > publicKeys.length) {\n    throw new InvalidNumberOfKeysError(m, publicKeys.length);\n  }\n\n  if (publicKeys.length > 1024) {\n    throw new TooManyPublicKeysError(publicKeys.length);\n  }\n\n  const builder = new ScriptBuilder();\n  builder.emitPushInt(m);\n  const publicKeysSorted = publicKeys.length === 1 ? publicKeys : sortKeys(publicKeys);\n  publicKeysSorted.forEach((ecPoint) => {\n    builder.emitPushECPoint(ecPoint);\n  });\n  builder.emitPushInt(publicKeysSorted.length);\n  builder.emitOp('CHECKMULTISIG');\n\n  return builder.build();\n};\n\nconst createMultiSignatureInvocationScript = (signatures: readonly Buffer[]): Buffer => {\n  const builder = new ScriptBuilder();\n  signatures.forEach((signature) => {\n    builder.emitPush(signature);\n  });\n\n  return builder.build();\n};\n\nconst createMultiSignatureWitness = <TWitness extends WitnessModel>(\n  mIn: number,\n  publicKeys: readonly ECPoint[],\n  publicKeyToSignature: { readonly [key: string]: Buffer },\n  Witness: Constructor<TWitness>,\n): TWitness => {\n  const m = Math.floor(mIn);\n  const publicKeysSorted = publicKeys.length === 1 ? publicKeys : sortKeys(publicKeys);\n  const signatures = publicKeysSorted\n    .map((publicKey) => publicKeyToSignature[common.ecPointToHex(publicKey)])\n    .filter(utils.notNull);\n  if (signatures.length !== m) {\n    throw new InvalidSignaturesError(m, signatures.length);\n  }\n\n  const verification = createMultiSignatureVerificationScript(m, publicKeysSorted);\n  const invocation = createMultiSignatureInvocationScript(signatures);\n\n  return new Witness({ verification, invocation });\n};\n\nconst getConsensusAddress = (validators: readonly ECPoint[]): UInt160 =>\n  toScriptHash(\n    createMultiSignatureVerificationScript(Math.floor(validators.length - (validators.length - 1) / 3), validators),\n  );\n\nconst wifToPrivateKey = (wif: string, privateKeyVersion: number): PrivateKey => {\n  const privateKeyDecoded = base58CheckDecode(wif);\n\n  if (privateKeyDecoded.length !== 34 || privateKeyDecoded[0] !== privateKeyVersion || privateKeyDecoded[33] !== 0x01) {\n    /* istanbul ignore next */\n    throw new InvalidFormatError('Private Key was invalid when decoded from WIF.');\n  }\n\n  return common.bufferToPrivateKey(privateKeyDecoded.slice(1, 33));\n};\n\nconst privateKeyToWIF = (privateKey: PrivateKey, privateKeyVersion: number): string =>\n  WIF.encode(privateKeyVersion, common.privateKeyToBuffer(privateKey), true);\n\nconst publicKeyToScriptHash = getVerificationScriptHash;\n\nconst privateKeyToScriptHash = (privateKey: PrivateKey): UInt160 =>\n  publicKeyToScriptHash(privateKeyToPublicKey(privateKey));\n\nconst privateKeyToAddress = ({\n  addressVersion,\n  privateKey,\n}: {\n  readonly addressVersion: number;\n  readonly privateKey: PrivateKey;\n}): string =>\n  scriptHashToAddress({\n    addressVersion,\n    scriptHash: privateKeyToScriptHash(privateKey),\n  });\n\nconst NEP2_KDFPARAMS = {\n  N: 16384,\n  r: 8,\n  p: 8,\n  dklen: 64,\n};\n\nconst NEP2_ZERO = 0x01;\nconst NEP2_ONE = 0x42;\nconst NEP2_TWO = 0xe0;\nconst NEP2_CIPHER = 'aes-256-ecb';\n\nconst getNEP2Derived = async ({\n  password,\n  salt,\n}: {\n  readonly password: string;\n  readonly salt: Buffer;\n}): Promise<Buffer> =>\n  new Promise<Buffer>((resolve, reject) =>\n    scrypt(\n      Buffer.from(password.normalize('NFKC'), 'utf8'),\n      salt,\n      NEP2_KDFPARAMS.N,\n      NEP2_KDFPARAMS.r,\n      NEP2_KDFPARAMS.p,\n      NEP2_KDFPARAMS.dklen,\n      (error, _progress, key) => {\n        /* istanbul ignore next */\n        if (error != undefined) {\n          reject(error);\n        } else if (key) {\n          resolve(Buffer.from([...key]));\n        }\n      },\n    ),\n  );\n\nconst getNEP2Salt = ({\n  addressVersion,\n  privateKey,\n}: {\n  readonly addressVersion: number;\n  readonly privateKey: PrivateKey;\n}) => {\n  const address = privateKeyToAddress({\n    addressVersion,\n    privateKey,\n  });\n\n  return common.uInt256ToBuffer(hash256(Buffer.from(address, 'latin1'))).slice(0, 4);\n};\n\nconst encryptNEP2 = async ({\n  addressVersion,\n  password,\n  privateKey,\n}: {\n  readonly addressVersion: number;\n  readonly password: string;\n  readonly privateKey: PrivateKey;\n}): Promise<string> => {\n  const salt = getNEP2Salt({ addressVersion, privateKey });\n\n  const derived = await getNEP2Derived({ password, salt });\n  const derived1 = derived.slice(0, 32);\n  const derived2 = derived.slice(32, 64);\n\n  const cipher = createCipheriv(NEP2_CIPHER, derived2, Buffer.alloc(0, 0));\n\n  cipher.setAutoPadding(false);\n  cipher.end(xor(privateKey, derived1));\n  const ciphertext = cipher.read() as Buffer;\n\n  const result = Buffer.alloc(7 + 32, 0);\n  result.writeUInt8(NEP2_ZERO, 0);\n  result.writeUInt8(NEP2_ONE, 1);\n  result.writeUInt8(NEP2_TWO, 2);\n  salt.copy(result, 3);\n  ciphertext.copy(result, 7);\n\n  return base58CheckEncode(result);\n};\n\nconst isNEP2 = (encryptedKey: string): boolean => {\n  try {\n    const decoded = base58CheckDecode(encryptedKey);\n\n    return (\n      decoded.length === 39 &&\n      decoded.readUInt8(0) === NEP2_ZERO &&\n      decoded.readUInt8(1) === NEP2_ONE &&\n      decoded.readUInt8(2) === NEP2_TWO\n    );\n  } catch {\n    return false;\n  }\n};\n\nconst decryptNEP2 = async ({\n  addressVersion,\n  encryptedKey,\n  password,\n}: {\n  readonly addressVersion: number;\n  readonly encryptedKey: string;\n  readonly password: string;\n}): Promise<PrivateKey> => {\n  const decoded = base58CheckDecode(encryptedKey);\n\n  if (\n    decoded.length !== 39 ||\n    decoded.readUInt8(0) !== NEP2_ZERO ||\n    decoded.readUInt8(1) !== NEP2_ONE ||\n    decoded.readUInt8(2) !== NEP2_TWO\n  ) {\n    /* istanbul ignore next */\n    throw new InvalidFormatError('Invalid NEP2 format when decoded from encryptedKey.');\n  }\n\n  const salt = decoded.slice(3, 7);\n  const derived = await getNEP2Derived({ password, salt });\n  const derived1 = derived.slice(0, 32);\n  const derived2 = derived.slice(32, 64);\n\n  const decipher = createDecipheriv(NEP2_CIPHER, derived2, Buffer.alloc(0, 0));\n\n  decipher.setAutoPadding(false);\n  decipher.end(decoded.slice(7, 7 + 32));\n  const plainText = decipher.read() as Buffer;\n\n  const privateKey = common.asPrivateKey(xor(plainText, derived1));\n\n  const addressSalt = getNEP2Salt({ addressVersion, privateKey });\n  if (!salt.equals(addressSalt)) {\n    /* istanbul ignore next */\n    throw new Error('Wrong passphrase.');\n  }\n\n  return common.bufferToPrivateKey(privateKey);\n};\n\n// tslint:disable\nconst isMultiSigContract = (script: Buffer) => {\n  let m = 0;\n  let n = 0;\n  let i = 0;\n  if (script.length < 37) return false;\n  if (script[i] > Op.PUSH16) return false;\n  if (script[i] < Op.PUSH1 && script[i] !== 1 && script[i] !== 2) return false;\n  switch (script[i]) {\n    case 1:\n      m = script[++i];\n      ++i;\n      break;\n    case 2:\n      m = script.readUInt16LE(++i);\n      i += 2;\n      break;\n    default:\n      m = script[i++] - 80;\n      break;\n  }\n  if (m < 1 || m > 1024) return false;\n  while (script[i] == 33) {\n    i += 34;\n    if (script.length <= i) return false;\n    ++n;\n  }\n  if (n < m || n > 1024) return false;\n  switch (script[i]) {\n    case 1:\n      if (n != script[++i]) return false;\n      ++i;\n      break;\n    case 2:\n      if (script.length < i + 3 || n != script.readUInt16LE(++i)) return false;\n      i += 2;\n      break;\n    default:\n      if (n != script[i++] - 80) return false;\n      break;\n  }\n  if (script[i++] != Op.CHECKMULTISIG) return false;\n  if (script.length != i) return false;\n  return true;\n};\n// tslint:enable\n\nconst isSignatureContract = (script: Buffer) => script.length === 35 && script[0] === 33 && script[34] === Op.CHECKSIG;\n\nconst isStandardContract = (script: Buffer) => isSignatureContract(script) || isMultiSigContract(script);\n\n// https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\nconst HARDENED_KEY_OFFSET = 0x80000000;\nconst EXTENDED_KEY_BYTES = 78;\n\n// According to https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki#node-serialization this isn't special.\nconst BIP32_VERSION = {\n  public: 0x0488b21e,\n  private: 0x0488ade4,\n};\n\nexport interface HDNode {\n  readonly privateKey?: PrivateKey;\n  readonly publicKey: Buffer;\n  readonly version: number;\n  readonly depth: number;\n  readonly parentFingerprint?: Buffer;\n  readonly index: number;\n  readonly chainCode: Buffer;\n}\n\nconst getFingerprint = (value: Buffer) => hash160(value).slice(0, 4);\n\nconst parseMasterSeed = (seedIn: Buffer | string): HDNode => {\n  const seed = seedIn instanceof Buffer ? seedIn : Buffer.from(seedIn, 'hex');\n  const hmac = hmacSha512('NEO Seed', seed);\n\n  const privateKey = hmac.slice(0, 32);\n  const publicKey = privateKeyToPublicKey(common.asPrivateKey(privateKey));\n  const chainCode = hmac.slice(32);\n\n  return {\n    privateKey: common.asPrivateKey(privateKey),\n    publicKey,\n    version: BIP32_VERSION.private,\n    depth: 0,\n    index: 0,\n    chainCode,\n  };\n};\n\nconst parseExtendedKey = (key: string): HDNode => {\n  const data = base58CheckDecode(key);\n\n  if (data.length !== EXTENDED_KEY_BYTES) {\n    throw new InvalidBIP32ExtendedKeyError(key);\n  }\n\n  const version = data.readUInt32BE(0);\n  const depth = data.readUInt8(4);\n  const parentFingerprintIn = data.slice(5, 9);\n  const parentFingerprint = parentFingerprintIn.readUInt32BE(0) === 0 ? undefined : parentFingerprintIn;\n  const index = data.readUInt32BE(9);\n  const chainCode = data.slice(13, 45);\n  const keyData = data.slice(45);\n  const privateKeyIn = keyData[0] === 0 ? keyData.slice(1) : undefined;\n  const publicKey = keyData[0] !== 0 ? keyData : undefined;\n\n  if (privateKeyIn !== undefined) {\n    if (version !== BIP32_VERSION.private) {\n      throw new InvalidBIP32VersionError(version, BIP32_VERSION.private);\n    }\n\n    const privateKey = common.asPrivateKey(privateKeyIn);\n\n    return {\n      privateKey,\n      publicKey: privateKeyToPublicKey(privateKey),\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n    };\n  }\n\n  if (publicKey !== undefined) {\n    if (version !== BIP32_VERSION.public) {\n      throw new InvalidBIP32VersionError(version, BIP32_VERSION.public);\n    }\n\n    return {\n      publicKey,\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n    };\n  }\n\n  throw new InvalidBIP32ExtendedKeyError(key);\n};\n\nconst deriveChildKey = (node: HDNode, index: number, hardened: boolean): HDNode => {\n  if (index >= HARDENED_KEY_OFFSET) {\n    throw new InvalidBIP32ChildIndexError(index);\n  }\n\n  const data: Buffer = Buffer.alloc(37);\n  if (hardened) {\n    if (!node.privateKey) {\n      throw new InvalidBIP32HardenedError();\n    }\n    node.privateKey.copy(data, 1);\n  } else {\n    node.publicKey.copy(data, 0);\n  }\n  data.writeUInt32BE(index, 33);\n\n  const sha = hmacSha512(node.chainCode, data);\n  const shaLeft = new BN(sha.slice(0, 32));\n  const shaRight = sha.slice(32);\n\n  if (shaLeft.cmp(ec().n as BN) >= 0) {\n    return deriveChildKey(node, index + 1, hardened);\n  }\n\n  if (node.privateKey) {\n    const childKeyPrivate = shaLeft.add(new BN(node.privateKey)).mod(ec().n as BN);\n\n    if (childKeyPrivate.cmp(new BN(0)) === 0) {\n      return deriveChildKey(node, index + 1, hardened);\n    }\n\n    const privateKey = common.asPrivateKey(childKeyPrivate.toArrayLike(Buffer, 'be', 32));\n    const publicKey = privateKeyToPublicKey(privateKey);\n\n    return {\n      depth: node.depth + 1,\n      privateKey,\n      publicKey,\n      chainCode: shaRight,\n      parentFingerprint: getFingerprint(node.publicKey),\n      index: hardened ? index + HARDENED_KEY_OFFSET : index,\n      version: BIP32_VERSION.private,\n    };\n  }\n  const parentKey = ec()\n    .keyFromPublic(node.publicKey)\n    .getPublic();\n\n  const childKey = ec()\n    .g.mul(shaLeft)\n    .add(parentKey);\n\n  if (childKey.isInfinity()) {\n    return deriveChildKey(node, index + 1, false);\n  }\n\n  const compressedChildKey = Buffer.from(childKey.encode(undefined, true));\n\n  return {\n    depth: node.depth + 1,\n    publicKey: compressedChildKey,\n    chainCode: shaRight,\n    parentFingerprint: getFingerprint(node.publicKey),\n    index,\n    version: BIP32_VERSION.public,\n  };\n};\n\n// privateNode lets you serialize to just the encoded public key, even on a private HDNode.\nconst serializeHDNode = (node: HDNode, privateNode = true): string => {\n  if (privateNode && node.privateKey === undefined) {\n    throw new InvalidBIP32SerializePrivateNodeError();\n  }\n\n  const data = Buffer.alloc(EXTENDED_KEY_BYTES);\n\n  data.writeUInt32BE(privateNode ? BIP32_VERSION.private : BIP32_VERSION.public, 0);\n  data.writeUInt8(node.depth, 4);\n\n  if (node.parentFingerprint !== undefined) {\n    node.parentFingerprint.copy(data, 5);\n  }\n\n  data.writeUInt32BE(node.index, 9);\n  node.chainCode.copy(data, 13);\n\n  const key = privateNode && node.privateKey !== undefined ? node.privateKey : node.publicKey;\n  key.copy(data, EXTENDED_KEY_BYTES - key.length);\n\n  const checksum = hash256(data).slice(0, 4);\n\n  return base58.encode(Buffer.concat([data, checksum]));\n};\n\nexport const crypto = {\n  addPublicKey,\n  sha1,\n  sha256,\n  hash160,\n  hash256,\n  sign,\n  verify,\n  privateKeyToPublicKey,\n  toScriptHash,\n  toECPoint,\n  createKeyPair,\n  scriptHashToAddress,\n  addressToScriptHash,\n  createInvocationScript,\n  createVerificationScript,\n  createWitness,\n  createWitnessForSignature,\n  getVerificationScriptHash,\n  createMultiSignatureInvocationScript,\n  createMultiSignatureVerificationScript,\n  createMultiSignatureWitness,\n  getConsensusAddress,\n  privateKeyToWIF,\n  wifToPrivateKey,\n  publicKeyToScriptHash,\n  privateKeyToScriptHash,\n  privateKeyToAddress,\n  isNEP2,\n  encryptNEP2,\n  decryptNEP2,\n  createPrivateKey,\n  isMultiSigContract,\n  isSignatureContract,\n  isStandardContract,\n  parseExtendedKey,\n  parseMasterSeed,\n  deriveChildKey,\n  serializeHDNode,\n};\n","import { BN } from 'bn.js';\nimport { common, ECPoint, ECPointHex, InvalidFormatError, UInt160, UInt160Hex, UInt256, UInt256Hex } from './common';\nimport { utils } from './utils';\n\ninterface OpOptions<T> {\n  readonly fn: (value: T, buffer: Buffer, pos: number) => void;\n  readonly length: number;\n  readonly value: T;\n}\n\n// tslint:disable-next-line: no-any\nclass Op<OpValue = any> {\n  public readonly fn: (value: OpValue, buffer: Buffer, pos: number) => void;\n  public readonly length: number;\n  public readonly value: OpValue;\n  private mutableNext?: Op;\n\n  public constructor(options: OpOptions<OpValue>) {\n    this.fn = options.fn;\n    this.length = options.length;\n    this.value = options.value;\n  }\n\n  public get next() {\n    return this.mutableNext;\n  }\n\n  // tslint:disable-next-line: no-any\n  public setNext<NextValue = any>(nextOp: Op<NextValue>) {\n    if (this.mutableNext !== undefined) {\n      throw new Error('next operation already set for this op.');\n    }\n    this.mutableNext = nextOp;\n  }\n}\n\nconst writeByte = (value: number, buffer: Buffer, position: number) => {\n  // tslint:disable-next-line: no-object-mutation no-bitwise\n  buffer[position] = value & 255;\n};\n\nconst writeFromBuffer = (source: Buffer, target: Buffer, offset = 0) => {\n  source.forEach((bit, index) => {\n    // tslint:disable-next-line: no-object-mutation no-bitwise\n    target[index + offset] = bit & 255;\n  });\n};\n\nconst writeUInt160 = (value: UInt160 | UInt160Hex, buffer: Buffer, position: number) => {\n  const result = common.uInt160ToBuffer(value);\n  if (result.length !== common.UINT160_BUFFER_BYTES) {\n    throw new Error('is this working?');\n  }\n  writeFromBuffer(result, buffer, position);\n};\n\nconst writeUInt256 = (value: UInt256 | UInt256Hex, buffer: Buffer, position: number) => {\n  const result = common.uInt256ToBuffer(value);\n  if (result.length !== common.UINT256_BUFFER_BYTES) {\n    throw new Error('is this working?');\n  }\n  writeFromBuffer(result, buffer, position);\n};\n\nconst writeECPoint = (value: ECPoint | ECPointHex, buffer: Buffer, position: number) => {\n  const result = common.ecPointToBuffer(value);\n  if (result.length !== common.ECPOINT_BUFFER_BYTES) {\n    throw new Error('is this working?');\n  }\n\n  writeFromBuffer(result, buffer, position);\n};\n\nexport class BinaryWriter {\n  private readonly head: Op;\n  private mutableLength: number;\n  private mutableTail: Omit<Op, 'next'>;\n\n  public constructor() {\n    this.head = new Op({\n      fn: () => {\n        // do nothing\n      },\n      length: 0,\n      value: undefined,\n    });\n    this.mutableTail = this.head;\n    this.mutableLength = 0;\n  }\n\n  private get length() {\n    return this.mutableLength;\n  }\n\n  public toBuffer() {\n    return this.finish();\n  }\n\n  public writeBytes(value: Buffer): this {\n    return this.push({\n      fn: writeFromBuffer,\n      length: value.length,\n      value,\n    });\n  }\n\n  public writeUInt8(value: number): this {\n    return this.push({\n      fn: (val: number, buffer: Buffer, pos: number) => buffer.writeUInt8(val, pos),\n      length: 1,\n      value,\n    });\n  }\n\n  public writeInt16LE(value: number): this {\n    return this.push({\n      fn: (val: number, buffer: Buffer, pos: number) => buffer.writeInt16LE(val, pos),\n      length: 2,\n      value,\n    });\n  }\n\n  public writeUInt16LE(value: number): this {\n    return this.push({\n      fn: (val: number, buffer: Buffer, pos: number) => buffer.writeUInt16LE(val, pos),\n      length: 2,\n      value,\n    });\n  }\n\n  public writeUInt16BE(value: number): this {\n    return this.push({\n      fn: (val: number, buffer: Buffer, pos: number) => buffer.writeUInt16BE(val, pos),\n      length: 2,\n      value,\n    });\n  }\n\n  public writeInt32LE(value: number): this {\n    return this.push({\n      fn: (val: number, buffer: Buffer, pos: number) => buffer.writeInt32LE(val, pos),\n      length: 4,\n      value,\n    });\n  }\n\n  public writeUInt32LE(value: number): this {\n    return this.push({\n      fn: (val: number, buffer: Buffer, pos: number) => buffer.writeUInt32LE(val, pos),\n      length: 4,\n      value,\n    });\n  }\n\n  public writeInt64LE(value: BN): this {\n    return this.push({\n      fn: (val: BN, buffer: Buffer, pos: number) => {\n        const source = val.toTwos(8 * 8).toArrayLike(Buffer, 'le', 8);\n        writeFromBuffer(source, buffer, pos);\n      },\n      length: 8,\n      value,\n    });\n  }\n\n  public writeUInt64LE(value: BN): this {\n    return this.push({\n      fn: (val: BN, buffer: Buffer, pos: number) => {\n        const source = val.toArrayLike(Buffer, 'le', 8);\n        writeFromBuffer(source, buffer, pos);\n      },\n      length: 8,\n      value,\n    });\n  }\n\n  public writeBoolean(value: boolean): this {\n    return this.push({\n      fn: writeByte,\n      length: 1,\n      value: value ? 1 : 0,\n    });\n  }\n\n  public writeUInt160(hash: UInt160 | UInt160Hex): this {\n    return this.push({\n      fn: writeUInt160,\n      length: common.UINT160_BUFFER_BYTES,\n      value: hash,\n    });\n  }\n\n  public writeUInt256(hash: UInt256 | UInt256Hex): this {\n    return this.push({\n      fn: writeUInt256,\n      length: common.UINT256_BUFFER_BYTES,\n      value: hash,\n    });\n  }\n\n  public writeFixed8(value: BN): this {\n    return this.writeInt64LE(value);\n  }\n\n  public writeFixedString(value: string, length: number): this {\n    if (value.length > length) {\n      throw new InvalidFormatError('String too long');\n    }\n    const stringBuffer = Buffer.from(value, 'utf8');\n    if (stringBuffer.length > length) {\n      throw new InvalidFormatError('String buffer length too long');\n    }\n\n    return this.push({\n      fn: (val: Buffer, buffer: Buffer, pos: number) => {\n        writeFromBuffer(val, buffer, pos);\n        const padLength = val.length - length;\n        if (padLength > 0) {\n          writeFromBuffer(Buffer.alloc(padLength, 0), buffer, pos + val.length);\n        }\n      },\n      length,\n      value: stringBuffer,\n    });\n  }\n\n  public writeArray<T>(values: readonly T[], write: (value: T) => void): this {\n    this.writeVarUIntLE(values.length);\n    values.forEach(write);\n\n    return this;\n  }\n\n  public writeObject<T, K extends keyof T>(value: T, write: (key: K, value: T[K]) => void): this {\n    const entries = Object.entries(value) as Array<[K, T[K]]>;\n    this.writeVarUIntLE(entries.length);\n    entries.forEach(([key, val]) => {\n      write(key, val);\n    });\n\n    return this;\n  }\n\n  public writeVarBytesLE(value: Buffer): this {\n    this.writeVarUIntLE(value.length);\n\n    return this.push({\n      fn: (val: Buffer, buffer: Buffer, pos: number) => {\n        writeFromBuffer(val, buffer, pos);\n      },\n      length: value.length,\n      value,\n    });\n  }\n\n  public writeVarUIntLE(valueIn: number | BN): this {\n    const value = new BN(valueIn);\n    if (value.lt(utils.ZERO)) {\n      throw new InvalidFormatError('Expected value to be zero or positive');\n    }\n\n    if (value.lt(utils.FD)) {\n      this.writeUInt8(value.toNumber());\n    } else if (value.lte(utils.FFFF)) {\n      this.writeUInt8(0xfd);\n      this.writeUInt16LE(value.toNumber());\n    } else if (value.lte(utils.FFFFFFFF)) {\n      this.writeUInt8(0xfe);\n      this.writeUInt32LE(value.toNumber());\n    } else {\n      this.writeUInt8(0xff);\n      this.writeUInt64LE(value);\n    }\n\n    return this;\n  }\n\n  public writeVarString(value: string, max?: number): this {\n    let buffer = Buffer.from(value, 'utf8');\n    if (max !== undefined) {\n      buffer = buffer.slice(0, max);\n    }\n\n    return this.writeVarBytesLE(buffer);\n  }\n\n  public writeECPoint(value: ECPoint): this {\n    if (common.ecPointIsInfinity(value)) {\n      return this.push({\n        fn: writeByte,\n        length: 1,\n        value: common.ECPOINT_INFINITY_BYTE,\n      });\n    }\n\n    return this.push({\n      fn: writeECPoint,\n      length: common.ECPOINT_BUFFER_BYTES,\n      value,\n    });\n  }\n\n  private finish() {\n    const computedBuffer = Buffer.alloc(this.length);\n    let head = this.head.next;\n    let position = 0;\n    // tslint:disable-next-line: no-loop-statement\n    while (head !== undefined) {\n      head.fn(head.value, computedBuffer, position);\n      position += head.length;\n      head = head.next;\n    }\n\n    return computedBuffer;\n  }\n\n  private push<T>(op: Omit<OpOptions<T>, 'next'>): this {\n    const newOp = new Op(op);\n    this.mutableTail.setNext(newOp);\n    this.mutableTail = newOp;\n    this.mutableLength += op.length;\n\n    return this;\n  }\n}\n","import { Constructor } from '@neo-one/utils';\nimport { BinaryWriter } from '../../BinaryWriter';\nimport { common, ECPoint, InvalidFormatError, PrivateKey, UInt256, UInt256Hex } from '../../common';\nimport { crypto } from '../../crypto';\nimport { utils } from '../../utils';\nimport { createSerializeWire, SerializableWire, SerializeWire } from '../Serializable';\nimport { WitnessModel } from '../WitnessModel';\nimport { AttributeModel } from './attribute';\nimport { InputModel } from './InputModel';\nimport { OutputModel } from './OutputModel';\nimport { TransactionTypeModel } from './TransactionTypeModel';\n\nexport interface TransactionBaseModelAdd<\n  TAttribute extends AttributeModel,\n  TInput extends InputModel,\n  TOutput extends OutputModel,\n  TWitness extends WitnessModel\n> {\n  readonly version?: number;\n  readonly attributes?: readonly TAttribute[];\n  readonly inputs?: readonly TInput[];\n  readonly outputs?: readonly TOutput[];\n  readonly scripts?: readonly TWitness[];\n  readonly hash?: UInt256;\n}\n\nexport interface TransactionBaseModelAddWithType<\n  Type extends TransactionTypeModel,\n  TAttribute extends AttributeModel,\n  TInput extends InputModel,\n  TOutput extends OutputModel,\n  TWitness extends WitnessModel\n> extends TransactionBaseModelAdd<TAttribute, TInput, TOutput, TWitness> {\n  readonly type: Type;\n}\n\nexport const MAX_TRANSACTION_ATTRIBUTES = 16;\n\nexport abstract class TransactionBaseModel<\n  Type extends TransactionTypeModel = TransactionTypeModel,\n  TAttribute extends AttributeModel = AttributeModel,\n  TInput extends InputModel = InputModel,\n  TOutput extends OutputModel = OutputModel,\n  TWitness extends WitnessModel = WitnessModel\n> implements SerializableWire<TransactionBaseModel> {\n  public static readonly VERSION: number = 0;\n  protected static readonly WitnessConstructor: Constructor<WitnessModel> = WitnessModel;\n\n  public readonly type: Type;\n  public readonly version: number;\n  public readonly attributes: readonly TAttribute[];\n  public readonly inputs: readonly TInput[];\n  public readonly outputs: readonly TOutput[];\n  public readonly scripts: readonly TWitness[];\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  public readonly serializeUnsigned: SerializeWire = createSerializeWire(this.serializeUnsignedBase.bind(this));\n  private readonly hashInternal: () => UInt256;\n  private readonly hashHexInternal = utils.lazy(() => common.uInt256ToHex(this.hash));\n  private readonly messageInternal = utils.lazy(() => this.serializeUnsigned());\n\n  public constructor({\n    version,\n    type,\n    attributes = [],\n    inputs = [],\n    outputs = [],\n    scripts = [],\n    hash,\n  }: TransactionBaseModelAddWithType<Type, TAttribute, TInput, TOutput, TWitness>) {\n    // workaround: babel fails to transpile if we have\n    // static VERSION: number = 0;\n    this.version = version === undefined ? (this.constructor as typeof TransactionBaseModel).VERSION : version;\n    this.type = type;\n    this.attributes = attributes;\n    this.inputs = inputs;\n    this.outputs = outputs;\n    this.scripts = scripts;\n    const hashIn = hash;\n    this.hashInternal = hashIn === undefined ? utils.lazy(() => crypto.hash256(this.message)) : () => hashIn;\n\n    if (this.attributes.length > MAX_TRANSACTION_ATTRIBUTES) {\n      throw new InvalidFormatError(\n        `Expected less than ${MAX_TRANSACTION_ATTRIBUTES} attributes, found: ${attributes.length}`,\n      );\n    }\n  }\n\n  public abstract clone(options: {\n    readonly scripts?: readonly TWitness[];\n    readonly attributes?: readonly TAttribute[];\n    readonly inputs?: readonly TInput[];\n    readonly outputs?: readonly TOutput[];\n  }): this;\n\n  public get hash(): UInt256 {\n    return this.hashInternal();\n  }\n\n  public get hashHex(): UInt256Hex {\n    return this.hashHexInternal();\n  }\n\n  public get message(): Buffer {\n    return this.messageInternal();\n  }\n\n  public sign(key: PrivateKey): this {\n    return this.clone({\n      scripts: this.scripts.concat([\n        // tslint:disable-next-line no-any\n        crypto.createWitness(this.serializeUnsigned(), key, (this.constructor as any).WitnessConstructor),\n      ]),\n    });\n  }\n\n  public signWithSignature(signature: Buffer, publicKey: ECPoint): this {\n    return this.clone({\n      scripts: this.scripts.concat([\n        // tslint:disable-next-line no-any\n        crypto.createWitnessForSignature(signature, publicKey, (this.constructor as any).WitnessConstructor),\n      ]),\n    });\n  }\n\n  public serializeExclusiveBase(_writer: BinaryWriter): void {\n    // do nothing\n  }\n\n  public serializeUnsignedBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.type);\n    writer.writeUInt8(this.version);\n    this.serializeExclusiveBase(writer);\n    writer.writeArray(this.attributes, (attribute) => {\n      attribute.serializeWireBase(writer);\n    });\n    writer.writeArray(this.inputs, (input) => {\n      input.serializeWireBase(writer);\n    });\n    writer.writeArray(this.outputs, (output) => {\n      output.serializeWireBase(writer);\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    this.serializeUnsignedBase(writer);\n    writer.writeArray(this.scripts, (script) => {\n      script.serializeWireBase(writer);\n    });\n  }\n}\n","import { InvalidTransactionTypeError } from '../../errors';\n\nexport enum TransactionTypeModel {\n  Miner = 0x00,\n  Issue = 0x01,\n  Claim = 0x02,\n  Enrollment = 0x20,\n  Register = 0x40,\n  Contract = 0x80,\n  State = 0x90,\n  Publish = 0xd0,\n  Invocation = 0xd1,\n}\n\nconst isTransactionType = (value: number): value is TransactionTypeModel =>\n  // tslint:disable-next-line strict-type-predicates\n  TransactionTypeModel[value] !== undefined;\n\nexport const assertTransactionType = (value: number): TransactionTypeModel => {\n  if (isTransactionType(value)) {\n    return value;\n  }\n\n  throw new InvalidTransactionTypeError(value);\n};\n","import { BN } from 'bn.js';\nimport { common, ECPoint, InvalidFormatError } from './common';\nimport { utils } from './utils';\n\nconst sizeOfUInt8 = 1;\nconst sizeOfBoolean = 1;\nconst sizeOfUInt16LE = 2;\nconst sizeOfUInt32LE = 4;\nconst sizeOfUInt64LE = 8;\n\nconst sizeOfUInt160 = common.UINT160_BUFFER_BYTES;\nconst sizeOfUInt256 = common.UINT256_BUFFER_BYTES;\nconst sizeOfECPoint = (ecPoint: ECPoint) => {\n  if (common.ecPointIsInfinity(ecPoint)) {\n    return 1;\n  }\n\n  return common.ECPOINT_BUFFER_BYTES;\n};\nconst sizeOfFixed8 = 8;\n\nconst sizeOfVarUIntLE = (valueIn: number | BN): number => {\n  const value = new BN(valueIn);\n  /* istanbul ignore next */\n  if (value.lt(utils.ZERO)) {\n    throw new InvalidFormatError(`Expected value >= 0, found: ${value.toString()}`);\n  }\n\n  if (value.lt(utils.FD)) {\n    return sizeOfUInt8;\n  }\n\n  if (value.lte(utils.FFFF)) {\n    return sizeOfUInt8 + sizeOfUInt16LE;\n  }\n\n  if (value.lte(utils.FFFFFFFF)) {\n    return sizeOfUInt8 + sizeOfUInt32LE;\n  }\n\n  /* istanbul ignore next */\n  return sizeOfUInt8 + sizeOfUInt64LE;\n};\n\nconst sizeOfVarBytesLE = (value: Buffer): number => sizeOfVarUIntLE(value.length) + value.length;\n\nconst sizeOfVarString = (value: string): number => sizeOfVarBytesLE(Buffer.from(value, 'utf8'));\n\nconst sizeOfFixedString = (length: number): number => length;\n\nfunction sizeOfArray<T>(values: readonly T[], sizeOf: (value: T) => number): number {\n  return values.reduce((acc, value) => acc + sizeOf(value), sizeOfVarUIntLE(values.length));\n}\n\nfunction sizeOfObject<T>(obj: T, sizeOf: (key: keyof T, value: T[keyof T]) => number): number {\n  const entries = Object.entries(obj) as Array<[keyof T, T[keyof T]]>;\n\n  return entries.reduce((acc, [key, value]) => acc + sizeOf(key, value), entries.length);\n}\n\n// tslint:disable-next-line variable-name\nexport const IOHelper = {\n  sizeOfUInt8,\n  sizeOfBoolean,\n  sizeOfUInt16LE,\n  sizeOfUInt32LE,\n  sizeOfUInt64LE,\n  sizeOfVarBytesLE,\n  sizeOfVarString,\n  sizeOfFixedString,\n  sizeOfArray,\n  sizeOfObject,\n  sizeOfUInt160,\n  sizeOfUInt256,\n  sizeOfECPoint,\n  sizeOfFixed8,\n};\n","export const constants = {\n  PRIVATE_NET_PRIVATE_KEY: 'L4qhHtwbiAMu1nrSmsTP5a3dJbxA3SNS6oheKnKd8E7KTJyCLcUv',\n  PRIVATE_NET_PUBLIC_KEY: '0248be3c070df745a60f3b8b494efcc6caf90244d803a9a72fe95d9bae2120ec70',\n};\n","import { common, crypto } from '@neo-one/client-common';\nimport { Blockchain } from '@neo-one/node-blockchain';\nimport { createMain } from '@neo-one/node-neo-settings';\nimport { Node } from '@neo-one/node-protocol';\nimport { createHandler, RPCHandler } from '@neo-one/node-rpc-handler';\nimport { storage as levelupStorage } from '@neo-one/node-storage-levelup';\nimport { vm } from '@neo-one/node-vm';\nimport { finalize } from '@neo-one/utils';\nimport Level from 'level-js';\nimport LevelUp from 'levelup';\nimport MemDown from 'memdown';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { constants } from './constants';\nimport { Network } from './Network';\n\nexport interface PersistentFullNode {\n  readonly type: 'persistent';\n  readonly id: string;\n}\n\nexport interface InMemoryFullNode {\n  readonly type: 'memory';\n}\n\nexport type FullNodeOptions = PersistentFullNode | InMemoryFullNode;\n\nexport class FullNode {\n  private mutableSubscription: Subscription | undefined;\n  private readonly startPromise: Promise<RPCHandler>;\n\n  public constructor(private readonly options: FullNodeOptions) {\n    this.startPromise = this.startInternal();\n  }\n\n  public async start(): Promise<void> {\n    return this.startPromise.then(() => {\n      // do nothing\n    });\n  }\n\n  public async stop(): Promise<void> {\n    if (this.mutableSubscription !== undefined) {\n      this.mutableSubscription.unsubscribe();\n      this.mutableSubscription = undefined;\n      await finalize.wait();\n    }\n  }\n\n  // tslint:disable-next-line no-any\n  public async handleRequest(data: any): Promise<any> {\n    const handler = await this.startPromise;\n\n    return handler(data);\n  }\n\n  private async startInternal(): Promise<RPCHandler> {\n    let resolved = false;\n    const primaryPrivateKey = crypto.wifToPrivateKey(constants.PRIVATE_NET_PRIVATE_KEY, common.NEO_PRIVATE_KEY_VERSION);\n    const primaryPublicKey = common.stringToECPoint(constants.PRIVATE_NET_PUBLIC_KEY);\n    crypto.addPublicKey(primaryPrivateKey, primaryPublicKey);\n\n    const settings = createMain({\n      address: common.uInt160ToString(crypto.privateKeyToScriptHash(primaryPrivateKey)),\n      standbyValidators: [common.ecPointToString(primaryPublicKey)],\n      privateNet: true,\n    });\n    const storage = levelupStorage({\n      db: LevelUp(this.options.type === 'persistent' ? Level(this.options.id) : MemDown()),\n      context: { messageMagic: settings.messageMagic },\n    });\n\n    const blockchain = await Blockchain.create({\n      settings,\n      storage,\n      vm,\n    });\n    const nodeOptions$ = new BehaviorSubject({\n      consensus: {\n        enabled: true,\n        options: {\n          privateKey: common.privateKeyToString(primaryPrivateKey),\n          privateNet: true,\n        },\n      },\n    });\n    const node = new Node({\n      blockchain,\n      environment: {},\n      options$: nodeOptions$,\n      createNetwork: () => new Network(),\n    });\n\n    await new Promise<void>((resolve, reject) => {\n      const handleError = (error: Error) => {\n        if (!resolved) {\n          resolved = true;\n          reject(error);\n        }\n      };\n      this.mutableSubscription = node.start$().subscribe({\n        next: () => {\n          if (!resolved) {\n            resolved = true;\n            resolve();\n          }\n        },\n        error: handleError,\n        complete: () => {\n          handleError(new Error('Unexpected end'));\n        },\n      });\n    });\n\n    return createHandler({ blockchain, node });\n  }\n}\n","import { BN } from 'bn.js';\nimport { BinaryWriter } from './BinaryWriter';\nimport { common, ECPoint, UInt160, UInt256 } from './common';\nimport { ByteBuffer, ByteCode, Op, OpCode, SysCallName } from './models/vm';\nimport { ParamToCallbacks, ScriptBuilderParam } from './types';\nimport { utils } from './utils';\n\nexport class ScriptBuilder {\n  private readonly mutableBuffers: Buffer[];\n  private readonly pushParamCallbacks: ParamToCallbacks<this>;\n\n  public constructor() {\n    this.mutableBuffers = [];\n\n    this.pushParamCallbacks = {\n      undefined: () => this.emitPush(Buffer.alloc(0, 0)),\n      array: (param) => this.emitPushArray(param),\n      map: (param) => this.emitPushMap(param),\n      uInt160: (param) => this.emitPushUInt160(common.asUInt160(param)),\n      uInt256: (param) => this.emitPushUInt256(common.asUInt256(param)),\n      ecPoint: (param) => this.emitPushECPoint(common.asECPoint(param)),\n      number: (param) => this.emitPushInt(param),\n      string: (param) => this.emitPushString(param),\n      boolean: (param) => this.emitPushBoolean(param),\n      buffer: (param) => this.emitPush(param),\n      object: (param) => this.emitPushObject(param),\n    };\n  }\n\n  public get buffers(): readonly Buffer[] {\n    return this.mutableBuffers;\n  }\n\n  public emitPush(value: Buffer): this {\n    if (value.length <= Op.PUSHBYTES75) {\n      this.emitOpByte(value.length, value);\n    } else if (value.length < 0x100) {\n      this.emitOp('PUSHDATA1');\n      this.emitUInt8(value.length);\n      this.emit(value);\n    } else if (value.length < 0x10000) {\n      this.emitOp('PUSHDATA2');\n      this.emitUInt16LE(value.length);\n      this.emit(value);\n    } else if (value.length < 0x100000000) {\n      this.emitOp('PUSHDATA4');\n      this.emitUInt32LE(value.length);\n      this.emit(value);\n    } else {\n      /* istanbul ignore next */\n      throw new Error('Invalid buffer length');\n    }\n\n    return this;\n  }\n\n  public emitUInt8(value: number): this {\n    const buff = Buffer.allocUnsafe(1);\n    buff.writeUInt8(value, 0);\n\n    return this.emit(buff);\n  }\n\n  public emitUInt16LE(value: number): this {\n    const buff = Buffer.allocUnsafe(2);\n    buff.writeUInt16LE(value, 0);\n\n    return this.emit(buff);\n  }\n\n  public emitInt16LE(value: number): this {\n    const buff = Buffer.allocUnsafe(2);\n    buff.writeInt16LE(value, 0);\n\n    return this.emit(buff);\n  }\n\n  public emitUInt32LE(value: number): this {\n    const buff = Buffer.allocUnsafe(4);\n    buff.writeUInt32LE(value, 0);\n\n    return this.emit(buff);\n  }\n\n  public emitPushInt(valueIn: number | BN): this {\n    const value = new BN(valueIn);\n    if (value.eq(utils.NEGATIVE_ONE)) {\n      return this.emitOp('PUSHM1');\n    }\n\n    if (value.eq(utils.ZERO)) {\n      return this.emitOp('PUSH0');\n    }\n\n    if (value.gt(utils.ZERO) && value.lt(utils.SIXTEEN)) {\n      return this.emitOpByte(Op.PUSH1 - 1 + value.toNumber());\n    }\n\n    return this.emitPush(utils.toSignedBuffer(value));\n  }\n\n  public emitPushUInt160(value: UInt160): this {\n    return this.emitPush(common.uInt160ToBuffer(value));\n  }\n\n  public emitPushUInt256(value: UInt256): this {\n    return this.emitPush(common.uInt256ToBuffer(value));\n  }\n\n  public emitPushECPoint(ecPoint: ECPoint): this {\n    return this.emitPush(common.ecPointToBuffer(ecPoint));\n  }\n\n  public emitPushString(value: string): this {\n    return this.emitPush(Buffer.from(value, 'utf8'));\n  }\n\n  public emitPushBoolean(value: boolean): this {\n    return this.emitOp(value ? 'PUSH1' : 'PUSH0');\n  }\n\n  public emitOp(op: OpCode, buffer?: Buffer | undefined): this {\n    this.emitOpByte(Op[op], buffer);\n\n    return this;\n  }\n\n  public emitPushParam(param: ScriptBuilderParam | undefined): this {\n    return common.paramTo(param, this.pushParamCallbacks);\n  }\n\n  // tslint:disable-next-line readonly-array\n  public emitPushParams(...params: Array<ScriptBuilderParam | undefined>): this {\n    // tslint:disable-next-line no-loop-statement\n    for (let i = params.length - 1; i >= 0; i -= 1) {\n      this.emitPushParam(params[i]);\n    }\n\n    return this;\n  }\n\n  public emitPushArray(params: ReadonlyArray<ScriptBuilderParam | undefined>): this {\n    this.emitPushParams(...params);\n    this.emitPushParam(params.length);\n\n    return this.emitOp('PACK');\n  }\n\n  public emitPushMap(params: ReadonlyMap<ScriptBuilderParam | undefined, ScriptBuilderParam | undefined>): this {\n    this.emitOp('NEWMAP');\n    params.forEach((value, key) => {\n      this.emitOp('DUP');\n      this.emitPushParam(key);\n      this.emitPushParam(value);\n      this.emitOp('SETITEM');\n    });\n\n    return this;\n  }\n\n  public emitPushObject(params: { readonly [key: string]: ScriptBuilderParam | undefined }): this {\n    this.emitOp('NEWMAP');\n    Object.entries(params).forEach(([key, value]) => {\n      this.emitOp('DUP');\n      this.emitPushParam(key);\n      this.emitPushParam(value);\n      this.emitOp('SETITEM');\n    });\n\n    return this;\n  }\n\n  // tslint:disable-next-line readonly-array\n  public emitAppCallInvocation(operation: string, ...params: Array<ScriptBuilderParam | undefined>): this {\n    this.emitPushArray(params);\n\n    return this.emitPushParam(operation);\n  }\n\n  public emitAppCallVerification(scriptHash: UInt160): this {\n    return this.emitOp('APPCALL', common.uInt160ToBuffer(scriptHash));\n  }\n\n  // tslint:disable-next-line readonly-array\n  public emitAppCall(scriptHash: UInt160, operation: string, ...params: Array<ScriptBuilderParam | undefined>): this {\n    this.emitAppCallInvocation(operation, ...params);\n\n    return this.emitAppCallVerification(scriptHash);\n  }\n\n  // tslint:disable-next-line readonly-array\n  public emitTailCall(scriptHash: UInt160, operation: string, ...params: Array<ScriptBuilderParam | undefined>): this {\n    this.emitAppCallInvocation(operation, ...params);\n\n    return this.emitOp('TAILCALL', common.uInt160ToBuffer(scriptHash));\n  }\n\n  // tslint:disable-next-line readonly-array\n  public emitSysCall(sysCall: SysCallName, ...params: Array<ScriptBuilderParam | undefined>): this {\n    this.emitPushParams(...params);\n    const sysCallBuffer = Buffer.from(sysCall, 'ascii');\n    const writer = new BinaryWriter();\n    writer.writeVarBytesLE(sysCallBuffer);\n\n    return this.emitOp('SYSCALL', writer.toBuffer());\n  }\n\n  public emitOpByte(byteCode: ByteCode, buffer?: Buffer | undefined): this {\n    const byteCodeBuffer = ByteBuffer[byteCode];\n    this.emit(byteCodeBuffer);\n    this.emit(buffer);\n\n    return this;\n  }\n\n  public emit(buffer?: Buffer | undefined): this {\n    if (buffer !== undefined) {\n      this.mutableBuffers.push(buffer);\n    }\n\n    return this;\n  }\n\n  public build(): Buffer {\n    return Buffer.concat(this.mutableBuffers);\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  crypto,\n  ECPoint,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  RegisterTransactionJSON,\n  TransactionBaseModel,\n  UInt160,\n  UInt160Hex,\n} from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { assertAssetType, AssetType, toJSONAssetType } from '../AssetType';\nimport { VerifyError } from '../errors';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport {\n  FeeContext,\n  TransactionBase,\n  TransactionBaseAdd,\n  TransactionGetScriptHashesForVerifyingOptions,\n  TransactionVerifyOptions,\n} from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\ninterface Asset {\n  readonly type: AssetType;\n  readonly name: string;\n  readonly amount: BN;\n  readonly precision: number;\n  readonly owner: ECPoint;\n  readonly admin: UInt160;\n}\n\nexport interface RegisterTransactionAdd extends TransactionBaseAdd {\n  readonly asset: Asset;\n}\n\nexport class RegisterTransaction extends TransactionBase<\n  TransactionType.Register,\n  RegisterTransactionJSON,\n  Constructor<TransactionBaseModel<TransactionType.Register, Attribute, Input, Output, Witness>>\n  // tslint:disable-next-line no-any\n>(TransactionBaseModel as any) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): RegisterTransaction {\n    const { reader } = options;\n\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Register) {\n      throw new InvalidFormatError(`Expected transaction type ${TransactionType.Register}. Received: ${type}`);\n    }\n\n    const assetType = assertAssetType(reader.readUInt8());\n    const name = reader.readVarString(1024);\n    const amount = reader.readFixed8();\n    const precision = reader.readUInt8();\n    const owner = reader.readECPoint();\n    const admin = reader.readUInt160();\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      asset: {\n        type: assetType,\n        name,\n        amount,\n        precision,\n        owner,\n        admin,\n      },\n    });\n  }\n\n  public readonly asset: Asset;\n  protected readonly sizeExclusive: () => number = utils.lazy(\n    () =>\n      IOHelper.sizeOfUInt8 +\n      IOHelper.sizeOfUInt8 +\n      IOHelper.sizeOfVarString(this.asset.name) +\n      IOHelper.sizeOfFixed8 +\n      IOHelper.sizeOfUInt8 +\n      IOHelper.sizeOfECPoint(this.asset.owner) +\n      IOHelper.sizeOfUInt160,\n  );\n  private readonly registerGetScriptHashesForVerifyingInternal: (\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ) => Promise<Set<UInt160Hex>>;\n\n  public constructor({ version, attributes, inputs, outputs, scripts, hash, asset }: RegisterTransactionAdd) {\n    super({\n      version,\n      type: TransactionType.Register,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    this.asset = asset;\n\n    if (this.version !== 0) {\n      throw new InvalidFormatError(`Expected version to be 0. Received: ${this.version}`);\n    }\n\n    if (\n      common.ecPointIsInfinity(asset.owner) &&\n      asset.type !== AssetType.GoverningToken &&\n      asset.type !== AssetType.UtilityToken\n    ) {\n      throw new InvalidFormatError(`AssetType and asset owner are invalid`);\n    }\n\n    const getScriptHashesForVerifying = super.getScriptHashesForVerifying.bind(this);\n    this.registerGetScriptHashesForVerifyingInternal = utils.lazyAsync(\n      async (options: TransactionGetScriptHashesForVerifyingOptions) => {\n        const hashes = await getScriptHashesForVerifying(options);\n        const scriptHash = common.uInt160ToHex(crypto.getVerificationScriptHash(this.asset.owner));\n\n        return new Set([...hashes, scriptHash]);\n      },\n    );\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly Witness[];\n    readonly attributes?: readonly Attribute[];\n    readonly inputs?: readonly Input[];\n    readonly outputs?: readonly Output[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash: this.hash,\n      asset: this.asset,\n    });\n  }\n\n  public serializeExclusiveBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.asset.type);\n    writer.writeVarString(this.asset.name);\n    writer.writeFixed8(this.asset.amount);\n    writer.writeUInt8(this.asset.precision);\n    writer.writeECPoint(this.asset.owner);\n    writer.writeUInt160(this.asset.admin);\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<RegisterTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    let { name } = this.asset;\n    try {\n      name = JSON.parse(name);\n    } catch {\n      // ignore errors\n    }\n\n    return {\n      ...transactionBaseJSON,\n      type: 'RegisterTransaction',\n      asset: {\n        type: toJSONAssetType(this.asset.type),\n        name,\n        amount: JSONHelper.writeFixed8(this.asset.amount),\n        precision: this.asset.precision,\n        owner: JSONHelper.writeECPoint(this.asset.owner),\n        admin: crypto.scriptHashToAddress({\n          addressVersion: context.addressVersion,\n          scriptHash: this.asset.admin,\n        }),\n      },\n    };\n  }\n\n  public getSystemFee(context: FeeContext): BN {\n    if (this.asset.type === AssetType.GoverningToken || this.asset.type === AssetType.UtilityToken) {\n      return utils.ZERO;\n    }\n\n    return super.getSystemFee(context);\n  }\n\n  public async getScriptHashesForVerifying(\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ): Promise<Set<UInt160Hex>> {\n    return this.registerGetScriptHashesForVerifyingInternal(options);\n  }\n\n  public async verify(_options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    throw new VerifyError('Register transactions are obsolete');\n  }\n}\n","import {\n  AttributeJSON,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  toJSONAttributeUsage,\n  UInt160AttributeModel,\n  UInt160AttributeModelAdd as UInt160AttributeAdd,\n  UInt160AttributeUsageModel as UInt160AttributeUsage,\n} from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../../Serializable';\nimport { AttributeBase } from './AttributeBase';\nimport { AttributeUsage } from './AttributeUsage';\n\n// tslint:disable-next-line export-name\nexport { UInt160AttributeUsage, UInt160AttributeAdd };\n\nexport class UInt160Attribute extends AttributeBase(UInt160AttributeModel) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): UInt160Attribute {\n    const { reader } = options;\n    const { usage } = super.deserializeAttributeWireBase(options);\n    if (usage !== AttributeUsage.Script) {\n      throw new InvalidFormatError(`Expected attribute usage to be ${AttributeUsage.Script}. Received: ${usage}`);\n    }\n    const value = reader.readUInt160();\n\n    return new this({ usage, value });\n  }\n\n  public readonly size: number;\n\n  public constructor({ usage, value }: UInt160AttributeAdd) {\n    super({ usage, value });\n    this.size = IOHelper.sizeOfUInt8 + IOHelper.sizeOfUInt160;\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): AttributeJSON {\n    return {\n      usage: toJSONAttributeUsage(this.usage),\n      data: JSONHelper.writeUInt160(this.value),\n    };\n  }\n}\n","import {\n  AttributeJSON,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  toJSONAttributeUsage,\n  UInt256AttributeModel,\n  UInt256AttributeModelAdd as UInt256AttributeAdd,\n  UInt256AttributeUsageModel as UInt256AttributeUsage,\n} from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../../Serializable';\nimport { AttributeBase } from './AttributeBase';\nimport { AttributeUsage } from './AttributeUsage';\n\nexport { UInt256AttributeUsage, UInt256AttributeAdd };\n\nexport class UInt256Attribute extends AttributeBase(UInt256AttributeModel) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): UInt256Attribute {\n    const { reader } = options;\n    const { usage } = super.deserializeAttributeWireBase(options);\n    if (\n      !(\n        usage === AttributeUsage.ContractHash ||\n        usage === AttributeUsage.Vote ||\n        usage === AttributeUsage.Hash1 ||\n        usage === AttributeUsage.Hash2 ||\n        usage === AttributeUsage.Hash3 ||\n        usage === AttributeUsage.Hash4 ||\n        usage === AttributeUsage.Hash5 ||\n        usage === AttributeUsage.Hash6 ||\n        usage === AttributeUsage.Hash7 ||\n        usage === AttributeUsage.Hash8 ||\n        usage === AttributeUsage.Hash9 ||\n        usage === AttributeUsage.Hash10 ||\n        usage === AttributeUsage.Hash11 ||\n        usage === AttributeUsage.Hash12 ||\n        usage === AttributeUsage.Hash13 ||\n        usage === AttributeUsage.Hash14 ||\n        usage === AttributeUsage.Hash15\n      )\n    ) {\n      throw new InvalidFormatError(`Invalid AttributeUsageModel. Received: ${usage}`);\n    }\n    const value = reader.readUInt256();\n\n    return new this({ usage, value });\n  }\n\n  public readonly size: number;\n\n  public constructor({ usage, value }: UInt256AttributeAdd) {\n    super({ usage, value });\n    this.size = IOHelper.sizeOfUInt8 + IOHelper.sizeOfUInt256;\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): AttributeJSON {\n    return {\n      usage: toJSONAttributeUsage(this.usage),\n      data: JSONHelper.writeUInt256(this.value),\n    };\n  }\n}\n","import {\n  AttributeJSON,\n  common,\n  ECPointAttributeModel,\n  ECPointAttributeModelAdd as ECPointAttributeAdd,\n  ECPointAttributeUsageModel as ECPointAttributeUsage,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  toJSONAttributeUsage,\n} from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../../Serializable';\nimport { AttributeBase } from './AttributeBase';\nimport { AttributeUsage } from './AttributeUsage';\n\nexport { ECPointAttributeUsage, ECPointAttributeAdd };\n\nexport class ECPointAttribute extends AttributeBase(ECPointAttributeModel) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): ECPointAttribute {\n    const { reader } = options;\n    const { usage } = super.deserializeAttributeWireBase(options);\n    if (!(usage === AttributeUsage.ECDH02 || usage === AttributeUsage.ECDH03)) {\n      throw new InvalidFormatError(\n        `Expected attribute usage to be ${AttributeUsage.ECDH02} or ${AttributeUsage.ECDH03}. Received: ${usage}`,\n      );\n    }\n    const value = common.bufferToECPoint(Buffer.concat([Buffer.from([usage]), reader.readBytes(32)]));\n\n    return new this({ usage, value });\n  }\n\n  public readonly size: number;\n\n  public constructor({ usage, value }: ECPointAttributeAdd) {\n    super({ usage, value });\n    this.size = IOHelper.sizeOfUInt8 + IOHelper.sizeOfECPoint(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): AttributeJSON {\n    return {\n      usage: toJSONAttributeUsage(this.usage),\n      data: JSONHelper.writeECPoint(this.value),\n    };\n  }\n}\n","import {\n  AttributeJSON,\n  BufferAttributeModel,\n  BufferAttributeModelAdd as BufferAttributeAdd,\n  BufferAttributeUsageModel as BufferAttributeUsage,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  toJSONAttributeUsage,\n} from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../../Serializable';\nimport { AttributeBase } from './AttributeBase';\nimport { AttributeUsage } from './AttributeUsage';\n\nexport { BufferAttributeAdd, BufferAttributeUsage };\n\nexport class BufferAttribute extends AttributeBase(BufferAttributeModel) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): BufferAttribute {\n    const { reader } = options;\n    const { usage } = super.deserializeAttributeWireBase(options);\n    if (\n      !(\n        usage === AttributeUsage.DescriptionUrl ||\n        usage === AttributeUsage.Description ||\n        usage === AttributeUsage.Remark ||\n        usage === AttributeUsage.Remark1 ||\n        usage === AttributeUsage.Remark2 ||\n        usage === AttributeUsage.Remark3 ||\n        usage === AttributeUsage.Remark4 ||\n        usage === AttributeUsage.Remark5 ||\n        usage === AttributeUsage.Remark6 ||\n        usage === AttributeUsage.Remark7 ||\n        usage === AttributeUsage.Remark8 ||\n        usage === AttributeUsage.Remark9 ||\n        usage === AttributeUsage.Remark10 ||\n        usage === AttributeUsage.Remark11 ||\n        usage === AttributeUsage.Remark12 ||\n        usage === AttributeUsage.Remark13 ||\n        usage === AttributeUsage.Remark14 ||\n        usage === AttributeUsage.Remark15\n      )\n    ) {\n      throw new InvalidFormatError(`Invalid AttributeUsageModel. Received: ${usage}`);\n    }\n    const value =\n      usage === AttributeUsage.DescriptionUrl ? reader.readBytes(reader.readUInt8()) : reader.readVarBytesLE();\n\n    return new BufferAttribute({ usage, value });\n  }\n\n  public readonly size: number;\n\n  public constructor({ usage, value }: BufferAttributeAdd) {\n    super({ usage, value });\n    this.size =\n      this.usage === AttributeUsage.DescriptionUrl\n        ? IOHelper.sizeOfUInt8 + IOHelper.sizeOfUInt8 + this.value.length\n        : IOHelper.sizeOfUInt8 + IOHelper.sizeOfVarBytesLE(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): AttributeJSON {\n    return {\n      usage: toJSONAttributeUsage(this.usage),\n      data: JSONHelper.writeBuffer(this.value),\n    };\n  }\n}\n","import { common, crypto, JSONHelper, OutputJSON, OutputModel, UInt256 } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { Equals, EquatableKey } from '../Equatable';\nimport { DeserializeWireBaseOptions, DeserializeWireOptions, SerializeJSONContext } from '../Serializable';\nimport { BinaryReader, utils } from '../utils';\n\nexport interface OutputKey {\n  readonly hash: UInt256;\n  readonly index: number;\n}\n\nexport class Output extends OutputModel implements EquatableKey {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): Output {\n    const asset = reader.readUInt256();\n    const value = reader.readFixed8();\n    const address = reader.readUInt160();\n\n    return new this({ asset, value, address });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Output {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly equals: Equals = utils.equals(\n    Output,\n    this,\n    (other) =>\n      common.uInt256Equal(this.asset, other.asset) &&\n      this.value.eq(other.value) &&\n      common.uInt160Equal(this.address, other.address),\n  );\n  public readonly toKeyString = utils.toKeyString(\n    Output,\n    () => `${common.uInt256ToString(this.asset)}:${this.value.toString(10)}:${common.uInt160ToString(this.address)}`,\n  );\n\n  public clone({ value = this.value }: { readonly value?: BN }): Output {\n    return new Output({\n      asset: this.asset,\n      value,\n      address: this.address,\n    });\n  }\n\n  public serializeJSON(context: SerializeJSONContext, index: number): OutputJSON {\n    return {\n      n: index,\n      asset: JSONHelper.writeUInt256(this.asset),\n      value: JSONHelper.writeFixed8(this.value),\n      address: crypto.scriptHashToAddress({\n        addressVersion: context.addressVersion,\n        scriptHash: this.address,\n      }),\n    };\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  InvalidFormatError,\n  IOHelper,\n  MinerTransactionJSON,\n  TransactionBaseModel,\n} from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { VerifyError } from '../errors';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport { FeeContext, TransactionBase, TransactionBaseAdd, TransactionVerifyOptions } from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\nexport interface MinerTransactionAdd extends TransactionBaseAdd {\n  readonly nonce: number;\n}\n\nexport class MinerTransaction extends TransactionBase<\n  TransactionType.Miner,\n  MinerTransactionJSON,\n  Constructor<TransactionBaseModel<TransactionType.Miner, Attribute, Input, Output, Witness>>\n  // tslint:disable-next-line no-any\n>(TransactionBaseModel as any) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): MinerTransaction {\n    const { reader } = options;\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Miner) {\n      throw new InvalidFormatError(`Expected transaction type ${TransactionType.Miner}. Received: ${type}`);\n    }\n\n    const nonce = reader.readUInt32LE();\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      nonce,\n    });\n  }\n\n  public readonly nonce: number;\n  protected readonly sizeExclusive: () => number = utils.lazy(() => IOHelper.sizeOfUInt8 + IOHelper.sizeOfUInt32LE);\n\n  public constructor({ version, attributes, inputs, outputs, scripts, hash, nonce }: MinerTransactionAdd) {\n    super({\n      version,\n      type: TransactionType.Miner,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    this.nonce = nonce;\n\n    if (this.version !== 0) {\n      throw new InvalidFormatError(`Expected version to be 0. Received: ${this.version}`);\n    }\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly Witness[];\n    readonly attributes?: readonly Attribute[];\n    readonly inputs?: readonly Input[];\n    readonly outputs?: readonly Output[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      nonce: this.nonce,\n    });\n  }\n\n  public serializeExclusiveBase(writer: BinaryWriter): void {\n    writer.writeUInt32LE(this.nonce);\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<MinerTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    return {\n      ...transactionBaseJSON,\n      type: 'MinerTransaction',\n      nonce: this.nonce,\n    };\n  }\n\n  public async getNetworkFee(_context: FeeContext): Promise<BN> {\n    return utils.ZERO;\n  }\n\n  public async verify(options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    const [results] = await Promise.all([super.verify(options), this.verifyInternal(options)]);\n\n    return results;\n  }\n\n  private async verifyInternal(options: TransactionVerifyOptions): Promise<void> {\n    const { getOutput, utilityToken } = options;\n    const results = await this.getTransactionResults({ getOutput });\n    // tslint:disable-next-line no-unused\n    const resultsIssue = Object.entries(results).filter(([_, value]) => value.lt(utils.ZERO));\n\n    // tslint:disable-next-line no-unused\n    if (resultsIssue.some(([assetHex, _]) => !common.uInt256Equal(common.hexToUInt256(assetHex), utilityToken.hash))) {\n      throw new VerifyError('Invalid miner result');\n    }\n  }\n}\n","import { BinaryWriter } from '../BinaryWriter';\nimport { createSerializeWire, SerializableWire, SerializeWire } from './Serializable';\n\nexport interface WitnessAdd {\n  readonly verification: Buffer;\n  readonly invocation: Buffer;\n}\n\nexport class WitnessModel implements SerializableWire<WitnessModel> {\n  public readonly verification: Buffer;\n  public readonly invocation: Buffer;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ invocation, verification }: WitnessAdd) {\n    this.invocation = invocation;\n    this.verification = verification;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeVarBytesLE(this.invocation);\n    writer.writeVarBytesLE(this.verification);\n  }\n}\n","import { common, InvalidFormatError, IOHelper, IssueTransactionJSON, UInt160Hex } from '@neo-one/client-common';\nimport { IssueTransactionModel } from '@neo-one/client-full-common';\nimport { Constructor } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { VerifyError } from '../errors';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport {\n  FeeContext,\n  TransactionBase,\n  TransactionBaseAdd,\n  TransactionGetScriptHashesForVerifyingOptions,\n  TransactionVerifyOptions,\n} from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\n// tslint:disable-next-line\nexport interface IssueTransactionAdd extends TransactionBaseAdd {}\n\nexport class IssueTransaction extends TransactionBase<\n  TransactionType.Issue,\n  IssueTransactionJSON,\n  Constructor<IssueTransactionModel<Attribute, Input, Output, Witness>>\n>(IssueTransactionModel) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): IssueTransaction {\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Issue) {\n      throw new InvalidFormatError(`Expected transaction type to be ${TransactionType.Issue}. Received: ${type}`);\n    }\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n    });\n  }\n\n  protected readonly sizeExclusive: () => number = utils.lazy(() => IOHelper.sizeOfUInt8);\n  private readonly issueGetScriptHashesForVerifyingInternal: (\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ) => Promise<Set<UInt160Hex>>;\n\n  public constructor(add: IssueTransactionAdd) {\n    super(add);\n\n    const getScriptHashesForVerifying = super.getScriptHashesForVerifying.bind(this);\n    this.issueGetScriptHashesForVerifyingInternal = utils.lazyAsync(\n      async (options: TransactionGetScriptHashesForVerifyingOptions) => {\n        const { getOutput, getAsset } = options;\n        const [hashes, issuerHashes] = await Promise.all([\n          getScriptHashesForVerifying(options),\n          this.getTransactionResults({ getOutput }).then(async (results) =>\n            Promise.all(\n              Object.entries(results)\n                // tslint:disable-next-line no-unused\n                .filter(([_, value]) => value.lt(utils.ZERO))\n                // tslint:disable-next-line no-unused\n                .map(async ([assetHash, _]) => {\n                  const asset = await getAsset({\n                    hash: common.hexToUInt256(assetHash),\n                  });\n\n                  return common.uInt160ToHex(asset.issuer);\n                }),\n            ),\n          ),\n        ]);\n\n        return new Set([...hashes, ...issuerHashes]);\n      },\n    );\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<IssueTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    return {\n      ...transactionBaseJSON,\n      type: 'IssueTransaction',\n    };\n  }\n\n  public getSystemFee(context: FeeContext): BN {\n    if (this.version >= 1) {\n      return utils.ZERO;\n    }\n\n    const { governingToken, utilityToken } = context;\n    if (\n      this.outputs.every(\n        (output) =>\n          common.uInt256Equal(output.asset, governingToken.hash) ||\n          common.uInt256Equal(output.asset, utilityToken.hash),\n      )\n    ) {\n      return utils.ZERO;\n    }\n\n    return super.getSystemFee(context);\n  }\n\n  public async getScriptHashesForVerifying(\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ): Promise<Set<UInt160Hex>> {\n    return this.issueGetScriptHashesForVerifyingInternal(options);\n  }\n\n  public async verify(options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    const [results] = await Promise.all([super.verify(options), this.verifyInternal(options)]);\n\n    return results;\n  }\n\n  private async verifyInternal(options: TransactionVerifyOptions): Promise<void> {\n    const { getOutput, getAsset, memPool = [] } = options;\n    const results = await this.getTransactionResults({ getOutput });\n    await Promise.all(\n      Object.entries(results).map(async ([assetHex, value]) => {\n        const hash = common.hexToUInt256(assetHex);\n        const asset = await getAsset({ hash });\n        if (asset.amount.lt(utils.ZERO)) {\n          return;\n        }\n\n        const issued = asset.available.add(\n          memPool\n            .filter((transaction) => transaction !== this)\n            .reduce(\n              (acc, transaction) =>\n                transaction.outputs\n                  .filter((output) => common.uInt256Equal(hash, output.asset))\n                  .reduce((innerAcc, output) => innerAcc.add(output.value), acc),\n\n              utils.ZERO,\n            ),\n        );\n\n        if (asset.amount.sub(issued).lt(value.neg())) {\n          throw new VerifyError('Invalid issue amount');\n        }\n      }),\n    );\n  }\n}\n","import {\n  ClaimTransactionJSON,\n  ClaimTransactionModel,\n  ClaimTransactionModelAdd,\n  common,\n  InvalidFormatError,\n  IOHelper,\n  UInt160Hex,\n} from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { VerifyError } from '../errors';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { hasDuplicateInputs, hasIntersectingInputs } from './common';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport {\n  FeeContext,\n  GetReferencesOptions,\n  TransactionBase,\n  TransactionGetScriptHashesForVerifyingOptions,\n  TransactionVerifyOptions,\n} from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\nexport interface ClaimTransactionAdd extends ClaimTransactionModelAdd<Attribute, Input, Output, Witness> {}\n\nexport class ClaimTransaction extends TransactionBase<\n  TransactionType.Claim,\n  ClaimTransactionJSON,\n  Constructor<ClaimTransactionModel<Attribute, Input, Output, Witness>>\n>(ClaimTransactionModel) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): ClaimTransaction {\n    const { reader } = options;\n\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Claim) {\n      throw new InvalidFormatError(`Expected transaction type to be ${TransactionType.Claim}. Received: ${type}`);\n    }\n\n    const claims = reader.readArray(() => Input.deserializeWireBase(options));\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      claims,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n    });\n  }\n\n  public readonly claims!: readonly Input[];\n  protected readonly sizeExclusive: () => number = utils.lazy(\n    () => IOHelper.sizeOfUInt8 + IOHelper.sizeOfArray(this.claims, (claim) => claim.size),\n  );\n  private readonly claimGetScriptHashesForVerifyingInternal: (\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ) => Promise<Set<UInt160Hex>>;\n\n  public constructor(add: ClaimTransactionAdd) {\n    super(add);\n\n    const getScriptHashesForVerifying = super.getScriptHashesForVerifying.bind(this);\n    this.claimGetScriptHashesForVerifyingInternal = utils.lazyAsync(\n      async (options: TransactionGetScriptHashesForVerifyingOptions) => {\n        const { getOutput } = options;\n        const [hashesSet, hashes] = await Promise.all([\n          getScriptHashesForVerifying(options),\n          Promise.all(\n            this.claims.map(async (claim) => {\n              const output = await getOutput(claim);\n\n              return common.uInt160ToHex(output.address);\n            }),\n          ),\n        ]);\n\n        return new Set([...hashesSet, ...hashes]);\n      },\n    );\n  }\n\n  public async getNetworkFee(_context: FeeContext): Promise<BN> {\n    return utils.ZERO;\n  }\n\n  public async getClaimReferences({ getOutput }: GetReferencesOptions): Promise<readonly Output[]> {\n    return Promise.all(this.claims.map(async (input) => getOutput(input)));\n  }\n\n  public async getScriptHashesForVerifying(\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ): Promise<Set<UInt160Hex>> {\n    return this.claimGetScriptHashesForVerifyingInternal(options);\n  }\n\n  public async verify(options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    const [results] = await Promise.all([super.verify(options), this.verifyInternal(options)]);\n\n    return results;\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<ClaimTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    return {\n      ...transactionBaseJSON,\n      type: 'ClaimTransaction',\n      claims: this.claims.map((claim) => claim.serializeJSON(context)),\n    };\n  }\n\n  private async verifyInternal(options: TransactionVerifyOptions): Promise<void> {\n    const { calculateClaimAmount, getOutput, utilityToken, memPool = [] } = options;\n    if (hasDuplicateInputs(this.claims)) {\n      throw new VerifyError('Duplicate claims');\n    }\n\n    if (\n      memPool.some(\n        (transaction) =>\n          transaction instanceof ClaimTransaction &&\n          transaction.type === TransactionType.Claim &&\n          hasIntersectingInputs(this.claims, transaction.claims),\n      )\n    ) {\n      throw new VerifyError('Duplicate claims in mempool');\n    }\n    const [results, claimAmount] = await Promise.all([\n      this.getTransactionResults({ getOutput }),\n      calculateClaimAmount(this.claims).catch((error) => {\n        throw new VerifyError(`Invalid claims: ${error.message}`);\n      }),\n    ]);\n\n    // tslint:disable-next-line no-unused\n    const result = Object.entries(results).find(([assetHex, _value]) =>\n      common.uInt256Equal(common.hexToUInt256(assetHex), utilityToken.hash),\n    );\n\n    if (result === undefined || result[1].gt(utils.ZERO)) {\n      throw new VerifyError('Invalid claim value');\n    }\n\n    if (!claimAmount.eq(result[1].neg())) {\n      throw new VerifyError('Invalid claim value');\n    }\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  crypto,\n  ECPoint,\n  EnrollmentTransactionJSON,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  TransactionBaseModel,\n  UInt160Hex,\n} from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { VerifyError } from '../errors';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport {\n  TransactionBase,\n  TransactionBaseAdd,\n  TransactionGetScriptHashesForVerifyingOptions,\n  TransactionVerifyOptions,\n} from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\nexport interface EnrollmentTransactionAdd extends TransactionBaseAdd {\n  readonly publicKey: ECPoint;\n}\n\nexport class EnrollmentTransaction extends TransactionBase<\n  TransactionType.Enrollment,\n  EnrollmentTransactionJSON,\n  Constructor<TransactionBaseModel<TransactionType.Enrollment, Attribute, Input, Output, Witness>>\n  // tslint:disable-next-line no-any\n>(TransactionBaseModel as any) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): EnrollmentTransaction {\n    const { reader } = options;\n\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Enrollment) {\n      throw new InvalidFormatError(`Expected transaction type ${TransactionType.Enrollment}. Received: ${type}`);\n    }\n\n    const publicKey = reader.readECPoint();\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      publicKey,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n    });\n  }\n\n  public readonly publicKey: ECPoint;\n  protected readonly sizeExclusive: () => number = utils.lazy(\n    () => IOHelper.sizeOfUInt8 + IOHelper.sizeOfECPoint(this.publicKey),\n  );\n  private readonly enrollmentGetScriptHashesForVerifyingInternal: (\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ) => Promise<Set<UInt160Hex>>;\n\n  public constructor({ version, attributes, inputs, outputs, scripts, hash, publicKey }: EnrollmentTransactionAdd) {\n    super({\n      version,\n      type: TransactionType.Enrollment,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    this.publicKey = publicKey;\n\n    if (this.version !== 0) {\n      throw new InvalidFormatError(`Expected version to be 0. Received: ${this.version}`);\n    }\n\n    const getScriptHashesForVerifying = super.getScriptHashesForVerifying.bind(this);\n    this.enrollmentGetScriptHashesForVerifyingInternal = utils.lazyAsync(\n      async (options: TransactionGetScriptHashesForVerifyingOptions) => {\n        const hashes = await getScriptHashesForVerifying(options);\n\n        return new Set([...hashes, common.uInt160ToHex(crypto.getVerificationScriptHash(this.publicKey))]);\n      },\n    );\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly Witness[];\n    readonly attributes?: readonly Attribute[];\n    readonly inputs?: readonly Input[];\n    readonly outputs?: readonly Output[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      publicKey: this.publicKey,\n    }) as this;\n  }\n\n  public serializeExclusiveBase(writer: BinaryWriter): void {\n    writer.writeECPoint(this.publicKey);\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<EnrollmentTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    return {\n      ...transactionBaseJSON,\n      type: 'EnrollmentTransaction',\n      pubkey: JSONHelper.writeECPoint(this.publicKey),\n    };\n  }\n\n  public async getScriptHashesForVerifying(\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ): Promise<Set<UInt160Hex>> {\n    return this.enrollmentGetScriptHashesForVerifyingInternal(options);\n  }\n\n  public async verify(_options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    throw new VerifyError('Enrollment transactions are obsolete');\n  }\n}\n","import { ContractTransactionJSON, InvalidFormatError, IOHelper, TransactionBaseModel } from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport { TransactionBase, TransactionBaseAdd } from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\nexport type ContractTransactionAdd = TransactionBaseAdd;\n\nexport class ContractTransaction extends TransactionBase<\n  TransactionType.Contract,\n  ContractTransactionJSON,\n  Constructor<TransactionBaseModel<TransactionType.Contract, Attribute, Input, Output, Witness>>\n  // tslint:disable-next-line no-any\n>(TransactionBaseModel as any) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): ContractTransaction {\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Contract) {\n      throw new InvalidFormatError(`Expected transaction type to be ${TransactionType.Contract}. Received: ${type}`);\n    }\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n    });\n  }\n\n  protected readonly sizeExclusive: () => number = utils.lazy(() => IOHelper.sizeOfUInt8);\n\n  public constructor({ version, attributes, inputs, outputs, scripts, hash }: TransactionBaseAdd) {\n    super({\n      version,\n      type: TransactionType.Contract,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    if (this.version !== 0) {\n      throw new InvalidFormatError(`Expected version to be 0. Received: ${this.version}`);\n    }\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly Witness[];\n    readonly attributes?: readonly Attribute[];\n    readonly inputs?: readonly Input[];\n    readonly outputs?: readonly Output[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n    });\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<ContractTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    return {\n      ...transactionBaseJSON,\n      type: 'ContractTransaction',\n    };\n  }\n}\n","import {\n  BinaryWriter,\n  InvalidFormatError,\n  IOHelper,\n  StateTransactionJSON,\n  TransactionBaseModel,\n  UInt160Hex,\n} from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport { StateDescriptor } from './state';\nimport {\n  FeeContext,\n  TransactionBase,\n  TransactionBaseAdd,\n  TransactionGetScriptHashesForVerifyingOptions,\n  TransactionVerifyOptions,\n} from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\nexport interface StateTransactionAdd extends TransactionBaseAdd {\n  readonly descriptors: readonly StateDescriptor[];\n}\n\nexport class StateTransaction extends TransactionBase<\n  TransactionType.State,\n  StateTransactionJSON,\n  Constructor<TransactionBaseModel<TransactionType.State, Attribute, Input, Output, Witness>>\n  // tslint:disable-next-line no-any\n>(TransactionBaseModel as any) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): StateTransaction {\n    const { reader } = options;\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.State) {\n      throw new InvalidFormatError(`Expected transaction type ${TransactionType.State}. Received: ${type}`);\n    }\n\n    const descriptors = reader.readArray(() => StateDescriptor.deserializeWireBase(options));\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      descriptors,\n    });\n  }\n\n  public readonly descriptors: readonly StateDescriptor[];\n  protected readonly sizeExclusive: () => number = utils.lazy(() =>\n    IOHelper.sizeOfArray(this.descriptors, (descriptor) => descriptor.size),\n  );\n  private readonly stateGetScriptHashesForVerifyingInternal: (\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ) => Promise<Set<UInt160Hex>>;\n\n  public constructor({ version, attributes, inputs, outputs, scripts, hash, descriptors }: StateTransactionAdd) {\n    super({\n      version,\n      type: TransactionType.State,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    this.descriptors = descriptors;\n\n    if (this.version !== 0) {\n      throw new InvalidFormatError(`Expected version to be 0. Received: ${this.version}`);\n    }\n\n    const getScriptHashesForVerifying = super.getScriptHashesForVerifying.bind(this);\n    this.stateGetScriptHashesForVerifyingInternal = utils.lazyAsync(\n      async (options: TransactionGetScriptHashesForVerifyingOptions) => {\n        const mutableHashes = await getScriptHashesForVerifying(options);\n        this.descriptors.forEach((descriptor) => {\n          descriptor.getScriptHashesForVerifying().forEach((scriptHash) => {\n            mutableHashes.add(scriptHash);\n          });\n        });\n\n        return mutableHashes;\n      },\n    );\n  }\n\n  public getSystemFee(context: FeeContext): BN {\n    return this.descriptors.reduce((value, descriptor) => value.add(descriptor.getSystemFee(context)), utils.ZERO);\n  }\n\n  public async getScriptHashesForVerifying(\n    options: TransactionGetScriptHashesForVerifyingOptions,\n  ): Promise<Set<UInt160Hex>> {\n    return this.stateGetScriptHashesForVerifyingInternal(options);\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly Witness[];\n    readonly attributes?: readonly Attribute[];\n    readonly inputs?: readonly Input[];\n    readonly outputs?: readonly Output[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      descriptors: this.descriptors,\n    });\n  }\n\n  public serializeExclusiveBase(writer: BinaryWriter): void {\n    writer.writeArray(this.descriptors, (descriptor) => {\n      descriptor.serializeWireBase(writer);\n    });\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<StateTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    return {\n      ...transactionBaseJSON,\n      type: 'StateTransaction',\n      descriptors: this.descriptors.map((descriptor) => descriptor.serializeJSON(context)),\n    };\n  }\n\n  public async verify(options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    const [results] = await Promise.all([super.verify(options), this.verifyInternal(options)]);\n\n    return results;\n  }\n\n  private async verifyInternal(options: TransactionVerifyOptions): Promise<void> {\n    await Promise.all(this.descriptors.map(async (descriptor) => descriptor.verify(options)));\n  }\n}\n","import {\n  BinaryWriter,\n  InvalidFormatError,\n  IOHelper,\n  PublishTransactionJSON,\n  TransactionBaseModel,\n} from '@neo-one/client-common';\nimport { serializeContractWireBase } from '@neo-one/client-full-common';\nimport { Constructor } from '@neo-one/utils';\nimport { Contract, deserializeContractWireBase, sizeOfContract } from '../Contract';\nimport { VerifyError } from '../errors';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport { TransactionBase, TransactionBaseAdd, TransactionVerifyOptions } from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\nexport interface PublishTransactionAdd extends TransactionBaseAdd {\n  readonly contract: Contract;\n}\n\nexport class PublishTransaction extends TransactionBase<\n  TransactionType.Publish,\n  PublishTransactionJSON,\n  Constructor<TransactionBaseModel<TransactionType.Publish, Attribute, Input, Output, Witness>>\n  // tslint:disable-next-line no-any\n>(TransactionBaseModel as any) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): PublishTransaction {\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Publish) {\n      throw new InvalidFormatError(`Expected transaction type to be ${TransactionType.Publish}. Received: ${type}`);\n    }\n\n    const contract = deserializeContractWireBase({\n      ...options,\n      publishVersion: version,\n    });\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      contract,\n    });\n  }\n\n  public readonly contract: Contract;\n  protected readonly sizeExclusive: () => number = utils.lazy(\n    () =>\n      IOHelper.sizeOfUInt8 +\n      sizeOfContract({\n        script: this.contract.script,\n        parameterList: this.contract.parameterList,\n        name: this.contract.name,\n        codeVersion: this.contract.codeVersion,\n        author: this.contract.author,\n        email: this.contract.email,\n        description: this.contract.description,\n        publishVersion: this.version,\n      }),\n  );\n\n  public constructor({ version, attributes, inputs, outputs, scripts, hash, contract }: PublishTransactionAdd) {\n    super({\n      version,\n      type: TransactionType.Publish,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    this.contract = contract;\n\n    if (this.version > 1) {\n      throw new InvalidFormatError(`Expected version to be greater than 1. Received: ${this.version}`);\n    }\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly Witness[];\n    readonly attributes?: readonly Attribute[];\n    readonly inputs?: readonly Input[];\n    readonly outputs?: readonly Output[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      contract: this.contract,\n    });\n  }\n\n  public serializeExclusiveBase(writer: BinaryWriter): void {\n    serializeContractWireBase({\n      contract: this.contract,\n      writer,\n      publishVersion: this.version,\n    });\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<PublishTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    return {\n      ...transactionBaseJSON,\n      type: 'PublishTransaction',\n      contract: this.contract.serializeJSON(context),\n    };\n  }\n\n  public async verify(_options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    throw new VerifyError('Publish transactions are obsolete');\n  }\n}\n","import {\n  common,\n  crypto,\n  InvalidFormatError,\n  InvocationDataJSON,\n  InvocationTransactionJSON,\n  InvocationTransactionModel,\n  InvocationTransactionModelAdd,\n  IOHelper,\n  JSONHelper,\n} from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { VerifyError } from '../errors';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute } from './attribute';\nimport { Input } from './Input';\nimport { Output } from './Output';\nimport { FeeContext, TransactionBase, TransactionVerifyOptions } from './TransactionBase';\nimport { TransactionType } from './TransactionType';\n\nexport interface InvocationTransactionAdd extends InvocationTransactionModelAdd<Attribute, Input, Output, Witness> {}\n\nconst MAX_SCRIPT_SIZE = 65536;\n\nexport class InvocationTransaction extends TransactionBase<\n  TransactionType.Invocation,\n  InvocationTransactionJSON,\n  Constructor<InvocationTransactionModel<Attribute, Input, Output, Witness>>\n>(InvocationTransactionModel) {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): InvocationTransaction {\n    const { reader } = options;\n\n    const { type, version } = super.deserializeTransactionBaseStartWireBase(options);\n\n    if (type !== TransactionType.Invocation) {\n      throw new InvalidFormatError(`Expected transaction type to be ${TransactionType.Invocation}. Received: ${type}`);\n    }\n\n    const script = reader.readVarBytesLE(MAX_SCRIPT_SIZE);\n    if (script.length === 0) {\n      throw new InvalidFormatError('Expected invocation script length to not be 0');\n    }\n\n    let gas = utils.ZERO;\n    if (version >= 1) {\n      gas = reader.readFixed8();\n    }\n\n    const { attributes, inputs, outputs, scripts } = super.deserializeTransactionBaseEndWireBase(options);\n\n    return new this({\n      version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      script,\n      gas,\n    });\n  }\n\n  protected readonly sizeExclusive: () => number = utils.lazy(\n    () => IOHelper.sizeOfUInt8 + IOHelper.sizeOfVarBytesLE(this.script),\n  );\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<InvocationTransactionJSON> {\n    const transactionBaseJSON = await super.serializeTransactionBaseJSON(context);\n\n    const data = await context.tryGetInvocationData(this);\n    let invocationDataJSON: InvocationDataJSON | undefined;\n    if (data !== undefined) {\n      const {\n        asset,\n        contracts,\n        deletedContractHashes,\n        migratedContractHashes,\n        voteUpdates,\n        actions,\n        result,\n        storageChanges,\n      } = data;\n      invocationDataJSON = {\n        result: result.serializeJSON(context),\n        asset: asset === undefined ? undefined : asset.serializeJSON(context),\n        contracts: contracts.map((contract) => contract.serializeJSON(context)),\n        deletedContractHashes: deletedContractHashes.map((hash) => common.uInt160ToString(hash)),\n        migratedContractHashes: migratedContractHashes.map<readonly [string, string]>(\n          ([from, to]) => [common.uInt160ToString(from), common.uInt160ToString(to)] as const,\n        ),\n        voteUpdates: voteUpdates.map<readonly [string, string[]]>(\n          ([address, votes]) =>\n            [\n              crypto.scriptHashToAddress({\n                addressVersion: context.addressVersion,\n                scriptHash: address,\n              }),\n              votes.map((vote) => common.ecPointToString(vote)),\n            ] as const,\n        ),\n        actions: actions.map((action) => action.serializeJSON(context)),\n        storageChanges: storageChanges.map((storageChange) => storageChange.serializeJSON(context)),\n      };\n    }\n\n    return {\n      ...transactionBaseJSON,\n      type: 'InvocationTransaction',\n      script: JSONHelper.writeBuffer(this.script),\n      gas: JSONHelper.writeFixed8(this.gas),\n      invocationData: invocationDataJSON,\n    };\n  }\n\n  public getSystemFee(_context: FeeContext): BN {\n    return this.gas;\n  }\n\n  public async verify(options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n    if (!this.gas.mod(utils.ONE_HUNDRED_MILLION).eq(utils.ZERO)) {\n      throw new VerifyError('Invalid GAS amount');\n    }\n\n    return super.verify(options);\n  }\n}\n","// tslint:disable no-var-before-return prefer-immediate-return\nimport { ReadAllStorage, ReadGetAllStorage, ReadMetadataStorage, ReadStorage } from '@neo-one/node-core';\nimport { LevelUp } from 'levelup';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { KeyNotFoundError } from './errors';\nimport { streamToObservable } from './streamToObservable';\n\ntype SerializeKey<Key> = (key: Key) => string;\n\nexport function createTryGet<Key, Value>({\n  get,\n}: {\n  readonly get: (key: Key) => Promise<Value>;\n}): (key: Key) => Promise<Value | undefined> {\n  return async (key: Key): Promise<Value | undefined> => {\n    try {\n      const result = await get(key);\n\n      return result;\n    } catch (error) {\n      if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n        return undefined;\n      }\n      throw error;\n    }\n  };\n}\n\nexport function createTryGetLatest<Key, Value>({\n  db,\n  latestKey,\n  deserializeResult,\n  get,\n}: {\n  readonly db: LevelUp;\n  readonly latestKey: string;\n  readonly deserializeResult: (latestResult: Buffer) => Key;\n  readonly get: (key: Key) => Promise<Value>;\n}): () => Promise<Value | undefined> {\n  return async (): Promise<Value | undefined> => {\n    try {\n      const result = await db.get(latestKey);\n      const value = await get(deserializeResult(result as Buffer));\n\n      return value;\n    } catch (error) {\n      if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n        return undefined;\n      }\n      throw error;\n    }\n  };\n}\n\nexport function createReadStorage<Key, Value>({\n  db,\n  serializeKey,\n  deserializeValue,\n}: {\n  readonly db: LevelUp;\n  readonly serializeKey: SerializeKey<Key>;\n  readonly deserializeValue: (value: Buffer) => Value;\n}): ReadStorage<Key, Value> {\n  const get = async (key: Key): Promise<Value> => {\n    const serialized = serializeKey(key);\n    try {\n      const result = await db.get(serialized);\n\n      return deserializeValue(result as Buffer);\n    } catch (error) {\n      if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n        throw new KeyNotFoundError(serialized);\n      }\n\n      throw error;\n    }\n  };\n\n  return { get, tryGet: createTryGet({ get }) };\n}\n\nexport function createAll$<Value>({\n  db,\n  minKey,\n  maxKey,\n  deserializeValue,\n}: {\n  readonly db: LevelUp;\n  readonly minKey: string;\n  readonly maxKey: string;\n  readonly deserializeValue: (value: Buffer) => Value;\n}): Observable<Value> {\n  return streamToObservable(() =>\n    db.createValueStream({\n      gte: minKey,\n      lte: maxKey,\n    }),\n  ).pipe(map(deserializeValue));\n}\n\nexport function createReadAllStorage<Key, Value>({\n  db,\n  serializeKey,\n  minKey,\n  maxKey,\n  deserializeValue,\n}: {\n  readonly db: LevelUp;\n  readonly serializeKey: SerializeKey<Key>;\n  readonly minKey: string;\n  readonly maxKey: string;\n  readonly deserializeValue: (value: Buffer) => Value;\n}): ReadAllStorage<Key, Value> {\n  const readStorage = createReadStorage({\n    db,\n    serializeKey,\n    deserializeValue,\n  });\n\n  return {\n    get: readStorage.get,\n    tryGet: readStorage.tryGet,\n    all$: createAll$({ db, minKey, maxKey, deserializeValue }),\n  };\n}\n\nexport function createReadGetAllStorage<Key, Keys, Value>({\n  db,\n  serializeKey,\n  getMinKey,\n  getMaxKey,\n  deserializeValue,\n}: {\n  readonly db: LevelUp;\n  readonly serializeKey: SerializeKey<Key>;\n  readonly getMinKey: (keys: Keys) => string;\n  readonly getMaxKey: (keys: Keys) => string;\n  readonly deserializeValue: (value: Buffer) => Value;\n}): ReadGetAllStorage<Key, Keys, Value> {\n  const readStorage = createReadStorage({\n    db,\n    serializeKey,\n    deserializeValue,\n  });\n\n  return {\n    get: readStorage.get,\n    tryGet: readStorage.tryGet,\n    getAll$: (keys: Keys) =>\n      createAll$({\n        db,\n        minKey: getMinKey(keys),\n        maxKey: getMaxKey(keys),\n        deserializeValue,\n      }),\n  };\n}\n\nexport function createTryGetMetadata<Value>({\n  get,\n}: {\n  readonly get: () => Promise<Value>;\n}): () => Promise<Value | undefined> {\n  return async (): Promise<Value | undefined> => {\n    try {\n      const result = await get();\n\n      return result;\n    } catch (error) {\n      if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n        return undefined;\n      }\n      throw error;\n    }\n  };\n}\n\nexport function createReadMetadataStorage<Value>({\n  db,\n  key,\n  deserializeValue,\n}: {\n  readonly db: LevelUp;\n  readonly key: string;\n  readonly deserializeValue: (value: Buffer) => Value;\n}): ReadMetadataStorage<Value> {\n  const get = async (): Promise<Value> => {\n    try {\n      const result = await db.get(key);\n\n      return deserializeValue(result as Buffer);\n    } catch (error) {\n      if (error.notFound || error.code === 'KEY_NOT_FOUND') {\n        throw new KeyNotFoundError(key);\n      }\n\n      throw error;\n    }\n  };\n\n  return { get, tryGet: createTryGet({ get }) as ReadMetadataStorage<Value>['tryGet'] };\n}\n","import { Observable, Observer } from 'rxjs';\n\nexport const streamToObservable = (getStream: () => NodeJS.ReadableStream): Observable<Buffer> =>\n  new Observable((observer: Observer<Buffer>) => {\n    const stream = getStream();\n    let done = false;\n    const cleanup = () => {\n      if (!done) {\n        done = true;\n        // eslint-disable-next-line\n        stream.removeListener('end', onEnd);\n        // eslint-disable-next-line\n        stream.removeListener('error', onError);\n        // eslint-disable-next-line\n        stream.removeListener('data', onData);\n      }\n    };\n    const onEnd = () => {\n      cleanup();\n      observer.complete();\n    };\n    const onError = (error: Error) => {\n      cleanup();\n      observer.error(error);\n    };\n    const onData = (data: Buffer) => observer.next(data);\n\n    stream.once('error', onError);\n    stream.once('end', onEnd);\n    stream.on('data', onData);\n\n    return cleanup;\n  });\n","import { BinaryWriter, LogActionJSON } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../Serializable';\nimport { ActionBase, ActionBaseAdd } from './ActionBase';\nimport { ActionType } from './ActionType';\n\nexport interface LogAdd extends ActionBaseAdd {\n  readonly message: string;\n}\n\nexport class LogAction extends ActionBase<LogAction, ActionType.Log> implements SerializableJSON<LogActionJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): LogAction {\n    const { reader } = options;\n    const action = super.deserializeActionBaseWireBase(options);\n    const message = reader.readVarString(10240);\n\n    return new this({\n      version: action.version,\n      index: action.index,\n      scriptHash: action.scriptHash,\n      message,\n    });\n  }\n\n  public readonly message: string;\n\n  public constructor({ version, index, scriptHash, message }: LogAdd) {\n    const options = {\n      // tslint:disable-next-line no-useless-cast\n      type: ActionType.Log as ActionType.Log,\n      version,\n      index,\n      scriptHash,\n    };\n    super(options);\n\n    this.message = message;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarString(this.message, 10240);\n  }\n\n  public serializeJSON(context: SerializeJSONContext): LogActionJSON {\n    const action = super.serializeActionBaseJSON(context);\n\n    return {\n      type: 'Log',\n      version: action.version,\n      index: action.index,\n      scriptHash: action.scriptHash,\n      message: this.message,\n    };\n  }\n}\n","import { InvalidAttributeUsageError, InvalidAttributeUsageJSONError } from '../../../errors';\nimport { AttributeUsageJSON } from '../../types';\n\nexport enum AttributeUsageModel {\n  ContractHash = 0x00,\n  ECDH02 = 0x02,\n  ECDH03 = 0x03,\n  Script = 0x20,\n  Vote = 0x30,\n  DescriptionUrl = 0x81,\n  Description = 0x90,\n  Hash1 = 0xa1,\n  Hash2 = 0xa2,\n  Hash3 = 0xa3,\n  Hash4 = 0xa4,\n  Hash5 = 0xa5,\n  Hash6 = 0xa6,\n  Hash7 = 0xa7,\n  Hash8 = 0xa8,\n  Hash9 = 0xa9,\n  Hash10 = 0xaa,\n  Hash11 = 0xab,\n  Hash12 = 0xac,\n  Hash13 = 0xad,\n  Hash14 = 0xae,\n  Hash15 = 0xaf,\n  Remark = 0xf0,\n  Remark1 = 0xf1,\n  Remark2 = 0xf2,\n  Remark3 = 0xf3,\n  Remark4 = 0xf4,\n  Remark5 = 0xf5,\n  Remark6 = 0xf6,\n  Remark7 = 0xf7,\n  Remark8 = 0xf8,\n  Remark9 = 0xf9,\n  Remark10 = 0xfa,\n  Remark11 = 0xfb,\n  Remark12 = 0xfc,\n  Remark13 = 0xfd,\n  Remark14 = 0xfe,\n  Remark15 = 0xff,\n}\n\nconst isAttributeUsage = (value: number): value is AttributeUsageModel =>\n  // tslint:disable-next-line strict-type-predicates\n  AttributeUsageModel[value] !== undefined;\n\nexport const assertAttributeUsage = (value: number): AttributeUsageModel => {\n  if (isAttributeUsage(value)) {\n    return value;\n  }\n\n  throw new InvalidAttributeUsageError(value);\n};\n\nexport const toJSONAttributeUsage = (usage: AttributeUsageModel): AttributeUsageJSON =>\n  assertAttributeUsageJSON(AttributeUsageModel[usage]);\n\nexport const isAttributeUsageJSON = (usage: string): usage is AttributeUsageJSON =>\n  // tslint:disable-next-line strict-type-predicates no-any\n  AttributeUsageModel[usage as any] !== undefined;\n\nexport const assertAttributeUsageJSON = (usage: string): AttributeUsageJSON => {\n  if (isAttributeUsageJSON(usage)) {\n    return usage;\n  }\n\n  throw new InvalidAttributeUsageJSONError(usage);\n};\n\nexport const toAttributeUsage = (usage: AttributeUsageJSON): AttributeUsageModel =>\n  assertAttributeUsage(AttributeUsageModel[usage]);\n","import { BinaryWriter, NotificationActionJSON } from '@neo-one/client-common';\nimport { ContractParameter, deserializeContractParameterWireBase } from '../contractParameter';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../Serializable';\nimport { ActionBase, ActionBaseAdd } from './ActionBase';\nimport { ActionType } from './ActionType';\n\nexport interface NotificationAdd extends ActionBaseAdd {\n  readonly args: readonly ContractParameter[];\n}\n\nexport class NotificationAction extends ActionBase<NotificationAction, ActionType.Notification>\n  implements SerializableJSON<NotificationActionJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): NotificationAction {\n    const { reader } = options;\n    const action = super.deserializeActionBaseWireBase(options);\n    const args = reader.readArray(() => deserializeContractParameterWireBase(options));\n\n    return new this({\n      version: action.version,\n      index: action.index,\n      scriptHash: action.scriptHash,\n      args,\n    });\n  }\n\n  public readonly args: readonly ContractParameter[];\n\n  public constructor({ version, index, scriptHash, args }: NotificationAdd) {\n    const options = {\n      // tslint:disable-next-line no-useless-cast\n      type: ActionType.Notification as ActionType.Notification,\n      version,\n      index,\n      scriptHash,\n    };\n    super(options);\n\n    this.args = args;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeArray(this.args, (arg) => arg.serializeWireBase(writer));\n  }\n\n  public serializeJSON(context: SerializeJSONContext): NotificationActionJSON {\n    const action = super.serializeActionBaseJSON(context);\n\n    return {\n      type: 'Notification',\n      version: action.version,\n      index: action.index,\n      scriptHash: action.scriptHash,\n      args: this.args.map((arg) => arg.serializeJSON(context)),\n    };\n  }\n}\n","import { BinaryWriter, IOHelper, JSONHelper } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { utils } from '../utils';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport interface SignatureContractParameterJSON {\n  readonly type: 'Signature';\n  readonly value: string;\n}\n\nexport class SignatureContractParameter extends ContractParameterBase<\n  SignatureContractParameter,\n  SignatureContractParameterJSON,\n  ContractParameterType.Signature\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): SignatureContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = reader.readVarBytesLE();\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.Signature;\n  public readonly value: Buffer;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: Buffer) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfVarBytesLE(this.value));\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBuffer(): Buffer {\n    return this.value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarBytesLE(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): SignatureContractParameterJSON {\n    return {\n      type: 'Signature',\n      value: JSONHelper.writeBuffer(this.value),\n    };\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  Hash256ContractParameterJSON,\n  IOHelper,\n  JSONHelper,\n  UInt256,\n  utils,\n} from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class Hash256ContractParameter extends ContractParameterBase<\n  Hash256ContractParameter,\n  Hash256ContractParameterJSON,\n  ContractParameterType.Hash256\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): Hash256ContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = reader.readUInt256();\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.Hash256;\n  public readonly value: UInt256;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: UInt256) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfUInt256);\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBuffer(): Buffer {\n    return common.uInt256ToBuffer(this.value);\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt256(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): Hash256ContractParameterJSON {\n    return {\n      type: 'Hash256',\n      value: JSONHelper.writeUInt256(this.value),\n    };\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  ECPoint,\n  IOHelper,\n  JSONHelper,\n  PublicKeyContractParameterJSON,\n  utils,\n} from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class PublicKeyContractParameter extends ContractParameterBase<\n  PublicKeyContractParameter,\n  PublicKeyContractParameterJSON,\n  ContractParameterType.PublicKey\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): PublicKeyContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = reader.readECPoint();\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.PublicKey;\n  public readonly value: ECPoint;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: ECPoint) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfECPoint(this.value));\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBuffer(): Buffer {\n    return common.ecPointToBuffer(this.value);\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeECPoint(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): PublicKeyContractParameterJSON {\n    return {\n      type: 'PublicKey',\n      value: JSONHelper.writeECPoint(this.value),\n    };\n  }\n}\n","import { BinaryWriter, IOHelper, StringContractParameterJSON, utils } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class StringContractParameter extends ContractParameterBase<\n  StringContractParameter,\n  StringContractParameterJSON,\n  ContractParameterType.String\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): StringContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = reader.readVarString();\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.String;\n  public readonly value: string;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: string) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfVarString(this.value));\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBuffer(): Buffer {\n    return Buffer.from(this.value, 'utf8');\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarString(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): StringContractParameterJSON {\n    return {\n      type: 'String',\n      value: this.value,\n    };\n  }\n}\n","import { InteropInterfaceContractParameterJSON } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class InteropInterfaceContractParameter extends ContractParameterBase<\n  InteropInterfaceContractParameter,\n  InteropInterfaceContractParameterJSON,\n  ContractParameterType.InteropInterface\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): InteropInterfaceContractParameter {\n    super.deserializeContractParameterBaseWireBase(options);\n\n    return new this();\n  }\n\n  public readonly type = ContractParameterType.InteropInterface;\n  public readonly size: number = 0;\n\n  public serializeJSON(_context: SerializeJSONContext): InteropInterfaceContractParameterJSON {\n    return {\n      type: 'InteropInterface',\n    };\n  }\n}\n","import { VoidContractParameterJSON } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class VoidContractParameter extends ContractParameterBase<\n  VoidContractParameter,\n  VoidContractParameterJSON,\n  ContractParameterType.Void\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): VoidContractParameter {\n    super.deserializeContractParameterBaseWireBase(options);\n\n    return new this();\n  }\n\n  public readonly type = ContractParameterType.Void;\n  public readonly size: number = 0;\n\n  public asBoolean(): boolean {\n    return false;\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): VoidContractParameterJSON {\n    return {\n      type: 'Void',\n    };\n  }\n}\n","import {\n  BinaryWriter,\n  InvalidFormatError,\n  InvocationResultErrorJSON,\n  IOHelper,\n  JSONHelper,\n  utils,\n  VMState,\n} from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { ContractParameter } from '../contractParameter';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../Serializable';\nimport { InvocationResultBase } from './InvocationResultBase';\n\nexport interface InvocationResultErrorAdd {\n  readonly gasConsumed: BN;\n  readonly gasCost: BN;\n  readonly stack: readonly ContractParameter[];\n  readonly message: string;\n}\n\nconst MAX_SIZE = 1024;\n\nexport class InvocationResultError extends InvocationResultBase<VMState.Fault>\n  implements SerializableJSON<InvocationResultErrorJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): InvocationResultError {\n    const { reader } = options;\n    const { state, gasConsumed, gasCost, stack } = super.deserializeInvocationResultWireBase(options);\n    if (state !== VMState.Fault) {\n      throw new InvalidFormatError(`Expected VMState to be: ${VMState.Fault}. Received: ${state}`);\n    }\n    const message = reader.readVarString(MAX_SIZE);\n\n    return new this({ gasConsumed, gasCost, stack, message });\n  }\n\n  public readonly message: string;\n  protected readonly sizeExclusive: () => number;\n\n  public constructor({ gasConsumed, gasCost, stack, message }: InvocationResultErrorAdd) {\n    super({ state: VMState.Fault, gasConsumed, gasCost, stack });\n    this.message = message;\n    this.sizeExclusive = utils.lazy(() => IOHelper.sizeOfVarString(this.message));\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarString(this.message, MAX_SIZE);\n  }\n\n  public serializeJSON(context: SerializeJSONContext): InvocationResultErrorJSON {\n    return {\n      state: VMState.Fault,\n      gas_consumed: JSONHelper.writeFixed8(this.gasConsumed),\n      gas_cost: JSONHelper.writeFixed8(this.gasCost),\n      stack: this.stack.map((value) => value.serializeJSON(context)),\n      message: this.message,\n    };\n  }\n}\n","import { InvalidFormatError, InvocationResultSuccessJSON, JSONHelper, VMState } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { ContractParameter } from '../contractParameter';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../Serializable';\nimport { InvocationResultBase } from './InvocationResultBase';\n\nexport interface InvocationResultSuccessAdd {\n  readonly gasConsumed: BN;\n  readonly gasCost: BN;\n  readonly stack: readonly ContractParameter[];\n}\n\nexport class InvocationResultSuccess extends InvocationResultBase<VMState.Halt>\n  implements SerializableJSON<InvocationResultSuccessJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): InvocationResultSuccess {\n    const { state, gasConsumed, gasCost, stack } = super.deserializeInvocationResultWireBase(options);\n    if (state !== VMState.Halt) {\n      throw new InvalidFormatError(`Expected VMState state to be ${VMState.Halt}. Received: ${state}.`);\n    }\n\n    return new this({ gasConsumed, gasCost, stack });\n  }\n\n  public constructor({ gasConsumed, gasCost, stack }: InvocationResultSuccessAdd) {\n    super({ state: VMState.Halt, gasConsumed, gasCost, stack });\n  }\n\n  public serializeJSON(context: SerializeJSONContext): InvocationResultSuccessJSON {\n    return {\n      state: VMState.Halt,\n      gas_consumed: JSONHelper.writeFixed8(this.gasConsumed),\n      gas_cost: JSONHelper.writeFixed8(this.gasCost),\n      stack: this.stack.map((value) => value.serializeJSON(context)),\n    };\n  }\n}\n","import { InvalidFormatError, JSONHelper, StorageChangeModifyJSON, UInt160 } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../Serializable';\nimport { StorageChangeAddModifyBase } from './StorageChangeAddModifyBase';\nimport { StorageChangeType } from './StorageChangeType';\n\nexport interface StorageChangeModifyAdd {\n  readonly hash: UInt160;\n  readonly key: Buffer;\n  readonly value: Buffer;\n}\n\nexport class StorageChangeModify extends StorageChangeAddModifyBase<StorageChangeType.Modify>\n  implements SerializableJSON<StorageChangeModifyJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): StorageChangeModify {\n    const { type, hash, key, value } = super.deserializeStorageChangeAddModifyWireBase(options);\n    if (type !== StorageChangeType.Modify) {\n      throw new InvalidFormatError(`Expected storage change type to be ${StorageChangeType.Modify}. Received: ${type}`);\n    }\n\n    return new this({ hash, key, value });\n  }\n\n  public constructor(options: StorageChangeModifyAdd) {\n    super({ type: StorageChangeType.Modify, ...options });\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): StorageChangeModifyJSON {\n    return {\n      type: 'Modify',\n      hash: JSONHelper.writeUInt160(this.hash),\n      key: JSONHelper.writeBuffer(this.key),\n      value: JSONHelper.writeBuffer(this.value),\n    };\n  }\n}\n","import { InvalidFormatError, JSONHelper, StorageChangeAddJSON, UInt160 } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../Serializable';\nimport { StorageChangeAddModifyBase } from './StorageChangeAddModifyBase';\nimport { StorageChangeType } from './StorageChangeType';\n\nexport interface StorageChangeAddAdd {\n  readonly hash: UInt160;\n  readonly key: Buffer;\n  readonly value: Buffer;\n}\n\nexport class StorageChangeAdd extends StorageChangeAddModifyBase<StorageChangeType.Add>\n  implements SerializableJSON<StorageChangeAddJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): StorageChangeAdd {\n    const { type, hash, key, value } = super.deserializeStorageChangeAddModifyWireBase(options);\n    if (type !== StorageChangeType.Add) {\n      throw new InvalidFormatError(`Expected storage change type to be ${StorageChangeType.Add}. Received: ${type}`);\n    }\n\n    return new this({ hash, key, value });\n  }\n\n  public constructor(options: StorageChangeAddAdd) {\n    super({ type: StorageChangeType.Add, ...options });\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): StorageChangeAddJSON {\n    return {\n      type: 'Add',\n      hash: JSONHelper.writeUInt160(this.hash),\n      key: JSONHelper.writeBuffer(this.key),\n      value: JSONHelper.writeBuffer(this.value),\n    };\n  }\n}\n","import { InvalidFormatError, JSONHelper, StorageChangeDeleteJSON, UInt160 } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../Serializable';\nimport { StorageChangeBase } from './StorageChangeBase';\nimport { StorageChangeType } from './StorageChangeType';\n\nexport interface StorageChangeDeleteAdd {\n  readonly hash: UInt160;\n  readonly key: Buffer;\n}\n\nexport class StorageChangeDelete extends StorageChangeBase<StorageChangeType.Delete>\n  implements SerializableJSON<StorageChangeDeleteJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): StorageChangeDelete {\n    const { type, hash, key } = super.deserializeStorageChangeWireBase(options);\n    if (type !== StorageChangeType.Delete) {\n      throw new InvalidFormatError(`Expected storage change type to be ${StorageChangeType.Delete}. Received: ${type}`);\n    }\n\n    return new this({ hash, key });\n  }\n\n  public constructor({ hash, key }: StorageChangeDeleteAdd) {\n    super({ type: StorageChangeType.Delete, hash, key });\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): StorageChangeDeleteJSON {\n    return {\n      type: 'Delete',\n      hash: JSONHelper.writeUInt160(this.hash),\n      key: JSONHelper.writeBuffer(this.key),\n    };\n  }\n}\n","import { AddChange, Change, DeleteChange } from '@neo-one/node-core';\nimport { keys } from '@neo-one/node-storage-common';\nimport { utils } from '@neo-one/utils';\nimport * as common from './common';\nimport { UnknownChangeTypeError, UnknownTypeError } from './errors';\n\n// tslint:disable-next-line no-any\ntype AbstractBatch = any;\n\nconst convertAddChange = (changeIn: AddChange): readonly AbstractBatch[] => {\n  const change = changeIn;\n  switch (change.type) {\n    case 'account':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.account(change.value),\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'accountUnspent':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.accountUnspent({\n            hash: change.value.hash,\n            input: change.value.input,\n          }),\n\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'accountUnclaimed':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.accountUnclaimed({\n            hash: change.value.hash,\n            input: change.value.input,\n          }),\n\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'action':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.action({\n            index: change.value.index,\n          }),\n\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'asset':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.asset(change.value),\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'block':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.block(change.value),\n          value: change.value.serializeWire(),\n        },\n\n        {\n          type: 'put',\n          key: keys.maxBlockHashKey,\n          value: common.serializeBlockHash(change.value.hash),\n        },\n      ];\n\n    case 'blockData':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.blockData(change.value),\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'header':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.header(change.value),\n          value: change.value.serializeWire(),\n        },\n\n        {\n          type: 'put',\n          key: keys.maxHeaderHashKey,\n          value: common.serializeHeaderHash(change.value.hash),\n        },\n\n        {\n          type: 'put',\n          key: keys.serializeHeaderIndexHashKey(change.value.index),\n          value: common.serializeHeaderHash(change.value.hash),\n        },\n      ];\n\n    case 'transaction':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.transaction(change.value),\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'output':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.output({\n            hash: change.value.hash,\n            index: change.value.index,\n          }),\n\n          value: change.value.output.serializeWire(),\n        },\n      ];\n\n    case 'transactionData':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.transactionData(change.value),\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'contract':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.contract(change.value),\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'storageItem':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.storageItem({\n            hash: change.value.hash,\n            key: change.value.key,\n          }),\n\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'validator':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.validator({\n            publicKey: change.value.publicKey,\n          }),\n\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'invocationData':\n      return [\n        {\n          type: 'put',\n          key: keys.typeKeyToSerializeKey.invocationData(change.value),\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    case 'validatorsCount':\n      return [\n        {\n          type: 'put',\n          key: keys.validatorsCountKey,\n          value: change.value.serializeWire(),\n        },\n      ];\n\n    default:\n      utils.assertNever(change);\n      throw new UnknownTypeError(changeIn.type);\n  }\n};\n\nconst convertDeleteChange = (change: DeleteChange): AbstractBatch => {\n  switch (change.type) {\n    case 'account':\n      return {\n        type: 'del',\n        key: keys.typeKeyToSerializeKey.account(change.key),\n      };\n\n    case 'accountUnspent':\n      return {\n        type: 'del',\n        key: keys.typeKeyToSerializeKey.accountUnspent(change.key),\n      };\n\n    case 'accountUnclaimed':\n      return {\n        type: 'del',\n        key: keys.typeKeyToSerializeKey.accountUnclaimed(change.key),\n      };\n\n    case 'contract':\n      return {\n        type: 'del',\n        key: keys.typeKeyToSerializeKey.contract(change.key),\n      };\n\n    case 'storageItem':\n      return {\n        type: 'del',\n        key: keys.typeKeyToSerializeKey.storageItem(change.key),\n      };\n\n    case 'validator':\n      return {\n        type: 'del',\n        key: keys.typeKeyToSerializeKey.validator(change.key),\n      };\n\n    default:\n      utils.assertNever(change);\n      throw new UnknownTypeError();\n  }\n};\n\nexport const convertChange = (change: Change): readonly AbstractBatch[] => {\n  if (change.type === 'add') {\n    return convertAddChange(change.change);\n  }\n\n  if (change.type === 'delete') {\n    return [convertDeleteChange(change.change)];\n  }\n\n  utils.assertNever(change);\n  throw new UnknownChangeTypeError();\n};\n","// tslint:disable\nexport interface Endpoint {\n  postMessage(message: any, transfer?: any[]): void;\n  addEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n  removeEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n}\nexport type Proxy = Function;\ntype CBProxyCallback = (bpcd: CBProxyCallbackDescriptor) => {}; // eslint-disable-line no-unused-vars\ntype Transferable = MessagePort | ArrayBuffer; // eslint-disable-line no-unused-vars\nexport type Exposable = Function | Object; // eslint-disable-line no-unused-vars\n\ninterface InvocationResult {\n  type: 'RETURN';\n  id?: string;\n  value: WrappedValue;\n}\n\ntype WrappedValue = RawWrappedValue | HandledWrappedValue;\n\ninterface PropertyIteratorEntry {\n  value: {};\n  path: string[];\n}\n\ninterface WrappedChildValue {\n  path: string[];\n  wrappedValue: HandledWrappedValue;\n}\n\ninterface RawWrappedValue {\n  type: 'RAW';\n  value: {};\n  wrappedChildren?: WrappedChildValue[];\n}\n\ninterface HandledWrappedValue {\n  type: string;\n  value: {};\n}\n\ntype CBProxyCallbackDescriptor = CBPCDGet | CBPCDApply | CBPCDConstruct | CBPCDSet; // eslint-disable-line no-unused-vars\n\ninterface CBPCDGet {\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface CBPCDApply {\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDConstruct {\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDSet {\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: {};\n}\n\ntype InvocationRequest =\n  | GetInvocationRequest\n  | ApplyInvocationRequest\n  | ConstructInvocationRequest\n  | SetInvocationRequest;\n\ninterface GetInvocationRequest {\n  id?: string;\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface ApplyInvocationRequest {\n  id?: string;\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface ConstructInvocationRequest {\n  id?: string;\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface SetInvocationRequest {\n  id?: string;\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: WrappedValue;\n}\n\nexport interface TransferHandler {\n  canHandle: (obj: {}) => Boolean;\n  serialize: (obj: {}) => {};\n  deserialize: (obj: {}) => {};\n}\n\nconst TRANSFERABLE_TYPES = [ArrayBuffer, MessagePort];\nconst uid: number = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n\nconst proxyValueSymbol = Symbol('proxyValue');\nconst throwSymbol = Symbol('throw');\nconst proxyTransferHandler: TransferHandler = {\n  canHandle: (obj: {}): Boolean => {\n    return obj && ((obj as any)[proxyValueSymbol] || obj instanceof Function);\n  },\n  serialize: (obj: {}): {} => {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return port2;\n  },\n  deserialize: (obj: {}): {} => {\n    return proxy(obj as MessagePort);\n  },\n};\n\nconst throwTransferHandler = {\n  canHandle: (obj: {}): Boolean => (obj && (obj as any)[throwSymbol]) || obj instanceof Error,\n  serialize: (obj: any): {} => {\n    const message = obj && obj.message;\n    const stack = obj && obj.stack;\n    return Object.assign({}, obj, { message, stack });\n  },\n  deserialize: (obj: {}): {} => {\n    throw Object.assign(Error(), obj);\n  },\n};\n\nexport const transferHandlers: Map<string, TransferHandler> = new Map([\n  ['PROXY', proxyTransferHandler] as const,\n  ['THROW', throwTransferHandler] as const,\n]);\n\nlet pingPongMessageCounter: number = 0;\n\nexport function proxy(endpoint: Endpoint | Window, target?: any): Proxy {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  return cbProxy(\n    async (irequest) => {\n      let args: WrappedValue[] = [];\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') args = irequest.argumentsList.map(wrapValue);\n      const response = await pingPongMessage(\n        endpoint as Endpoint,\n        Object.assign({}, irequest, { argumentsList: args }),\n        transferableProperties(args),\n      );\n      const result = response.data as InvocationResult;\n      return unwrapValue(result.value);\n    },\n    [],\n    target,\n  );\n}\n\nexport function proxyValue<T>(obj: T): T {\n  if (obj instanceof MessagePort) {\n    return obj;\n  }\n\n  (obj as any)[proxyValueSymbol] = true;\n  return obj;\n}\n\nexport function expose(rootObj: Exposable, endpoint: Endpoint | Window): void {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  attachMessageHandler(endpoint, async function(event: MessageEvent) {\n    if (!event.data.id || !event.data.callPath) return;\n    let iresult;\n    const irequest = event.data as InvocationRequest;\n    try {\n      const that = await irequest.callPath.slice(0, -1).reduce((obj, propName) => obj[propName], rootObj as any);\n      let args: Array<{}> = [];\n\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') {\n        args = irequest.argumentsList.map(unwrapValue);\n      }\n      if (irequest.type === 'APPLY') {\n        if (irequest.callPath.length > 0) {\n          iresult = await that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await that(...args);\n        }\n      }\n      if (irequest.type === 'CONSTRUCT') {\n        if (irequest.callPath.length > 0) {\n          iresult = await new that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await new that(...args);\n        }\n        iresult = proxyValue(iresult);\n      }\n      if (irequest.type === 'SET' || irequest.type === 'GET') {\n        const obj = irequest.callPath.length > 0 ? await that[irequest.callPath[irequest.callPath.length - 1]] : that;\n        if (irequest.type === 'SET') {\n          obj[irequest.property] = irequest.value;\n          // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n          // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n          iresult = true;\n        } else {\n          iresult = obj;\n        }\n      }\n    } catch (e) {\n      iresult = e;\n      iresult[throwSymbol] = true;\n    }\n\n    iresult = makeInvocationResult(irequest, iresult);\n    return (endpoint as Endpoint).postMessage(iresult, transferableProperties([iresult]));\n  });\n}\n\nfunction wrapValue(arg: {}): WrappedValue {\n  // Is arg itself handled by a TransferHandler?\n  for (const [key, transferHandler] of transferHandlers) {\n    if (transferHandler.canHandle(arg)) {\n      return {\n        type: key,\n\n        value: transferHandler.serialize(arg),\n      };\n    }\n  }\n\n  // If not, traverse the entire object and find handled values.\n  let wrappedChildren: WrappedChildValue[] = [];\n  iterateUnhandledProperties(arg, (value, path) => {\n    for (const [key, transferHandler] of transferHandlers) {\n      if (transferHandler.canHandle(value)) {\n        wrappedChildren.push({\n          path,\n          wrappedValue: {\n            type: key,\n            value: transferHandler.serialize(value),\n          },\n        });\n\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  for (const wrappedChild of wrappedChildren) {\n    const container = wrappedChild.path.slice(0, -1).reduce((obj, key) => obj[key], arg as any);\n    container[wrappedChild.path[wrappedChild.path.length - 1]] = null;\n  }\n  return {\n    type: 'RAW',\n    value: arg,\n    wrappedChildren,\n  };\n}\n\nfunction unwrapValue(arg: WrappedValue): {} {\n  if (transferHandlers.has(arg.type)) {\n    const transferHandler = transferHandlers.get(arg.type)!;\n    return transferHandler.deserialize(arg.value);\n  } else if (isRawWrappedValue(arg)) {\n    for (const wrappedChildValue of arg.wrappedChildren || []) {\n      if (!transferHandlers.has(wrappedChildValue.wrappedValue.type))\n        throw Error(`Unknown value type \"${arg.type}\" at ${wrappedChildValue.path.join('.')}`);\n      const transferHandler = transferHandlers.get(wrappedChildValue.wrappedValue.type)!;\n      const newValue = transferHandler.deserialize(wrappedChildValue.wrappedValue.value);\n      replaceValueInObjectAtPath(arg.value, wrappedChildValue.path, newValue);\n    }\n    return arg.value;\n  } else {\n    throw Error(`Unknown value type \"${arg.type}\"`);\n  }\n}\n\nfunction replaceValueInObjectAtPath(obj: {}, path: string[], newVal: {}) {\n  const lastKey = path.slice(-1)[0];\n  const lastObj = path.slice(0, -1).reduce((obj: any, key: string) => obj[key], obj);\n  lastObj[lastKey] = newVal;\n}\n\nfunction isRawWrappedValue(arg: WrappedValue): arg is RawWrappedValue {\n  return arg.type === 'RAW';\n}\n\nfunction windowEndpoint(w: Window): Endpoint {\n  if (self.constructor.name !== 'Window') throw Error('self is not a window');\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n  };\n}\n\nexport function isEndpoint(endpoint: any): endpoint is Endpoint {\n  return 'addEventListener' in endpoint && 'removeEventListener' in endpoint && 'postMessage' in endpoint;\n}\n\nfunction activateEndpoint(endpoint: Endpoint): void {\n  if (isMessagePort(endpoint)) endpoint.start();\n}\n\nfunction attachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Checking all possible types of `endpoint` manually satisfies TypeScript’s\n  // type checker. Not sure why the inference is failing here. Since it’s\n  // unnecessary code I’m going to resort to `any` for now.\n  // if(isWorker(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isMessagePort(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isOtherWindow(endpoint))\n  //   endpoint.addEventListener('message', f);\n  (endpoint as any).addEventListener('message', f);\n}\n\nfunction detachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Same as above.\n  (<any>endpoint).removeEventListener('message', f);\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === 'MessagePort';\n}\n\nfunction isWindow(endpoint: Endpoint | Window): endpoint is Window {\n  // TODO: This doesn’t work on cross-origin iframes.\n  // return endpoint.constructor.name === 'Window';\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\n/**\n * `pingPongMessage` sends a `postMessage` and waits for a reply. Replies are\n * identified by a unique id that is attached to the payload.\n */\nfunction pingPongMessage(endpoint: Endpoint, msg: Object, transferables: Transferable[]): Promise<MessageEvent> {\n  const id = `${uid}-${pingPongMessageCounter++}`;\n\n  return new Promise((resolve) => {\n    attachMessageHandler(endpoint, function handler(event: MessageEvent) {\n      if (event.data.id !== id || event.data.type !== 'RETURN') return;\n      detachMessageHandler(endpoint, handler);\n      resolve(event);\n    });\n\n    // Copy msg and add `id` property\n    msg = Object.assign({}, msg, { id });\n    endpoint.postMessage(msg, transferables);\n  });\n}\n\nfunction cbProxy(cb: CBProxyCallback, callPath: PropertyKey[] = [], target = function() {}): Proxy {\n  return new Proxy(target, {\n    construct(_target, argumentsList, proxy) {\n      return cb({\n        type: 'CONSTRUCT',\n        callPath,\n        argumentsList,\n      });\n    },\n    apply(_target, _thisArg, argumentsList) {\n      // We use `bind` as an indicator to have a remote function bound locally.\n      // The actual target for `bind()` is currently ignored.\n      if (callPath[callPath.length - 1] === 'bind') return cbProxy(cb, callPath.slice(0, -1));\n      return cb({\n        type: 'APPLY',\n        callPath: callPath[callPath.length - 1] === 'apply' ? callPath.slice(0, -1) : callPath,\n        argumentsList: callPath[callPath.length - 1] === 'apply' ? argumentsList[1] : argumentsList,\n      });\n    },\n    get(_target, property, proxy) {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      if (property === 'then' && callPath.length === 0) {\n        return { then: () => proxy };\n      } else if (property === 'then') {\n        const r = cb({\n          type: 'GET',\n          callPath,\n        });\n        return Promise.resolve(r).then.bind(r);\n      } else {\n        return cbProxy(cb, callPath.concat(property), (<any>_target)[property]);\n      }\n    },\n    set(_target, property, value, _proxy): boolean {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      return cb({\n        type: 'SET',\n        callPath,\n        property,\n        value,\n      }) as boolean;\n    },\n  });\n}\n\nexport function isTransferable(thing: {}): thing is Transferable {\n  return TRANSFERABLE_TYPES.some((type) => thing instanceof type);\n}\n\nfunction iterateUnhandledProperties(\n  value: {} | undefined,\n  handleProperty: (value: any, path: string[]) => boolean,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): void {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  if (handleProperty(value, path)) return;\n\n  const keys = Object.keys(value);\n  for (const key of keys) iterateUnhandledProperties((value as any)[key], handleProperty, [...path, key], visited);\n}\n\nfunction* iterateAllProperties(\n  value: {} | undefined,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): Iterable<PropertyIteratorEntry> {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  yield { value, path };\n\n  const keys = Object.keys(value);\n  for (const key of keys) yield* iterateAllProperties((value as any)[key], [...path, key], visited);\n}\n\nexport function transferableProperties(obj: {}[] | undefined): Transferable[] {\n  const r: Transferable[] = [];\n  for (const prop of iterateAllProperties(obj)) {\n    if (isTransferable(prop.value)) r.push(prop.value);\n  }\n  return r;\n}\n\nfunction makeInvocationResult(irequest: InvocationRequest, obj: {}): InvocationResult {\n  return {\n    type: 'RETURN',\n    id: irequest.id,\n    value: wrapValue(obj),\n  };\n}\n","// tslint:disable no-any\nimport * as comlink from './comlink';\n\nexport type EndpointLike = comlink.Endpoint | Window | Worker | WorkerEndpoint;\nexport interface WorkerEndpoint extends comlink.Endpoint {\n  readonly start: () => void;\n  readonly close: () => void;\n}\n\nfunction isWorkerEndpoint(endpoint: EndpointLike): endpoint is WorkerEndpoint {\n  return ['postMessage', 'addEventListener', 'removeEventListener', 'start', 'close'].every((prop) => prop in endpoint);\n}\n\nfunction isWindow(endpoint: EndpointLike): endpoint is Window {\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\nfunction isWorker(endpoint: EndpointLike): endpoint is Worker {\n  return ['onmessage', 'postMessage', 'terminate', 'addEventListener', 'removeEventListener'].every(\n    (prop) => prop in endpoint,\n  );\n}\n\nfunction windowEndpoint(w: Window): WorkerEndpoint {\n  if (self.constructor.name !== 'Window') {\n    throw Error('self is not a window');\n  }\n\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n    start: () => {\n      // do nothing\n    },\n    close: () => {\n      // do nothing\n    },\n  };\n}\n\nfunction workerEndpoint(worker: Worker): WorkerEndpoint {\n  return {\n    addEventListener: worker.addEventListener.bind(worker) as any,\n    removeEventListener: worker.removeEventListener.bind(worker) as any,\n    postMessage: worker.postMessage.bind(worker),\n    start: () => {\n      // do nothing\n    },\n    close: worker.terminate.bind(worker),\n  };\n}\n\nfunction endpointEndpoint(endpoint: comlink.Endpoint): WorkerEndpoint {\n  return {\n    addEventListener: endpoint.addEventListener.bind(endpoint),\n    removeEventListener: endpoint.removeEventListener.bind(endpoint),\n    postMessage: endpoint.postMessage.bind(endpoint),\n    start: () => {\n      activate(endpoint);\n    },\n    close: () => {\n      if ((endpoint as any).close) {\n        (endpoint as any).close();\n      }\n    },\n  };\n}\n\nexport function getEndpoint(endpointIn: EndpointLike): WorkerEndpoint {\n  return isWorkerEndpoint(endpointIn)\n    ? endpointIn\n    : isWindow(endpointIn)\n    ? windowEndpoint(endpointIn)\n    : isWorker(endpointIn)\n    ? workerEndpoint(endpointIn)\n    : endpointEndpoint(endpointIn);\n}\n\nexport function activate(endpoint: any): void {\n  if (endpoint.start) {\n    endpoint.start();\n  }\n}\n","import rc from 'rc';\nimport { LogLevel } from './types';\n\nexport interface LoggerOptions {\n  readonly path?: string;\n  readonly level?: LogLevel;\n}\n\nexport interface LoggersConfig {\n  readonly ['*']?: LoggerOptions;\n  readonly ['editor-server']?: LoggerOptions;\n  readonly server?: LoggerOptions;\n  readonly node?: LoggerOptions;\n  readonly cli?: LoggerOptions;\n  readonly http?: LoggerOptions;\n  readonly test?: LoggerOptions;\n}\n\nexport type LoggersCreate = Required<Omit<LoggersConfig, '*'>>;\n\nconst DEFAULT_CONFIG = {\n  ['editor-server']: {\n    level: 'silent',\n  },\n  server: {\n    level: 'silent',\n  },\n  cli: {\n    level: 'silent',\n  },\n  http: {\n    level: 'silent',\n  },\n  test: {\n    level: 'silent',\n  },\n} as const;\n\nconst getGlobalConfig = (level: LogLevel) =>\n  ({\n    ['editor-server']: {\n      level,\n    },\n    server: {\n      level,\n    },\n    cli: {\n      level,\n    },\n    http: {\n      level,\n    },\n    test: {\n      level,\n    },\n    node: {\n      level,\n    },\n  } as const);\n\nexport const getConfiguration = (): LoggersCreate => {\n  const { logger: maybeLogger } = rc('neo_one_node');\n  const maybePath = maybeLogger !== undefined ? maybeLogger.path : undefined;\n  const maybeLevel = maybeLogger !== undefined ? maybeLogger.level : undefined;\n  const loggingConfig = rc('neo_one_logging', {\n    ...DEFAULT_CONFIG,\n    node: {\n      path: maybePath === undefined ? undefined : maybePath,\n      level: maybeLevel === undefined ? 'silent' : maybeLevel,\n    },\n  });\n\n  if (loggingConfig['*'] !== undefined) {\n    return getGlobalConfig(loggingConfig['*'].level);\n  }\n\n  return loggingConfig as LoggersCreate;\n};\n","import { common, ECPoint, UInt160, UInt256, utils } from '@neo-one/client-common';\nimport { Account, Validator, ValidatorsCount, ValidatorsCountUpdate, ValidatorUpdate } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport { toArray } from 'rxjs/operators';\nimport { Blockchain } from './Blockchain';\n\nexport class ValidatorCache {\n  private readonly blockchain: Blockchain;\n  // tslint:disable-next-line readonly-keyword\n  private readonly mutableAccounts: { [key: string]: Account };\n  // tslint:disable-next-line readonly-keyword\n  private readonly mutableValidators: { [key: string]: Validator | undefined };\n  private mutableValidatorsCount: ValidatorsCount | undefined;\n\n  public constructor(blockchain: Blockchain) {\n    this.blockchain = blockchain;\n    this.mutableAccounts = {};\n    this.mutableValidators = {};\n  }\n\n  public async getAccount(hash: UInt160): Promise<Account> {\n    let account = this.mutableAccounts[common.uInt160ToHex(hash)] as Account | undefined;\n    if (account === undefined) {\n      account = await this.blockchain.account.tryGet({ hash });\n    }\n\n    if (account === undefined) {\n      account = new Account({ hash });\n    }\n\n    this.mutableAccounts[common.uInt160ToHex(hash)] = account;\n\n    return account;\n  }\n\n  public async updateAccountBalance(hash: UInt160, asset: UInt256, value: BN): Promise<void> {\n    const assetHex = common.uInt256ToHex(asset);\n    await this.getAccount(hash);\n    const hashHex = common.uInt160ToHex(hash);\n    const account = this.mutableAccounts[hashHex];\n    const balance = account.balances[assetHex];\n    this.mutableAccounts[hashHex] = account.update({\n      balances: {\n        ...account.balances,\n        [assetHex]: value.add(balance === undefined ? utils.ZERO : balance),\n      },\n    });\n  }\n\n  public async getValidator(publicKey: ECPoint): Promise<Validator> {\n    const publicKeyHex = common.ecPointToHex(publicKey);\n\n    let validator = this.mutableValidators[publicKeyHex];\n    if (validator === undefined) {\n      validator = await this.blockchain.validator.tryGet({ publicKey });\n    }\n\n    if (validator === undefined) {\n      validator = new Validator({ publicKey });\n    }\n\n    this.mutableValidators[publicKeyHex] = validator;\n\n    return validator;\n  }\n\n  public async addValidator(validator: Validator): Promise<void> {\n    this.mutableValidators[common.ecPointToHex(validator.publicKey)] = validator;\n  }\n\n  public async deleteValidator(publicKey: ECPoint): Promise<void> {\n    this.mutableValidators[common.ecPointToHex(publicKey)] = undefined;\n  }\n\n  public async updateValidatorVotes(publicKey: ECPoint, value: BN): Promise<void> {\n    await this.getValidator(publicKey);\n    const publicKeyHex = common.ecPointToHex(publicKey);\n    const validator = this.mutableValidators[publicKeyHex];\n    if (validator === undefined) {\n      throw new Error('For Flow');\n    }\n\n    this.mutableValidators[publicKeyHex] = validator.update({\n      votes: validator.votes.add(value),\n    });\n  }\n\n  public async updateValidator(publicKey: ECPoint, update: ValidatorUpdate): Promise<Validator> {\n    await this.getValidator(publicKey);\n    const publicKeyHex = common.ecPointToHex(publicKey);\n    const validator = this.mutableValidators[publicKeyHex];\n    if (validator === undefined) {\n      throw new Error('For Flow');\n    }\n\n    const newValidator = validator.update(update);\n    this.mutableValidators[publicKeyHex] = newValidator;\n\n    return newValidator;\n  }\n\n  public async getAllValidators(): Promise<readonly Validator[]> {\n    const validators = await this.blockchain.validator.all$.pipe(toArray()).toPromise();\n    const mutablePublicKeyToValidator = _.fromPairs(\n      validators.map((validator) => [common.ecPointToHex(validator.publicKey), validator]),\n    );\n\n    Object.entries(this.mutableValidators).forEach(([publicKey, validator]) => {\n      const publicKeyHex = common.ecPointToHex(publicKey);\n      if (validator === undefined) {\n        // tslint:disable-next-line no-dynamic-delete\n        delete mutablePublicKeyToValidator[publicKeyHex];\n      } else {\n        mutablePublicKeyToValidator[publicKeyHex] = validator;\n      }\n    });\n\n    return Object.values(mutablePublicKeyToValidator);\n  }\n\n  public async getValidatorsCount(): Promise<ValidatorsCount> {\n    let validatorsCount = this.mutableValidatorsCount;\n    if (validatorsCount === undefined) {\n      validatorsCount = await this.blockchain.validatorsCount.tryGet();\n    }\n\n    if (validatorsCount === undefined) {\n      validatorsCount = new ValidatorsCount();\n    }\n\n    this.mutableValidatorsCount = validatorsCount;\n\n    return validatorsCount;\n  }\n\n  public async updateValidatorsCountVotes(index: number, value: BN): Promise<void> {\n    await this.getValidatorsCount();\n    const validatorsCount = this.mutableValidatorsCount;\n    if (validatorsCount === undefined) {\n      throw new Error('For Flow');\n    }\n\n    const votes = validatorsCount.votes[index];\n\n    this.mutableValidatorsCount = validatorsCount.update({\n      votes: validatorsCount.votes\n        .slice(0, index)\n        .concat((votes === undefined ? utils.ZERO : votes).add(value))\n        .concat(validatorsCount.votes.slice(index + 1)),\n    });\n  }\n\n  public async addValidatorsCount(validatorsCount: ValidatorsCount): Promise<void> {\n    this.mutableValidatorsCount = validatorsCount;\n  }\n\n  public async updateValidatorsCount(update: ValidatorsCountUpdate): Promise<ValidatorsCount> {\n    await this.getValidatorsCount();\n    const validatorsCount = this.mutableValidatorsCount;\n    if (validatorsCount === undefined) {\n      throw new Error('For Flow');\n    }\n\n    this.mutableValidatorsCount = validatorsCount.update(update);\n\n    return this.mutableValidatorsCount;\n  }\n}\n","// tslint:disable no-array-mutation no-object-mutation\nimport { common, ECPoint, UInt160, UInt256, utils } from '@neo-one/client-common';\nimport {\n  Account,\n  AccountKey,\n  AccountUnclaimed,\n  AccountUnclaimedKey,\n  AccountUnclaimedsKey,\n  AccountUnspent,\n  AccountUnspentKey,\n  AccountUnspentsKey,\n  AccountUpdate,\n  Action,\n  ActionKey,\n  ActionsKey,\n  Asset,\n  AssetKey,\n  AssetUpdate,\n  Block,\n  BlockchainStorage,\n  BlockData,\n  BlockDataKey,\n  ChangeSet,\n  ClaimTransaction,\n  Contract,\n  ContractKey,\n  ContractTransaction,\n  EnrollmentTransaction,\n  Header,\n  Input,\n  InvocationData,\n  InvocationDataKey,\n  InvocationResultSuccess,\n  InvocationTransaction,\n  IssueTransaction,\n  LogAction,\n  MinerTransaction,\n  NotificationAction,\n  Output,\n  PublishTransaction,\n  RegisterTransaction,\n  ScriptContainerType,\n  StateTransaction,\n  StorageChangeAdd,\n  StorageChangeDelete,\n  StorageChangeModify,\n  StorageItem,\n  StorageItemKey,\n  StorageItemsKey,\n  StorageItemUpdate,\n  Transaction,\n  TransactionData,\n  TransactionDataKey,\n  TransactionDataUpdate,\n  TransactionKey,\n  TransactionType,\n  TriggerType,\n  Validator,\n  ValidatorKey,\n  ValidatorsCount,\n  ValidatorsCountUpdate,\n  ValidatorUpdate,\n  VM,\n  WriteBlockchain,\n} from '@neo-one/node-core';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport { GenesisBlockNotRegisteredError } from './errors';\nimport { AccountChanges, getDescriptorChanges, ValidatorChanges, ValidatorsCountChanges } from './getValidators';\nimport {\n  BlockLikeStorageCache,\n  OutputStorageCache,\n  ReadAddDeleteStorageCache,\n  ReadAddStorageCache,\n  ReadAddUpdateMetadataStorageCache,\n  ReadAddUpdateStorageCache,\n  ReadAllAddUpdateDeleteStorageCache,\n  ReadGetAllAddDeleteStorageCache,\n  ReadGetAllAddStorageCache,\n  ReadGetAllAddUpdateDeleteStorageCache,\n  TrackedChangeSet,\n} from './StorageCache';\nimport { wrapExecuteScripts } from './wrapExecuteScripts';\n\ninterface WriteBatchBlockchainOptions {\n  readonly settings: WriteBlockchain['settings'];\n  readonly currentBlock: WriteBlockchain['currentBlock'] | undefined;\n  readonly currentHeader: WriteBlockchain['currentHeader'] | undefined;\n  readonly storage: BlockchainStorage;\n  readonly vm: VM;\n  readonly getValidators: WriteBlockchain['getValidators'];\n}\n\ninterface Caches {\n  readonly account: ReadAllAddUpdateDeleteStorageCache<AccountKey, Account, AccountUpdate>;\n  readonly accountUnspent: ReadGetAllAddDeleteStorageCache<AccountUnspentKey, AccountUnspentsKey, AccountUnspent>;\n  readonly accountUnclaimed: ReadGetAllAddDeleteStorageCache<\n    AccountUnclaimedKey,\n    AccountUnclaimedsKey,\n    AccountUnclaimed\n  >;\n  readonly action: ReadGetAllAddStorageCache<ActionKey, ActionsKey, Action>;\n  readonly asset: ReadAddUpdateStorageCache<AssetKey, Asset, AssetUpdate>;\n  readonly block: BlockLikeStorageCache<Block>;\n  readonly blockData: ReadAddStorageCache<BlockDataKey, BlockData>;\n  readonly header: BlockLikeStorageCache<Header>;\n  readonly transaction: ReadAddStorageCache<TransactionKey, Transaction>;\n  readonly transactionData: ReadAddUpdateStorageCache<TransactionDataKey, TransactionData, TransactionDataUpdate>;\n  readonly output: OutputStorageCache;\n  readonly contract: ReadAddDeleteStorageCache<ContractKey, Contract>;\n  readonly storageItem: ReadGetAllAddUpdateDeleteStorageCache<\n    StorageItemKey,\n    StorageItemsKey,\n    StorageItem,\n    StorageItemUpdate\n  >;\n  readonly validator: ReadAllAddUpdateDeleteStorageCache<ValidatorKey, Validator, ValidatorUpdate>;\n  readonly invocationData: ReadAddStorageCache<InvocationDataKey, InvocationData>;\n  readonly validatorsCount: ReadAddUpdateMetadataStorageCache<ValidatorsCount, ValidatorsCountUpdate>;\n}\n\ninterface InputClaim {\n  readonly type: 'claim' | 'input';\n  readonly hash: UInt256;\n  readonly input: Input;\n}\n\ninterface OutputWithInput {\n  readonly output: Output;\n  readonly input: Input;\n}\n\nexport class WriteBatchBlockchain {\n  public readonly settings: WriteBlockchain['settings'];\n  public readonly account: ReadAllAddUpdateDeleteStorageCache<AccountKey, Account, AccountUpdate>;\n  public readonly accountUnspent: ReadGetAllAddDeleteStorageCache<\n    AccountUnspentKey,\n    AccountUnspentsKey,\n    AccountUnspent\n  >;\n  public readonly accountUnclaimed: ReadGetAllAddDeleteStorageCache<\n    AccountUnclaimedKey,\n    AccountUnclaimedsKey,\n    AccountUnclaimed\n  >;\n  public readonly action: ReadGetAllAddStorageCache<ActionKey, ActionsKey, Action>;\n  public readonly asset: ReadAddUpdateStorageCache<AssetKey, Asset, AssetUpdate>;\n  public readonly block: BlockLikeStorageCache<Block>;\n  public readonly blockData: ReadAddStorageCache<BlockDataKey, BlockData>;\n  public readonly header: BlockLikeStorageCache<Header>;\n  public readonly transaction: ReadAddStorageCache<TransactionKey, Transaction>;\n  public readonly transactionData: ReadAddUpdateStorageCache<\n    TransactionDataKey,\n    TransactionData,\n    TransactionDataUpdate\n  >;\n  public readonly output: OutputStorageCache;\n  public readonly contract: ReadAddDeleteStorageCache<ContractKey, Contract>;\n  public readonly storageItem: ReadGetAllAddUpdateDeleteStorageCache<\n    StorageItemKey,\n    StorageItemsKey,\n    StorageItem,\n    StorageItemUpdate\n  >;\n  public readonly validator: ReadAllAddUpdateDeleteStorageCache<ValidatorKey, Validator, ValidatorUpdate>;\n  public readonly invocationData: ReadAddStorageCache<InvocationDataKey, InvocationData>;\n  public readonly validatorsCount: ReadAddUpdateMetadataStorageCache<ValidatorsCount, ValidatorsCountUpdate>;\n  public readonly getValidators: WriteBlockchain['getValidators'];\n  private readonly currentBlockInternal: WriteBlockchain['currentBlock'] | undefined;\n  private readonly currentHeaderInternal: WriteBlockchain['currentHeader'] | undefined;\n  private readonly storage: BlockchainStorage;\n  private readonly vm: VM;\n  private readonly caches: Caches;\n\n  public constructor(options: WriteBatchBlockchainOptions) {\n    this.settings = options.settings;\n    this.currentBlockInternal = options.currentBlock;\n    this.currentHeaderInternal = options.currentHeader;\n    this.storage = options.storage;\n    this.vm = options.vm;\n    this.getValidators = options.getValidators;\n\n    const output = new OutputStorageCache(() => this.storage.output);\n    this.caches = {\n      account: new ReadAllAddUpdateDeleteStorageCache({\n        name: 'account',\n        readAllStorage: () => this.storage.account,\n        update: (value, update) => value.update(update),\n        getKeyFromValue: (value) => ({ hash: value.hash }),\n        getKeyString: (key) => common.uInt160ToString(key.hash),\n        createAddChange: (value) => ({ type: 'account', value }),\n        createDeleteChange: (key) => ({ type: 'account', key }),\n      }),\n      accountUnspent: new ReadGetAllAddDeleteStorageCache({\n        name: 'accountUnspent',\n        readGetAllStorage: () => this.storage.accountUnspent,\n        getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n        getKeyString: (key) =>\n          `${common.uInt160ToString(key.hash)}:${common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n        matchesPartialKey: (value, key) => common.uInt160Equal(value.hash, key.hash),\n        createAddChange: (value) => ({ type: 'accountUnspent', value }),\n        createDeleteChange: (key) => ({ type: 'accountUnspent', key }),\n      }),\n      accountUnclaimed: new ReadGetAllAddDeleteStorageCache({\n        name: 'accountUnclaimed',\n        readGetAllStorage: () => this.storage.accountUnclaimed,\n        getKeyFromValue: (value) => ({ hash: value.hash, input: value.input }),\n        getKeyString: (key) =>\n          `${common.uInt160ToString(key.hash)}:${common.uInt256ToString(key.input.hash)}:${key.input.index}`,\n        matchesPartialKey: (value, key) => common.uInt160Equal(value.hash, key.hash),\n        createAddChange: (value) => ({ type: 'accountUnclaimed', value }),\n        createDeleteChange: (key) => ({ type: 'accountUnclaimed', key }),\n      }),\n      action: new ReadGetAllAddStorageCache({\n        name: 'action',\n        readGetAllStorage: () => this.storage.action,\n        getKeyFromValue: (value) => ({\n          index: value.index,\n        }),\n        getKeyString: (key) => key.index.toString(10),\n        matchesPartialKey: (value, key) =>\n          (key.indexStart === undefined || value.index.gte(key.indexStart)) &&\n          (key.indexStop === undefined || value.index.lte(key.indexStop)),\n        createAddChange: (value) => ({ type: 'action', value }),\n      }),\n      asset: new ReadAddUpdateStorageCache({\n        name: 'asset',\n        readStorage: () => this.storage.asset,\n        update: (value, update) => value.update(update),\n        getKeyFromValue: (value) => ({ hash: value.hash }),\n        getKeyString: (key) => common.uInt256ToString(key.hash),\n        createAddChange: (value) => ({ type: 'asset', value }),\n      }),\n      block: new BlockLikeStorageCache({\n        name: 'block',\n        readStorage: () => ({\n          get: this.storage.block.get,\n          tryGet: this.storage.block.tryGet,\n        }),\n        createAddChange: (value) => ({ type: 'block', value }),\n      }),\n      blockData: new ReadAddStorageCache({\n        name: 'blockData',\n        readStorage: () => this.storage.blockData,\n        getKeyFromValue: (value) => ({ hash: value.hash }),\n        getKeyString: (key) => common.uInt256ToString(key.hash),\n        createAddChange: (value) => ({ type: 'blockData', value }),\n      }),\n      header: new BlockLikeStorageCache({\n        name: 'header',\n        readStorage: () => ({\n          get: this.storage.header.get,\n          tryGet: this.storage.header.tryGet,\n        }),\n        createAddChange: (value) => ({ type: 'header', value }),\n      }),\n      transaction: new ReadAddStorageCache({\n        name: 'transaction',\n        readStorage: () => this.storage.transaction,\n        getKeyFromValue: (value) => ({ hash: value.hash }),\n        getKeyString: (key) => common.uInt256ToString(key.hash),\n        createAddChange: (value) => ({ type: 'transaction', value }),\n        onAdd: async (value) => {\n          await Promise.all(\n            value.outputs.map(async (out, index) => output.add({ hash: value.hash, index, output: out })),\n          );\n        },\n        allowDupes: true,\n      }),\n      transactionData: new ReadAddUpdateStorageCache({\n        name: 'transactionData',\n        readStorage: () => this.storage.transactionData,\n        update: (value, update) => value.update(update),\n        getKeyFromValue: (value) => ({ hash: value.hash }),\n        getKeyString: (key) => common.uInt256ToString(key.hash),\n        createAddChange: (value) => ({ type: 'transactionData', value }),\n        allowDupes: true,\n      }),\n      output,\n      contract: new ReadAddDeleteStorageCache({\n        name: 'contract',\n        readStorage: () => this.storage.contract,\n        getKeyFromValue: (value) => ({ hash: value.hash }),\n        getKeyString: (key) => common.uInt160ToString(key.hash),\n        createAddChange: (value) => ({ type: 'contract', value }),\n        createDeleteChange: (key) => ({ type: 'contract', key }),\n      }),\n      storageItem: new ReadGetAllAddUpdateDeleteStorageCache({\n        name: 'storageItem',\n        readGetAllStorage: () => this.storage.storageItem,\n        update: (value, update) => value.update(update),\n        getKeyFromValue: (value) => ({\n          hash: value.hash,\n          key: value.key,\n        }),\n        getKeyString: (key) => `${common.uInt160ToString(key.hash)}:${key.key.toString('hex')}`,\n        matchesPartialKey: (value, key) =>\n          (key.hash === undefined || common.uInt160Equal(value.hash, key.hash)) &&\n          (key.prefix === undefined || key.prefix.every((byte, idx) => value.key[idx] === byte)),\n        createAddChange: (value) => ({ type: 'storageItem', value }),\n        createDeleteChange: (key) => ({ type: 'storageItem', key }),\n      }),\n      validator: new ReadAllAddUpdateDeleteStorageCache({\n        name: 'validator',\n        readAllStorage: () => this.storage.validator,\n        getKeyFromValue: (value) => ({ publicKey: value.publicKey }),\n        getKeyString: (key) => common.ecPointToString(key.publicKey),\n        createAddChange: (value) => ({ type: 'validator', value }),\n        update: (value, update) => value.update(update),\n        createDeleteChange: (key) => ({ type: 'validator', key }),\n      }),\n      invocationData: new ReadAddStorageCache({\n        name: 'invocationData',\n        readStorage: () => this.storage.invocationData,\n        getKeyFromValue: (value) => ({ hash: value.hash }),\n        getKeyString: (key) => common.uInt256ToString(key.hash),\n        createAddChange: (value) => ({ type: 'invocationData', value }),\n      }),\n      validatorsCount: new ReadAddUpdateMetadataStorageCache({\n        name: 'validatorsCount',\n        readStorage: () => this.storage.validatorsCount,\n        createAddChange: (value) => ({ type: 'validatorsCount', value }),\n        update: (value, update) => value.update(update),\n      }),\n    };\n\n    this.account = this.caches.account;\n    this.accountUnspent = this.caches.accountUnspent;\n    this.accountUnclaimed = this.caches.accountUnclaimed;\n    this.action = this.caches.action;\n    this.asset = this.caches.asset;\n    this.block = this.caches.block;\n    this.blockData = this.caches.blockData;\n    this.header = this.caches.header;\n    this.transaction = this.caches.transaction;\n    this.transactionData = this.caches.transactionData;\n    this.output = this.caches.output;\n    this.contract = this.caches.contract;\n    this.storageItem = this.caches.storageItem;\n    this.validator = this.caches.validator;\n    this.invocationData = this.caches.invocationData;\n    this.validatorsCount = this.caches.validatorsCount;\n  }\n\n  public get currentBlock(): Block {\n    if (this.currentBlockInternal === undefined) {\n      throw new GenesisBlockNotRegisteredError();\n    }\n\n    return this.currentBlockInternal;\n  }\n\n  public get currentBlockIndex(): number {\n    return this.currentBlockInternal === undefined ? 0 : this.currentBlockInternal.index;\n  }\n\n  public get currentHeader(): Header {\n    if (this.currentHeaderInternal === undefined) {\n      throw new GenesisBlockNotRegisteredError();\n    }\n\n    return this.currentHeaderInternal;\n  }\n\n  public getChangeSet(): ChangeSet {\n    return Object.values(this.caches).reduce<ChangeSet>((acc, cache) => acc.concat(cache.getChangeSet()), []);\n  }\n\n  // tslint:disable-next-line no-any\n  public getTrackedChangeSet(): TrackedChangeSet<any, any, any> {\n    // tslint:disable-next-line no-any\n    return Object.values(this.caches).reduce<TrackedChangeSet<any, any, any>>(\n      (acc, cache) => acc.concat(cache.getTrackedChangeSet()),\n      [],\n    );\n  }\n\n  public async persistBlock(block: Block): Promise<void> {\n    const [maybePrevBlockData, outputContractsList] = await Promise.all([\n      block.index === 0 ? Promise.resolve(undefined) : this.blockData.get({ hash: block.previousHash }),\n      Promise.all(\n        [\n          ...new Set(\n            block.transactions.reduce<string[]>(\n              (acc, transaction) =>\n                acc.concat(transaction.outputs.map((output) => common.uInt160ToString(output.address))),\n\n              [],\n            ),\n          ),\n        ].map(async (hash) => this.contract.tryGet({ hash: common.stringToUInt160(hash) })),\n      ),\n\n      this.block.add(block),\n      this.header.add(block.header),\n    ]);\n\n    const prevBlockData =\n      maybePrevBlockData === undefined\n        ? {\n            lastGlobalTransactionIndex: utils.NEGATIVE_ONE,\n            lastGlobalActionIndex: utils.NEGATIVE_ONE,\n            systemFee: utils.ZERO,\n          }\n        : {\n            lastGlobalTransactionIndex: maybePrevBlockData.lastGlobalTransactionIndex,\n            lastGlobalActionIndex: maybePrevBlockData.lastGlobalActionIndex,\n            systemFee: maybePrevBlockData.systemFee,\n          };\n\n    const outputContracts: { [key: string]: Contract | undefined } = {};\n    outputContractsList.filter(commonUtils.notNull).forEach((outputContract) => {\n      outputContracts[outputContract.hashHex] = outputContract;\n    });\n\n    const [utxo, rest] = _.partition(\n      block.transactions.map<[number, Transaction]>((transaction, idx) => [idx, transaction]),\n      // tslint:disable-next-line no-unused\n      ([idx, transaction]) =>\n        ((transaction.type === TransactionType.Claim && transaction instanceof ClaimTransaction) ||\n          (transaction.type === TransactionType.Contract && transaction instanceof ContractTransaction) ||\n          (transaction.type === TransactionType.Miner && transaction instanceof MinerTransaction)) &&\n        !transaction.outputs.some((output) => outputContracts[common.uInt160ToString(output.address)] !== undefined),\n    );\n\n    const [globalActionIndex] = await Promise.all([\n      rest.length > 0\n        ? this.persistTransactions(\n            block,\n            // tslint:disable-next-line no-any\n            rest as any,\n            prevBlockData.lastGlobalTransactionIndex,\n            prevBlockData.lastGlobalActionIndex,\n          )\n        : Promise.resolve(prevBlockData.lastGlobalActionIndex),\n      utxo.length > 0\n        ? // tslint:disable-next-line no-any\n          this.persistUTXOTransactions(block, utxo as any, prevBlockData.lastGlobalTransactionIndex)\n        : Promise.resolve(),\n    ]);\n\n    await this.blockData.add(\n      new BlockData({\n        hash: block.hash,\n        lastGlobalTransactionIndex: prevBlockData.lastGlobalTransactionIndex.add(new BN(block.transactions.length)),\n\n        lastGlobalActionIndex: globalActionIndex,\n        systemFee: prevBlockData.systemFee.add(\n          block.getSystemFee({\n            getOutput: this.output.get,\n            governingToken: this.settings.governingToken,\n            utilityToken: this.settings.utilityToken,\n            fees: this.settings.fees,\n            registerValidatorFee: this.settings.registerValidatorFee,\n          }),\n        ),\n      }),\n    );\n  }\n\n  private async persistUTXOTransactions(\n    block: Block,\n    transactions: ReadonlyArray<readonly [number, (ContractTransaction | ClaimTransaction | MinerTransaction)]>,\n    lastGlobalTransactionIndex: BN,\n  ): Promise<void> {\n    const inputs = [];\n    const claims = [];\n    const outputWithInputs = [];\n    // tslint:disable-next-line no-unused no-loop-statement no-dead-store\n    for (const idxAndTransaction of transactions) {\n      const transaction = idxAndTransaction[1];\n      inputs.push(...transaction.inputs);\n      if (transaction.type === TransactionType.Claim && transaction instanceof ClaimTransaction) {\n        claims.push(...transaction.claims);\n      }\n      outputWithInputs.push(...this.getOutputWithInput(transaction));\n    }\n    await Promise.all([\n      Promise.all(\n        // tslint:disable-next-line no-unused\n        transactions.map(async ([idx, transaction]) => this.transaction.add(transaction)),\n      ),\n      Promise.all(\n        transactions.map(async ([idx, transaction]) =>\n          this.transactionData.add(\n            new TransactionData({\n              hash: transaction.hash,\n              startHeight: block.index,\n              blockHash: block.hash,\n              index: idx,\n              globalIndex: lastGlobalTransactionIndex.add(new BN(idx + 1)),\n            }),\n          ),\n        ),\n      ),\n\n      this.updateAccounts(inputs, claims, outputWithInputs),\n      this.updateCoins(inputs, claims, block),\n    ]);\n  }\n\n  private async persistTransactions(\n    block: Block,\n    transactions: ReadonlyArray<readonly [number, Transaction]>,\n    lastGlobalTransactionIndex: BN,\n    lastGlobalActionIndex: BN,\n  ): Promise<BN> {\n    let globalActionIndex = lastGlobalActionIndex.add(utils.ONE);\n    // tslint:disable-next-line no-loop-statement\n    for (const [idx, transaction] of transactions) {\n      globalActionIndex = await this.persistTransaction(\n        block,\n        transaction,\n        idx,\n        lastGlobalTransactionIndex,\n        globalActionIndex,\n      );\n    }\n\n    return globalActionIndex.sub(utils.ONE);\n  }\n\n  private async persistTransaction(\n    block: Block,\n    transactionIn: Transaction,\n    transactionIndex: number,\n    lastGlobalTransactionIndex: BN,\n    globalActionIndexIn: BN,\n  ): Promise<BN> {\n    let globalActionIndex = globalActionIndexIn;\n    const transaction = transactionIn;\n    const claims =\n      transaction.type === TransactionType.Claim && transaction instanceof ClaimTransaction ? transaction.claims : [];\n    let accountChanges = {};\n    let validatorChanges = {};\n    let validatorsCountChanges: ValidatorsCountChanges = [];\n    if (transaction.type === TransactionType.State && transaction instanceof StateTransaction) {\n      ({ accountChanges, validatorChanges, validatorsCountChanges } = await getDescriptorChanges({\n        transactions: [transaction],\n        getAccount: async (hash) =>\n          this.account.tryGet({ hash }).then((account) => (account === undefined ? new Account({ hash }) : account)),\n\n        governingTokenHash: this.settings.governingToken.hashHex,\n      }));\n    }\n    await Promise.all([\n      this.transaction.add(transaction),\n      this.transactionData.add(\n        new TransactionData({\n          hash: transaction.hash,\n          blockHash: block.hash,\n          startHeight: block.index,\n          index: transactionIndex,\n          globalIndex: lastGlobalTransactionIndex.add(new BN(transactionIndex + 1)),\n        }),\n      ),\n\n      this.updateAccounts(transaction.inputs, claims, this.getOutputWithInput(transaction), accountChanges),\n\n      this.updateCoins(transaction.inputs, claims, block),\n      this.processStateTransaction(validatorChanges, validatorsCountChanges),\n    ]);\n\n    if (transaction.type === TransactionType.Register && transaction instanceof RegisterTransaction) {\n      await this.asset.add(\n        new Asset({\n          hash: transaction.hash,\n          type: transaction.asset.type,\n          name: transaction.asset.name,\n          amount: transaction.asset.amount,\n          precision: transaction.asset.precision,\n          owner: transaction.asset.owner,\n          admin: transaction.asset.admin,\n          issuer: transaction.asset.admin,\n          expiration: this.currentBlockIndex + 2 * 2000000,\n          isFrozen: false,\n        }),\n      );\n    } else if (transaction.type === TransactionType.Issue && transaction instanceof IssueTransaction) {\n      const results = await Promise.all(\n        Object.entries(\n          transaction.getTransactionResults({\n            getOutput: this.output.get,\n          }),\n        ),\n      );\n\n      await Promise.all(\n        results.map(async ([assetHex, value]) => {\n          const hash = common.stringToUInt256(assetHex);\n          const asset = await this.asset.get({ hash });\n          await this.asset.update(asset, {\n            available: asset.available.add(value.neg()),\n          });\n        }),\n      );\n    } else if (transaction.type === TransactionType.Enrollment && transaction instanceof EnrollmentTransaction) {\n      await this.validator.add(\n        new Validator({\n          publicKey: transaction.publicKey,\n        }),\n      );\n    } else if (transaction.type === TransactionType.Publish && transaction instanceof PublishTransaction) {\n      const contract = await this.contract.tryGet({\n        hash: transaction.contract.hash,\n      });\n\n      if (contract === undefined) {\n        await this.contract.add(transaction.contract);\n      }\n    } else if (transaction.type === TransactionType.Invocation && transaction instanceof InvocationTransaction) {\n      const temporaryBlockchain = new WriteBatchBlockchain({\n        settings: this.settings,\n        currentBlock: this.currentBlockInternal,\n        currentHeader: this.currentHeader,\n        // tslint:disable-next-line no-any\n        storage: this as any,\n        vm: this.vm,\n        getValidators: this.getValidators,\n      });\n\n      const migratedContractHashes: Array<readonly [UInt160, UInt160]> = [];\n      const voteUpdates: Array<readonly [UInt160, ReadonlyArray<ECPoint>]> = [];\n      const actions: Array<NotificationAction | LogAction> = [];\n      const result = await wrapExecuteScripts(async () =>\n        this.vm.executeScripts({\n          scripts: [{ code: transaction.script }],\n          blockchain: temporaryBlockchain,\n          scriptContainer: {\n            type: ScriptContainerType.Transaction,\n            value: transaction,\n          },\n\n          triggerType: TriggerType.Application,\n          action: {\n            blockIndex: block.index,\n            blockHash: block.hash,\n            transactionIndex,\n            transactionHash: transaction.hash,\n          },\n\n          gas: transaction.gas,\n          listeners: {\n            onLog: ({ message, scriptHash }) => {\n              actions.push(\n                new LogAction({\n                  index: globalActionIndex,\n                  scriptHash,\n                  message,\n                }),\n              );\n\n              globalActionIndex = globalActionIndex.add(utils.ONE);\n            },\n            onNotify: ({ args, scriptHash }) => {\n              actions.push(\n                new NotificationAction({\n                  index: globalActionIndex,\n                  scriptHash,\n                  args,\n                }),\n              );\n\n              globalActionIndex = globalActionIndex.add(utils.ONE);\n            },\n            onMigrateContract: ({ from, to }) => {\n              migratedContractHashes.push([from, to] as const);\n            },\n            onSetVotes: ({ address, votes }) => {\n              voteUpdates.push([address, votes] as const);\n            },\n          },\n\n          persistingBlock: block,\n        }),\n      );\n\n      const addActionsPromise = Promise.all(actions.map(async (action) => this.action.add(action)));\n\n      if (result instanceof InvocationResultSuccess) {\n        const assetChangeSet = temporaryBlockchain.asset.getChangeSet();\n        const assetHash = assetChangeSet\n          .map((change) =>\n            change.type === 'add' && change.change.type === 'asset' ? change.change.value.hash : undefined,\n          )\n          .find((value) => value !== undefined);\n\n        const contractsChangeSet = temporaryBlockchain.contract.getChangeSet();\n        const contractHashes = contractsChangeSet\n          .map((change) =>\n            change.type === 'add' && change.change.type === 'contract' ? change.change.value.hash : undefined,\n          )\n          .filter(commonUtils.notNull);\n\n        const deletedContractHashes = contractsChangeSet\n          .map((change) =>\n            change.type === 'delete' && change.change.type === 'contract' ? change.change.key.hash : undefined,\n          )\n          .filter(commonUtils.notNull);\n\n        const storageChanges = temporaryBlockchain.storageItem\n          .getChangeSet()\n          .map((change) => {\n            const addChange =\n              change.type === 'add' && change.change.type === 'storageItem'\n                ? { value: change.change.value, subType: change.subType }\n                : undefined;\n            if (addChange !== undefined) {\n              const options = {\n                hash: addChange.value.hash,\n                key: addChange.value.key,\n                value: addChange.value.value,\n              };\n\n              return addChange.subType === 'add' ? new StorageChangeAdd(options) : new StorageChangeModify(options);\n            }\n\n            const deleteChange =\n              change.type === 'delete' && change.change.type === 'storageItem' ? change.change.key : undefined;\n            if (deleteChange !== undefined) {\n              return new StorageChangeDelete(deleteChange);\n            }\n\n            return undefined;\n          })\n          .filter(commonUtils.notNull);\n\n        temporaryBlockchain.getTrackedChangeSet().forEach((change) => {\n          this.caches[change.type as keyof Caches].addTrackedChange(change.key, change.value);\n        });\n        await Promise.all([\n          this.invocationData.add(\n            new InvocationData({\n              hash: transaction.hash,\n              assetHash,\n              contractHashes,\n              deletedContractHashes,\n              migratedContractHashes,\n              voteUpdates,\n              blockIndex: block.index,\n              transactionIndex,\n              actionIndexStart: globalActionIndexIn,\n              actionIndexStop: globalActionIndex,\n              result,\n              storageChanges,\n            }),\n          ),\n          addActionsPromise,\n        ]);\n      } else {\n        await Promise.all([\n          this.invocationData.add(\n            new InvocationData({\n              hash: transaction.hash,\n              assetHash: undefined,\n              contractHashes: [],\n              deletedContractHashes: [],\n              migratedContractHashes: [],\n              voteUpdates: [],\n              blockIndex: block.index,\n              transactionIndex,\n              actionIndexStart: globalActionIndexIn,\n              actionIndexStop: globalActionIndex,\n              result,\n              storageChanges: [],\n            }),\n          ),\n          addActionsPromise,\n        ]);\n      }\n    }\n\n    return globalActionIndex;\n  }\n\n  private async processStateTransaction(\n    validatorChanges: ValidatorChanges,\n    validatorsCountChanges: ValidatorsCountChanges,\n  ): Promise<void> {\n    const validatorsCount = await this.validatorsCount.tryGet();\n    const validatorsCountVotes = validatorsCount === undefined ? [] : [...validatorsCount.votes];\n    // tslint:disable-next-line no-loop-statement\n    for (const [index, value] of validatorsCountChanges.entries()) {\n      validatorsCountVotes[index] = value;\n    }\n\n    await Promise.all([\n      Promise.all(\n        Object.entries(validatorChanges).map(async ([publicKeyHex, { registered, votes }]) => {\n          const publicKey = common.hexToECPoint(publicKeyHex);\n          const validator = await this.validator.tryGet({ publicKey });\n          if (validator === undefined) {\n            await this.validator.add(\n              new Validator({\n                publicKey,\n                registered,\n                votes,\n              }),\n            );\n          } else if (\n            ((registered !== undefined && !registered) || (registered === undefined && !validator.registered)) &&\n            ((votes !== undefined && votes.eq(utils.ZERO)) || (votes === undefined && validator.votes.eq(utils.ZERO)))\n          ) {\n            await this.validator.delete({ publicKey: validator.publicKey });\n          } else {\n            await this.validator.update(validator, { votes, registered });\n          }\n        }),\n      ),\n      validatorsCount === undefined\n        ? this.validatorsCount.add(\n            new ValidatorsCount({\n              votes: validatorsCountVotes,\n            }),\n          )\n        : (async () => {\n            await this.validatorsCount.update(validatorsCount, {\n              votes: validatorsCountVotes,\n            });\n          })(),\n    ]);\n  }\n\n  private async updateAccounts(\n    inputs: readonly Input[],\n    claims: readonly Input[],\n    outputs: readonly OutputWithInput[],\n    accountChanges: AccountChanges = {},\n  ): Promise<void> {\n    const [inputOutputs, claimOutputs] = await Promise.all([\n      this.getInputOutputs(inputs),\n      this.getInputOutputs(claims),\n    ]);\n\n    const addressValues = Object.entries(\n      _.groupBy(\n        inputOutputs\n          .map<[UInt160, UInt256, BN]>(({ output }) => [output.address, output.asset, output.value.neg()])\n          .concat(outputs.map<[UInt160, UInt256, BN]>(({ output }) => [output.address, output.asset, output.value])),\n        ([address]) => common.uInt160ToHex(address),\n      ),\n    );\n\n    const addressSpent = this.groupByAddress(inputOutputs);\n    const addressClaimed = _.mapValues(this.groupByAddress(claimOutputs), (values) => values.map(({ input }) => input));\n\n    const addressOutputs = _.groupBy(outputs, (output) => common.uInt160ToHex(output.output.address));\n\n    await Promise.all(\n      addressValues.map(async ([address, values]) => {\n        const spent = addressSpent[address] as readonly OutputWithInput[] | undefined;\n        const claimed = addressClaimed[address] as readonly Input[] | undefined;\n        const outs = addressOutputs[address] as readonly OutputWithInput[] | undefined;\n        const changes = accountChanges[address] as readonly ECPoint[] | undefined;\n        await this.updateAccount(\n          common.hexToUInt160(address),\n          // tslint:disable-next-line no-unused\n          values.map<readonly [UInt256, BN]>(([_address, asset, value]) => [asset, value] as const),\n          spent === undefined ? [] : spent,\n          claimed === undefined ? [] : claimed,\n          outs === undefined ? [] : outs,\n          changes === undefined ? [] : changes,\n        );\n      }),\n    );\n  }\n\n  private getOutputWithInput(transaction: Transaction): readonly OutputWithInput[] {\n    return transaction.outputs.map((output, index) => ({\n      output,\n      input: new Input({ hash: transaction.hash, index }),\n    }));\n  }\n\n  private async getInputOutputs(\n    inputs: readonly Input[],\n  ): Promise<\n    ReadonlyArray<{\n      readonly input: Input;\n      readonly output: Output;\n    }>\n  > {\n    return Promise.all(\n      inputs.map(async (input) => {\n        const output = await this.output.get(input);\n\n        return { input, output };\n      }),\n    );\n  }\n\n  private groupByAddress(\n    inputOutputs: readonly OutputWithInput[],\n  ): { readonly [key: string]: readonly OutputWithInput[] } {\n    return _.groupBy(inputOutputs, ({ output }) => common.uInt160ToHex(output.address));\n  }\n\n  private async updateAccount(\n    address: UInt160,\n    values: ReadonlyArray<readonly [UInt256, BN]>,\n    spent: readonly OutputWithInput[],\n    claimed: readonly Input[],\n    outputs: readonly OutputWithInput[],\n    votes: readonly ECPoint[],\n  ): Promise<void> {\n    const account = await this.account.tryGet({ hash: address });\n\n    const balances = values.reduce<{ [asset: string]: BN }>(\n      (acc, [asset, value]) => {\n        const key = common.uInt256ToHex(asset);\n        if ((acc[key] as BN | undefined) === undefined) {\n          acc[key] = utils.ZERO;\n        }\n        acc[key] = acc[key].add(value);\n\n        return acc;\n      },\n      account === undefined\n        ? {}\n        : Object.entries(account.balances).reduce<{ [asset: string]: BN }>((acc, [key, value]) => {\n            if (value === undefined) {\n              return {\n                ...acc,\n                [key]: utils.ZERO,\n              };\n            }\n\n            return {\n              ...acc,\n              [key]: value,\n            };\n          }, {}),\n    );\n\n    const promises = [];\n    promises.push(\n      ...spent.map(async ({ input }) =>\n        this.accountUnspent.delete({\n          hash: address,\n          input,\n        }),\n      ),\n    );\n\n    promises.push(\n      ...outputs.map(async ({ input }) => this.accountUnspent.add(new AccountUnspent({ hash: address, input }))),\n    );\n\n    promises.push(\n      ...claimed.map(async (input) =>\n        this.accountUnclaimed.delete({\n          hash: address,\n          input,\n        }),\n      ),\n    );\n\n    promises.push(\n      ...spent\n        .filter(({ output }) => common.uInt256Equal(output.asset, this.settings.governingToken.hash))\n        .map(async ({ input }) => this.accountUnclaimed.add(new AccountUnclaimed({ hash: address, input }))),\n    );\n\n    if (account === undefined) {\n      promises.push(\n        this.account.add(\n          new Account({\n            hash: address,\n            balances,\n            votes,\n          }),\n        ),\n      );\n    } else {\n      promises.push(\n        this.account.update(account, { balances, votes }).then(async (newAccount) => {\n          if (newAccount.isDeletable()) {\n            await this.account.delete({ hash: address });\n          }\n        }),\n      );\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async updateCoins(inputs: readonly Input[], claims: readonly Input[], block: Block): Promise<void> {\n    const inputClaims = inputs\n      .map<InputClaim>((input) => ({ type: 'input', input, hash: input.hash }))\n      .concat(claims.map<InputClaim>((input) => ({ type: 'claim', input, hash: input.hash })));\n\n    const hashInputClaims = Object.entries(_.groupBy(inputClaims, ({ hash }) => common.uInt256ToHex(hash)));\n\n    await Promise.all(\n      hashInputClaims.map(async ([hash, values]) => this.updateCoin(common.hexToUInt256(hash), values, block)),\n    );\n  }\n\n  private async updateCoin(hash: UInt256, inputClaims: readonly InputClaim[], block: Block): Promise<void> {\n    const spentCoins = await this.transactionData.get({ hash });\n    const endHeights = { ...spentCoins.endHeights };\n    const claimed = { ...spentCoins.claimed };\n    // tslint:disable-next-line no-loop-statement\n    for (const inputClaim of inputClaims) {\n      if (inputClaim.type === 'input') {\n        endHeights[inputClaim.input.index] = block.index;\n      } else {\n        claimed[inputClaim.input.index] = true;\n      }\n    }\n\n    await this.transactionData.update(spentCoins, {\n      endHeights,\n      claimed,\n    });\n  }\n}\n","// tslint:disable no-object-mutation no-dynamic-delete\nimport { common, UInt256 } from '@neo-one/client-common';\nimport {\n  AddChange,\n  Block,\n  Change,\n  ChangeSet,\n  DeleteChange,\n  Output,\n  OutputKey,\n  ReadAllStorage,\n  ReadGetAllStorage,\n  ReadMetadataStorage,\n  ReadStorage,\n} from '@neo-one/node-core';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport { concat, defer, EMPTY, Observable, of as _of } from 'rxjs';\nimport { concatMap } from 'rxjs/operators';\ntype TrackedChange<Key, AddValue, Value> =\n  | { readonly type: 'add'; readonly addValue: AddValue; readonly value: Value; readonly subType: 'add' | 'update' }\n  | { readonly type: 'delete'; readonly key: Key };\ntype GetFunc<Key, Value> = (key: Key) => Promise<Value>;\ntype TryGetFunc<Key, Value> = (key: Key) => Promise<Value | undefined>;\nexport interface TrackedChangeWithKey<Key, AddValue, Value> {\n  readonly type: string;\n  readonly key: string;\n  readonly value: TrackedChange<Key, AddValue, Value>;\n}\nexport type TrackedChangeSet<Key, AddValue, Value> = ReadonlyArray<TrackedChangeWithKey<Key, AddValue, Value>>;\n\nfunction createGet<Key, Value>({\n  tryGetTracked,\n  readStorage,\n}: {\n  // tslint:disable-next-line no-any\n  readonly tryGetTracked: (key: Key) => TrackedChange<Key, any, Value> | undefined;\n  readonly readStorage: () => ReadStorage<Key, Value>;\n}): GetFunc<Key, Value> {\n  return async (key: Key): Promise<Value> => {\n    const trackedChange = tryGetTracked(key);\n    if (trackedChange !== undefined) {\n      if (trackedChange.type === 'delete') {\n        throw new Error('Not found');\n      }\n\n      return trackedChange.value;\n    }\n\n    return readStorage().get(key);\n  };\n}\n\nfunction createTryGet<Key, Value>({\n  tryGetTracked,\n  readStorage,\n}: {\n  // tslint:disable-next-line no-any\n  readonly tryGetTracked: (key: Key) => TrackedChange<Key, any, Value> | undefined;\n  readonly readStorage: () => ReadStorage<Key, Value>;\n}): TryGetFunc<Key, Value> {\n  return async (key: Key): Promise<Value | undefined> => {\n    const trackedChange = tryGetTracked(key);\n    if (trackedChange !== undefined) {\n      if (trackedChange.type === 'delete') {\n        return undefined;\n      }\n\n      return trackedChange.value;\n    }\n\n    return readStorage().tryGet(key);\n  };\n}\n\ninterface BaseReadStorageCacheOptions<Key, AddValue, Value> {\n  readonly readStorage: () => ReadStorage<Key, Value>;\n  readonly name: string;\n  readonly createAddChange: (value: AddValue) => AddChange;\n  readonly createDeleteChange?: (key: Key) => DeleteChange;\n  readonly onAdd?: (value: AddValue) => Promise<void>;\n}\n\nexport class BaseReadStorageCache<Key, AddValue, Value> {\n  public readonly get: GetFunc<Key, Value>;\n  public readonly tryGet: TryGetFunc<Key, Value>;\n  public readonly tryGetValue: TryGetFunc<Key, Value>;\n  public readonly onAdd: ((value: AddValue) => Promise<void>) | undefined;\n  public readonly name: string;\n  // tslint:disable-next-line readonly-keyword\n  public readonly mutableValues: { [key: string]: TrackedChange<Key, AddValue, Value> };\n  protected readonly readStorage: () => ReadStorage<Key, Value>;\n  protected readonly createAddChange: (value: AddValue) => AddChange;\n  protected readonly createDeleteChange: ((key: Key) => DeleteChange) | undefined;\n\n  public constructor(options: BaseReadStorageCacheOptions<Key, AddValue, Value>) {\n    this.readStorage = options.readStorage;\n    this.name = options.name;\n    this.createAddChange = options.createAddChange;\n    this.createDeleteChange = options.createDeleteChange;\n    this.onAdd = options.onAdd;\n    this.mutableValues = {};\n\n    this.get = createGet({\n      readStorage: this.readStorage,\n      tryGetTracked: this.tryGetTracked.bind(this),\n    });\n\n    this.tryGet = createTryGet({\n      readStorage: this.readStorage,\n      tryGetTracked: this.tryGetTracked.bind(this),\n    });\n    this.tryGetValue = (key) => this.readStorage().tryGet(key);\n  }\n\n  public getChangeSet(): ChangeSet {\n    const createDeleteChange = this.createDeleteChange;\n\n    return Object.values(this.mutableValues).map<Change>((value) => {\n      if (value.type === 'delete') {\n        if (createDeleteChange === undefined) {\n          throw new Error('Invalid delete');\n        }\n\n        return { type: 'delete', change: createDeleteChange(value.key) };\n      }\n\n      return { type: 'add', change: this.createAddChange(value.addValue), subType: value.subType };\n    });\n  }\n\n  public getTrackedChangeSet(): TrackedChangeSet<Key, AddValue, Value> {\n    const createDeleteChange = this.createDeleteChange;\n\n    return Object.entries(this.mutableValues).map(([key, value]) => {\n      if (value.type === 'delete') {\n        if (createDeleteChange === undefined) {\n          throw new Error('Invalid delete');\n        }\n\n        return { type: createDeleteChange(value.key).type, key, value };\n      }\n\n      return { type: this.createAddChange(value.addValue).type, key, value };\n    });\n  }\n\n  public tryGetTracked(_key: Key): TrackedChange<Key, AddValue, Value> | undefined {\n    throw new Error('Not Implemented');\n  }\n}\n\ninterface ReadStorageCacheOptions<Key, AddValue, Value> extends BaseReadStorageCacheOptions<Key, AddValue, Value> {\n  readonly getKeyString: (key: Key) => string;\n}\n\nclass ReadStorageCache<Key, AddValue, Value> extends BaseReadStorageCache<Key, AddValue, Value> {\n  public readonly getKeyString: (key: Key) => string;\n\n  public constructor(options: ReadStorageCacheOptions<Key, AddValue, Value>) {\n    super({\n      readStorage: options.readStorage,\n      name: options.name,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.getKeyString = options.getKeyString;\n  }\n\n  public tryGetTracked(key: Key): TrackedChange<Key, AddValue, Value> | undefined {\n    return this.mutableValues[this.getKeyString(key)];\n  }\n\n  public addTrackedChange(key: string, value: TrackedChange<Key, AddValue, Value>): void {\n    this.mutableValues[key] = value;\n  }\n}\n\ninterface ReadAllStorageCacheOptions<Key, Value> {\n  readonly readAllStorage: () => ReadAllStorage<Key, Value>;\n  readonly name: string;\n  readonly createAddChange: (value: Value) => AddChange;\n  readonly createDeleteChange?: (key: Key) => DeleteChange;\n  readonly onAdd?: (value: Value) => Promise<void>;\n  readonly getKeyString: (key: Key) => string;\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nclass ReadAllStorageCache<Key, Value> extends ReadStorageCache<Key, Value, Value> {\n  public readonly all$: Observable<Value>;\n  protected readonly readAllStorage: () => ReadAllStorage<Key, Value>;\n  protected readonly getKeyFromValue: (value: Value) => Key;\n\n  public constructor(options: ReadAllStorageCacheOptions<Key, Value>) {\n    super({\n      readStorage: () => ({\n        get: options.readAllStorage().get,\n        tryGet: options.readAllStorage().tryGet,\n      }),\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.readAllStorage = options.readAllStorage;\n    this.getKeyFromValue = options.getKeyFromValue;\n\n    this.all$ = concat(\n      defer(() =>\n        this.readAllStorage().all$.pipe(\n          concatMap((value) => {\n            const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n\n            if (trackedChange !== undefined) {\n              return EMPTY;\n            }\n\n            return _of(value);\n          }),\n        ),\n      ),\n      defer(() =>\n        _of(\n          ...Object.values(this.mutableValues)\n            .map((value) => (value.type === 'add' ? value.value : undefined))\n            .filter(commonUtils.notNull),\n        ),\n      ),\n    );\n  }\n}\n\ninterface ReadGetAllStorageCacheOptions<Key, PartialKey, Value> {\n  readonly readGetAllStorage: () => ReadGetAllStorage<Key, PartialKey, Value>;\n  readonly name: string;\n  readonly createAddChange: (value: Value) => AddChange;\n  readonly createDeleteChange?: (key: Key) => DeleteChange;\n  readonly onAdd?: (value: Value) => Promise<void>;\n  readonly getKeyString: (key: Key) => string;\n  readonly getKeyFromValue: (value: Value) => Key;\n  readonly matchesPartialKey: (value: Value, key: PartialKey) => boolean;\n}\n\nclass ReadGetAllStorageCache<Key, PartialKey, Value> extends ReadStorageCache<Key, Value, Value> {\n  public readonly getAll$: (key: PartialKey) => Observable<Value>;\n  protected readonly readGetAllStorage: () => ReadGetAllStorage<Key, PartialKey, Value>;\n  protected readonly getKeyFromValue: (value: Value) => Key;\n  protected readonly matchesPartialKey: (value: Value, key: PartialKey) => boolean;\n\n  public constructor(options: ReadGetAllStorageCacheOptions<Key, PartialKey, Value>) {\n    super({\n      readStorage: () => ({\n        get: options.readGetAllStorage().get,\n        tryGet: options.readGetAllStorage().tryGet,\n      }),\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.readGetAllStorage = options.readGetAllStorage;\n    this.getKeyFromValue = options.getKeyFromValue;\n    this.matchesPartialKey = options.matchesPartialKey;\n\n    this.getAll$ = (key: PartialKey): Observable<Value> =>\n      concat(\n        defer(() =>\n          this.readGetAllStorage()\n            .getAll$(key)\n            .pipe(\n              concatMap((value) => {\n                const trackedChange = this.tryGetTracked(this.getKeyFromValue(value));\n\n                if (trackedChange !== undefined) {\n                  return EMPTY;\n                }\n\n                return _of(value);\n              }),\n            ),\n        ),\n        defer(() =>\n          _of(\n            ...Object.values(this.mutableValues)\n              .map((value) =>\n                value.type === 'add' && this.matchesPartialKey(value.value, key) ? value.value : undefined,\n              )\n              .filter(commonUtils.notNull),\n          ),\n        ),\n      );\n  }\n}\ntype AddFunc<Value> = (value: Value) => Promise<void>;\n\nfunction createAdd<Key, Value>({\n  cache,\n  getKeyFromValue,\n  getKeyString,\n  allowDupes,\n}: {\n  readonly cache: ReadStorageCache<Key, Value, Value>;\n  readonly getKeyFromValue: (value: Value) => Key;\n  readonly getKeyString: (key: Key) => string;\n  readonly allowDupes?: boolean;\n}): AddFunc<Value> {\n  return async (value: Value): Promise<void> => {\n    const key = getKeyFromValue(value);\n\n    if (!allowDupes) {\n      const currentValue = await cache.tryGet(key);\n      if (currentValue !== undefined) {\n        throw new Error(`Attempted to add an already existing object for key ` + `${cache.name}:${getKeyString(key)}.`);\n      }\n    }\n\n    if (cache.onAdd !== undefined) {\n      await cache.onAdd(value);\n    }\n\n    const trackedChange = cache.tryGetTracked(key);\n    cache.mutableValues[cache.getKeyString(key)] = {\n      type: 'add',\n      addValue: value,\n      value,\n      // trackedChange can only be a delete type if it's undefined, otherwise cache.tryGet above would have returned a value\n      // In that case, we ignore the delete and register this as a storage item update\n      // Note that we only really care about this for storage items, where allowDupes is always false\n      subType: trackedChange === undefined ? 'add' : 'update',\n    };\n  };\n}\ntype UpdateFunc<Value, Update> = (value: Value, update: Update) => Promise<Value>;\n\nfunction createUpdate<Key, Value, Update>({\n  cache,\n  update: updateFunc,\n  getKeyFromValue,\n}: {\n  readonly cache: ReadStorageCache<Key, Value, Value>;\n  readonly update: (value: Value, update: Update) => Value;\n  readonly getKeyFromValue: (value: Value) => Key;\n}): UpdateFunc<Value, Update> {\n  return async (value: Value, update: Update): Promise<Value> => {\n    const key = getKeyFromValue(value);\n    const updatedValue = updateFunc(value, update);\n\n    const trackedChange = cache.tryGetTracked(key);\n    cache.mutableValues[cache.getKeyString(key)] = {\n      type: 'add',\n      addValue: updatedValue,\n      value: updatedValue,\n      subType:\n        // trackedChange undefined -> value must exist so it's an update\n        // trackedChange.type === 'delete' -> value must have previously existed, so we ignore the delete and it's an update\n        // trackedChange.subType === 'update' -> value must have previously existed\n        // otherwise -> value did not exist, we're just adding twice.\n        trackedChange === undefined || trackedChange.type === 'delete' || trackedChange.subType === 'update'\n          ? 'update'\n          : 'add',\n    };\n\n    return updatedValue;\n  };\n}\ntype DeleteFunc<Key> = (key: Key) => Promise<void>;\n\n// tslint:disable-next-line no-any\nfunction createDelete<Key>({ cache }: { readonly cache: ReadStorageCache<Key, any, any> }): DeleteFunc<Key> {\n  return async (key: Key): Promise<void> => {\n    const currentValue = await cache.tryGetValue(key);\n    if (currentValue === undefined) {\n      // We did not have a value before, so just delete any tracked changes as if they never occurred.\n      delete cache.mutableValues[cache.getKeyString(key)];\n    } else {\n      cache.mutableValues[cache.getKeyString(key)] = { type: 'delete', key };\n    }\n  };\n}\n\ninterface ReadAddUpdateDeleteStorageCacheOptions<Key, Value, Update>\n  extends ReadStorageCacheOptions<Key, Value, Value> {\n  readonly update: (value: Value, update: Update) => Value;\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nexport class ReadAddUpdateDeleteStorageCache<Key, Value, Update> extends ReadStorageCache<Key, Value, Value> {\n  public readonly add: AddFunc<Value>;\n  public readonly update: UpdateFunc<Value, Update>;\n  public readonly delete: DeleteFunc<Key>;\n\n  public constructor(options: ReadAddUpdateDeleteStorageCacheOptions<Key, Value, Update>) {\n    super({\n      readStorage: options.readStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n    });\n\n    this.update = createUpdate({\n      cache: this,\n      update: options.update,\n      getKeyFromValue: options.getKeyFromValue,\n    });\n\n    this.delete = createDelete({ cache: this });\n  }\n}\n\ninterface ReadAddUpdateStorageCacheOptions<Key, Value, Update> extends ReadStorageCacheOptions<Key, Value, Value> {\n  readonly update: (value: Value, update: Update) => Value;\n  readonly getKeyFromValue: (value: Value) => Key;\n  readonly allowDupes?: boolean;\n}\n\nexport class ReadAddUpdateStorageCache<Key, Value, Update> extends ReadStorageCache<Key, Value, Value> {\n  public readonly add: AddFunc<Value>;\n  public readonly update: UpdateFunc<Value, Update>;\n\n  public constructor(options: ReadAddUpdateStorageCacheOptions<Key, Value, Update>) {\n    super({\n      readStorage: options.readStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n      allowDupes: options.allowDupes,\n    });\n\n    this.update = createUpdate({\n      cache: this,\n      update: options.update,\n      getKeyFromValue: options.getKeyFromValue,\n    });\n  }\n}\n\ninterface ReadAddDeleteStorageCacheOptions<Key, Value> extends ReadStorageCacheOptions<Key, Value, Value> {\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nexport class ReadAddDeleteStorageCache<Key, Value> extends ReadStorageCache<Key, Value, Value> {\n  public readonly add: AddFunc<Value>;\n  public readonly delete: DeleteFunc<Key>;\n\n  public constructor(options: ReadAddDeleteStorageCacheOptions<Key, Value>) {\n    super({\n      readStorage: options.readStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n    });\n\n    this.delete = createDelete({ cache: this });\n  }\n}\n\ninterface ReadAddStorageCacheOptions<Key, Value> extends ReadStorageCacheOptions<Key, Value, Value> {\n  readonly getKeyFromValue: (value: Value) => Key;\n  readonly allowDupes?: boolean;\n}\n\nexport class ReadAddStorageCache<Key, Value> extends ReadStorageCache<Key, Value, Value> {\n  public readonly add: AddFunc<Value>;\n\n  public constructor(options: ReadAddStorageCacheOptions<Key, Value>) {\n    super({\n      readStorage: options.readStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n      allowDupes: options.allowDupes,\n    });\n  }\n}\n\ninterface ReadGetAllAddDeleteStorageCacheOptions<Key, PartialKey, Value>\n  extends ReadGetAllStorageCacheOptions<Key, PartialKey, Value> {\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nexport class ReadGetAllAddDeleteStorageCache<Key, PartialKey, Value> extends ReadGetAllStorageCache<\n  Key,\n  PartialKey,\n  Value\n> {\n  public readonly add: AddFunc<Value>;\n  public readonly delete: DeleteFunc<Key>;\n\n  public constructor(options: ReadGetAllAddDeleteStorageCacheOptions<Key, PartialKey, Value>) {\n    super({\n      readGetAllStorage: options.readGetAllStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n      getKeyFromValue: options.getKeyFromValue,\n      matchesPartialKey: options.matchesPartialKey,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n    });\n\n    this.delete = createDelete({ cache: this });\n  }\n}\n\ninterface ReadGetAllAddUpdateDeleteStorageCacheOptions<Key, PartialKey, Value, Update>\n  extends ReadGetAllStorageCacheOptions<Key, PartialKey, Value> {\n  readonly update: (value: Value, update: Update) => Value;\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nexport class ReadGetAllAddUpdateDeleteStorageCache<Key, PartialKey, Value, Update> extends ReadGetAllStorageCache<\n  Key,\n  PartialKey,\n  Value\n> {\n  public readonly add: AddFunc<Value>;\n  public readonly update: UpdateFunc<Value, Update>;\n  public readonly delete: DeleteFunc<Key>;\n\n  public constructor(options: ReadGetAllAddUpdateDeleteStorageCacheOptions<Key, PartialKey, Value, Update>) {\n    super({\n      readGetAllStorage: options.readGetAllStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n      getKeyFromValue: options.getKeyFromValue,\n      matchesPartialKey: options.matchesPartialKey,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n    });\n\n    this.update = createUpdate({\n      cache: this,\n      update: options.update,\n      getKeyFromValue: options.getKeyFromValue,\n    });\n\n    this.delete = createDelete({ cache: this });\n  }\n}\n\ninterface ReadGetAllAddStorageCacheOptions<Key, PartialKey, Value>\n  extends ReadGetAllStorageCacheOptions<Key, PartialKey, Value> {\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nexport class ReadGetAllAddStorageCache<Key, PartialKey, Value> extends ReadGetAllStorageCache<Key, PartialKey, Value> {\n  public readonly add: AddFunc<Value>;\n\n  public constructor(options: ReadGetAllAddStorageCacheOptions<Key, PartialKey, Value>) {\n    super({\n      readGetAllStorage: options.readGetAllStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n      getKeyFromValue: options.getKeyFromValue,\n      matchesPartialKey: options.matchesPartialKey,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n    });\n  }\n}\n\ninterface ReadAllAddUpdateDeleteStorageCacheOptions<Key, Value, Update> extends ReadAllStorageCacheOptions<Key, Value> {\n  readonly update: (value: Value, update: Update) => Value;\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nexport class ReadAllAddUpdateDeleteStorageCache<Key, Value, Update> extends ReadAllStorageCache<Key, Value> {\n  public readonly add: AddFunc<Value>;\n  public readonly update: UpdateFunc<Value, Update>;\n  public readonly delete: DeleteFunc<Key>;\n\n  public constructor(options: ReadAllAddUpdateDeleteStorageCacheOptions<Key, Value, Update>) {\n    super({\n      readAllStorage: options.readAllStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n      getKeyFromValue: options.getKeyFromValue,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n    });\n\n    this.update = createUpdate({\n      cache: this,\n      update: options.update,\n      getKeyFromValue: options.getKeyFromValue,\n    });\n\n    this.delete = createDelete({ cache: this });\n  }\n}\n\ninterface ReadAllAddStorageCacheOptions<Key, Value> extends ReadAllStorageCacheOptions<Key, Value> {\n  readonly getKeyFromValue: (value: Value) => Key;\n}\n\nexport class ReadAllAddStorageCache<Key, Value> extends ReadAllStorageCache<Key, Value> {\n  public readonly add: AddFunc<Value>;\n\n  public constructor(options: ReadAllAddStorageCacheOptions<Key, Value>) {\n    super({\n      readAllStorage: options.readAllStorage,\n      name: options.name,\n      getKeyString: options.getKeyString,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n      getKeyFromValue: options.getKeyFromValue,\n    });\n\n    this.add = createAdd({\n      cache: this,\n      getKeyFromValue: options.getKeyFromValue,\n      getKeyString: options.getKeyString,\n    });\n  }\n}\n\ninterface BlockLikeKey {\n  readonly hashOrIndex: Block['hash'] | Block['index'];\n}\n\ninterface BlockLike {\n  readonly hash: Block['hash'];\n  readonly index: Block['index'];\n}\n\ninterface BlockLikeStorageCacheOptions<Value extends BlockLike>\n  extends BaseReadStorageCacheOptions<BlockLikeKey, Value, Value> {}\n\nexport class BlockLikeStorageCache<Value extends BlockLike> extends BaseReadStorageCache<BlockLikeKey, Value, Value> {\n  // tslint:disable-next-line readonly-keyword\n  protected readonly mutableIndexValues: { [index: string]: TrackedChange<BlockLikeKey, Value, Value> };\n\n  public constructor(options: BlockLikeStorageCacheOptions<Value>) {\n    super({\n      readStorage: options.readStorage,\n      name: options.name,\n      createAddChange: options.createAddChange,\n    });\n\n    this.mutableIndexValues = {};\n  }\n\n  public async add(value: Value): Promise<void> {\n    const currentValue = await this.tryGet({ hashOrIndex: value.index });\n    if (currentValue !== undefined) {\n      throw new Error('Attempted to add an already existing object.');\n    }\n\n    const addValue: TrackedChange<BlockLikeKey, Value, Value> = { type: 'add', addValue: value, value, subType: 'add' };\n    this.mutableValues[common.uInt256ToString(value.hash)] = addValue;\n    this.mutableIndexValues[`${value.index}`] = addValue;\n  }\n\n  public tryGetTracked(key: BlockLikeKey): TrackedChange<BlockLikeKey, Value, Value> | undefined {\n    if (typeof key.hashOrIndex !== 'number') {\n      return this.mutableValues[common.uInt256ToString(key.hashOrIndex)];\n    }\n\n    return this.mutableIndexValues[`${key.hashOrIndex}`];\n  }\n\n  public addTrackedChange(key: string, value: TrackedChange<BlockLikeKey, Value, Value>): void {\n    this.mutableValues[key] = value;\n  }\n}\n\ninterface OutputValue {\n  readonly hash: UInt256;\n  readonly index: number;\n  readonly output: Output;\n}\n\nconst getOutputValueKeyString = (key: OutputKey): string => `${common.uInt256ToHex(key.hash)}:${key.index}`;\n\nexport class OutputStorageCache extends ReadStorageCache<OutputKey, OutputValue, Output> {\n  public readonly add: AddFunc<OutputValue>;\n\n  public constructor(readStorage: () => ReadStorage<OutputKey, Output>) {\n    super({\n      readStorage,\n      name: 'output',\n      getKeyString: getOutputValueKeyString,\n      createAddChange: (value: OutputValue) => ({ type: 'output', value }),\n    });\n\n    this.add = async (value: OutputValue): Promise<void> => {\n      const key = { hash: value.hash, index: value.index };\n\n      const currentValue = await this.tryGet(key);\n      if (currentValue !== undefined) {\n        throw new Error(\n          `Attempted to add an already existing object for key ` + `${this.name}:${this.getKeyString(key)}.`,\n        );\n      }\n\n      this.mutableValues[this.getKeyString(key)] = {\n        type: 'add',\n        addValue: value,\n        value: value.output,\n        subType: 'add',\n      };\n    };\n  }\n}\ntype TrackedMetadataChange<AddValue, Value> =\n  | { readonly type: 'add'; readonly addValue: AddValue; readonly value: Value; readonly subType: 'add' | 'update' }\n  | { readonly type: 'delete' };\ntype GetMetadataFunc<Value> = (key?: undefined) => Promise<Value>;\ntype TryGetMetadataFunc<Value> = (key?: undefined) => Promise<Value | undefined>;\n\nfunction createGetMetadata<Key, Value>({\n  tryGetTracked,\n  readStorage,\n}: {\n  // tslint:disable-next-line no-any\n  readonly tryGetTracked: () => TrackedMetadataChange<any, Value> | undefined;\n  readonly readStorage: () => ReadMetadataStorage<Value>;\n}): GetFunc<Key, Value> {\n  return async (): Promise<Value> => {\n    const trackedChange = tryGetTracked();\n    if (trackedChange !== undefined) {\n      if (trackedChange.type === 'delete') {\n        throw new Error('Not found');\n      }\n\n      return trackedChange.value;\n    }\n\n    return readStorage().get();\n  };\n}\n\nfunction createTryGetMetadata<Value>({\n  tryGetTracked,\n  readStorage,\n}: {\n  // tslint:disable-next-line no-any\n  readonly tryGetTracked: () => TrackedMetadataChange<any, Value> | undefined;\n  readonly readStorage: () => ReadMetadataStorage<Value>;\n}): TryGetMetadataFunc<Value> {\n  return async (): Promise<Value | undefined> => {\n    const trackedChange = tryGetTracked();\n    if (trackedChange !== undefined) {\n      if (trackedChange.type === 'delete') {\n        return undefined;\n      }\n\n      return trackedChange.value;\n    }\n\n    return readStorage().tryGet();\n  };\n}\n\ninterface BaseReadMetadataStorageCacheOptions<AddValue, Value> {\n  readonly readStorage: () => ReadMetadataStorage<Value>;\n  readonly name: string;\n  readonly createAddChange: (value: AddValue) => AddChange;\n  readonly createDeleteChange?: () => DeleteChange;\n  readonly onAdd?: (value: AddValue) => Promise<void>;\n}\n\nexport class BaseReadMetadataStorageCache<AddValue, Value> {\n  public readonly get: GetMetadataFunc<Value>;\n  public readonly tryGet: TryGetMetadataFunc<Value>;\n  public mutableValue: TrackedMetadataChange<AddValue, Value> | undefined;\n  public readonly onAdd: ((value: AddValue) => Promise<void>) | undefined;\n  protected readonly readStorage: () => ReadMetadataStorage<Value>;\n  protected readonly name: string;\n  protected readonly createAddChange: (value: AddValue) => AddChange;\n  protected readonly createDeleteChange: (() => DeleteChange) | undefined;\n\n  public constructor(options: BaseReadMetadataStorageCacheOptions<AddValue, Value>) {\n    this.readStorage = options.readStorage;\n    this.name = options.name;\n    this.createAddChange = options.createAddChange;\n    this.createDeleteChange = options.createDeleteChange;\n    this.onAdd = options.onAdd;\n\n    this.get = createGetMetadata({\n      readStorage: this.readStorage,\n      tryGetTracked: this.tryGetTracked.bind(this),\n    });\n\n    this.tryGet = createTryGetMetadata({\n      readStorage: this.readStorage,\n      tryGetTracked: this.tryGetTracked.bind(this),\n    });\n  }\n\n  public getChangeSet(): ChangeSet {\n    const createDeleteChange = this.createDeleteChange;\n    const value = this.mutableValue;\n    if (value === undefined) {\n      return [];\n    }\n\n    if (value.type === 'delete') {\n      if (createDeleteChange === undefined) {\n        throw new Error('Invalid delete');\n      }\n\n      return [{ type: 'delete', change: createDeleteChange() }];\n    }\n\n    return [{ type: 'add', change: this.createAddChange(value.addValue), subType: value.subType }];\n  }\n\n  public getTrackedChangeSet(): TrackedChangeSet<string, AddValue, Value> {\n    const createDeleteChange = this.createDeleteChange;\n    const value = this.mutableValue;\n    if (value === undefined) {\n      return [];\n    }\n\n    if (value.type === 'delete') {\n      if (createDeleteChange === undefined) {\n        throw new Error('Invalid delete');\n      }\n\n      return [{ type: createDeleteChange().type, key: 'metadata', value: { ...value, key: 'metadata' } }];\n    }\n\n    return [{ type: this.createAddChange(value.addValue).type, key: 'metadata', value }];\n  }\n\n  public tryGetTracked(): TrackedMetadataChange<AddValue, Value> | undefined {\n    return this.mutableValue;\n  }\n\n  public addTrackedChange(_key: string, value: TrackedMetadataChange<AddValue, Value>): void {\n    this.mutableValue = value;\n  }\n}\n\nclass ReadMetadataStorageCache<AddValue, Value> extends BaseReadMetadataStorageCache<AddValue, Value> {}\n\nfunction createAddMetadata<Value>({\n  cache,\n}: {\n  readonly cache: ReadMetadataStorageCache<Value, Value>;\n}): AddFunc<Value> {\n  return async (value: Value): Promise<void> => {\n    if (cache.onAdd !== undefined) {\n      await cache.onAdd(value);\n    }\n\n    cache.mutableValue = {\n      type: 'add',\n      addValue: value,\n      value,\n      subType: 'add',\n    };\n  };\n}\n\nfunction createUpdateMetadata<Value, Update>({\n  cache,\n  update: updateFunc,\n}: {\n  readonly cache: ReadMetadataStorageCache<Value, Value>;\n  readonly update: (value: Value, update: Update) => Value;\n}): UpdateFunc<Value, Update> {\n  return async (value: Value, update: Update): Promise<Value> => {\n    const updatedValue = updateFunc(value, update);\n    cache.mutableValue = {\n      type: 'add',\n      addValue: updatedValue,\n      value: updatedValue,\n      subType: 'update',\n    };\n\n    return updatedValue;\n  };\n}\n\ninterface ReadAddUpdateMetadataStorageCacheOptions<Value, Update>\n  extends BaseReadMetadataStorageCacheOptions<Value, Value> {\n  readonly update: (value: Value, update: Update) => Value;\n}\n\nexport class ReadAddUpdateMetadataStorageCache<Value, Update> extends ReadMetadataStorageCache<Value, Value> {\n  public readonly add: AddFunc<Value>;\n  public readonly update: UpdateFunc<Value, Update>;\n\n  public constructor(options: ReadAddUpdateMetadataStorageCacheOptions<Value, Update>) {\n    super({\n      readStorage: options.readStorage,\n      name: options.name,\n      createAddChange: options.createAddChange,\n      createDeleteChange: options.createDeleteChange,\n      onAdd: options.onAdd,\n    });\n\n    this.add = createAddMetadata({\n      cache: this,\n    });\n\n    this.update = createUpdateMetadata({\n      cache: this,\n      update: options.update,\n    });\n  }\n}\n","import { crypto, utils, VMState } from '@neo-one/client-common';\nimport { nodeLogger } from '@neo-one/logger';\nimport {\n  Block,\n  ByteArrayContractParameter,\n  ExecuteScriptsResult,\n  ExecutionAction,\n  Script,\n  ScriptContainer,\n  TriggerType,\n  VMListeners,\n  WriteBlockchain,\n} from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport {\n  ExecutionContext,\n  ExecutionInit,\n  FREE_GAS,\n  MAX_INVOCATION_STACK_SIZE,\n  MAX_STACK_SIZE,\n  Options,\n} from './constants';\nimport {\n  AltStackUnderflowError,\n  InvocationStackOverflowError,\n  OutOfGASError,\n  StackOverflowError,\n  StackUnderflowError,\n  TemplateVMError,\n  UnknownError,\n} from './errors';\nimport { lookupOp } from './opcodes';\nimport { StackItem } from './stackItem';\n\nconst logger = nodeLogger.child({ component: 'vm' });\n\nconst getErrorMessage = (error: Error) => `${error.message}\\n${error.stack}`;\n\nconst executeNext = async ({\n  context: contextIn,\n}: {\n  readonly context: ExecutionContext;\n}): Promise<ExecutionContext> => {\n  let context = contextIn;\n  if (context.state !== VMState.None) {\n    return context;\n  }\n\n  if (context.pc >= context.code.length) {\n    return {\n      ...context,\n      state: VMState.Halt,\n    };\n  }\n\n  const { op, context: opContext } = lookupOp({ context });\n  context = opContext;\n\n  if (context.stack.length < op.in) {\n    throw new StackUnderflowError(context, op.name, context.stack.length, op.in);\n  }\n\n  if (context.stackAlt.length < op.inAlt) {\n    throw new AltStackUnderflowError(context);\n  }\n\n  if (context.depth + op.invocation > MAX_INVOCATION_STACK_SIZE) {\n    throw new InvocationStackOverflowError(context);\n  }\n\n  const args = context.stack.slice(0, op.in);\n  const argsAlt = context.stackAlt.slice(0, op.inAlt);\n\n  context = {\n    ...context,\n    stack: context.stack.slice(op.in),\n    stackAlt: context.stackAlt.slice(op.inAlt),\n    stackCount:\n      context.stackCount +\n      args.reduce((acc, val) => acc + val.decrement(), 0) +\n      argsAlt.reduce((acc, val) => acc + val.decrement(), 0),\n    gasLeft: context.gasLeft.sub(op.fee),\n  };\n\n  if (context.gasLeft.lt(utils.ZERO)) {\n    throw new OutOfGASError(context);\n  }\n\n  let result;\n  try {\n    result = await op.invoke({ context, args, argsAlt });\n  } catch (error) {\n    if (error.code === 'VM_ERROR') {\n      throw error;\n    }\n    const newError = new TemplateVMError(context, `VM Error: ${error.message}`);\n    // tslint:disable-next-line no-object-mutation\n    newError.stack = error.stack;\n    throw newError;\n  }\n\n  const { context: newContext, results, resultsAlt } = result;\n  context = newContext;\n\n  if (op.out > 0) {\n    if (results === undefined || results.length !== op.out) {\n      throw new UnknownError(context);\n    }\n    context = {\n      ...context,\n      stack: _.reverse(results).concat(context.stack),\n      stackCount: context.stackCount + results.reduce((acc, value) => acc + value.increment(), 0),\n    };\n  } else if (results !== undefined) {\n    throw new UnknownError(context);\n  }\n\n  if (op.outAlt > 0) {\n    if (resultsAlt === undefined || resultsAlt.length !== op.outAlt) {\n      throw new UnknownError(context);\n    }\n\n    context = {\n      ...context,\n      stackAlt: _.reverse(resultsAlt).concat(context.stackAlt),\n      stackCount: context.stackCount + resultsAlt.reduce((acc, value) => acc + value.increment(), 0),\n    };\n  } else if (resultsAlt !== undefined) {\n    throw new UnknownError(context);\n  }\n\n  if (context.stackCount > MAX_STACK_SIZE) {\n    throw new StackOverflowError(context);\n  }\n\n  return context;\n};\n\nconst run = async ({ context: contextIn }: { readonly context: ExecutionContext }): Promise<ExecutionContext> => {\n  let context = contextIn;\n  // tslint:disable-next-line no-loop-statement\n  while (context.state === VMState.None) {\n    try {\n      // eslint-disable-next-line\n      context = await executeNext({ context });\n    } catch (error) {\n      context = {\n        state: VMState.Fault,\n        errorMessage: getErrorMessage(error),\n        blockchain: context.blockchain,\n        init: context.init,\n        engine: context.engine,\n        code: context.code,\n        scriptHashStack: context.scriptHashStack,\n        scriptHash: context.scriptHash,\n        callingScriptHash: context.callingScriptHash,\n        entryScriptHash: context.entryScriptHash,\n        pc: context.pc,\n        depth: context.depth,\n        stack: context.stack,\n        stackAlt: context.stackAlt,\n        gasLeft: context.gasLeft,\n        createdContracts: context.createdContracts,\n        returnValueCount: context.returnValueCount,\n        stackCount: context.stackCount,\n      };\n    }\n  }\n\n  return context;\n};\n\nexport const executeScript = async ({\n  code,\n  blockchain,\n  init,\n  gasLeft,\n  options: {\n    scriptHashStack = [],\n    // tslint:disable no-unnecessary-initializer\n    // @ts-ignore\n    scriptHash: callingScriptHash = undefined,\n    // tslint:enable no-unnecessary-initializer\n    entryScriptHash = callingScriptHash,\n    depth = 1,\n    stack = [],\n    stackAlt = [],\n    createdContracts = {},\n    returnValueCount = -1,\n    stackCount = 0,\n    pc = 0,\n  } = {},\n}: {\n  readonly code: Buffer;\n  readonly blockchain: WriteBlockchain;\n  readonly init: ExecutionInit;\n  readonly gasLeft: BN;\n  readonly options?: Partial<Options>;\n}): Promise<ExecutionContext> => {\n  const scriptHash = crypto.hash160(code);\n\n  const context = {\n    state: VMState.None,\n    blockchain,\n    init,\n    engine: {\n      run,\n      executeScript,\n    },\n    code,\n    scriptHashStack,\n    scriptHash,\n    callingScriptHash,\n    entryScriptHash: entryScriptHash === undefined ? scriptHash : entryScriptHash,\n    pc,\n    depth,\n    stack,\n    stackAlt,\n    gasLeft,\n    createdContracts,\n    returnValueCount,\n    stackCount,\n  };\n\n  try {\n    const result = await run({ context });\n    logger.trace({ title: 'neo_execute_script' });\n\n    return result;\n  } catch (error) {\n    logger.trace({ title: 'neo_execute_script', error });\n    throw error;\n  }\n};\n\nconst safeToContractParameter = (item: StackItem, safe: boolean) => {\n  if (safe) {\n    try {\n      return item.toContractParameter();\n    } catch {\n      return new ByteArrayContractParameter(Buffer.alloc(0, 0));\n    }\n  }\n\n  return item.toContractParameter();\n};\n\nexport const execute = async ({\n  scripts,\n  blockchain,\n  scriptContainer,\n  triggerType,\n  action,\n  returnValueCount = -1,\n  gas: gasIn,\n  listeners = {},\n  skipWitnessVerify = false,\n  persistingBlock,\n}: {\n  readonly scripts: readonly Script[];\n  readonly blockchain: WriteBlockchain;\n  readonly scriptContainer: ScriptContainer;\n  readonly triggerType: TriggerType;\n  readonly action: ExecutionAction;\n  readonly gas: BN;\n  readonly returnValueCount?: number;\n  readonly listeners?: VMListeners;\n  readonly skipWitnessVerify?: boolean;\n  readonly persistingBlock?: Block;\n}): Promise<ExecuteScriptsResult> => {\n  const init = {\n    scriptContainer,\n    triggerType,\n    action,\n    listeners,\n    skipWitnessVerify,\n    persistingBlock,\n  };\n\n  let context;\n  const startingGas = gasIn.add(FREE_GAS);\n  let gas = startingGas;\n  let errorMessage;\n\n  try {\n    const entryScriptHash = crypto.hash160(scripts[0].code);\n    // tslint:disable-next-line no-loop-statement\n    for (let idx = 0; idx < scripts.length && (context === undefined || context.state === VMState.Halt); idx += 1) {\n      const script = scripts[idx];\n      // NOTE: scriptHash has a different meaning here, it will be translated\n      //       to callingScriptHash within executeScript. executeScript\n      //       automatically hashes the input code to determine the current\n      //       scriptHash.\n      const scriptHash = idx - 1 >= 0 ? crypto.hash160(scripts[idx - 1].code) : undefined;\n      let options: Options = {\n        depth: scripts.length - idx,\n        stack: [],\n        stackAlt: [],\n        createdContracts: {},\n        scriptHashStack: [entryScriptHash],\n        scriptHash,\n        entryScriptHash,\n        returnValueCount,\n        stackCount: 0,\n      };\n\n      if (context !== undefined) {\n        options = {\n          depth: scripts.length - idx,\n          stack: context.stack,\n          stackAlt: context.stackAlt,\n          createdContracts: context.createdContracts,\n          scriptHashStack: context.scriptHashStack,\n          scriptHash,\n          entryScriptHash,\n          returnValueCount,\n          stackCount: context.stackCount,\n        };\n      }\n\n      context = await executeScript({\n        code: script.code,\n        blockchain,\n        init,\n        gasLeft: gas,\n        options,\n      });\n\n      gas = context.gasLeft;\n    }\n  } catch (error) {\n    errorMessage = getErrorMessage(error);\n  }\n\n  const finalContext = context;\n  if (finalContext === undefined) {\n    return {\n      state: errorMessage === undefined ? VMState.Halt : VMState.Fault,\n      stack: [],\n      stackAlt: [],\n      gasConsumed: utils.ZERO,\n      gasCost: utils.ZERO,\n      errorMessage,\n    };\n  }\n\n  const gasCost = startingGas.sub(finalContext.gasLeft);\n  let gasConsumed = gasCost.sub(FREE_GAS);\n  if (gasConsumed.lt(utils.ZERO)) {\n    gasConsumed = utils.ZERO;\n  }\n\n  const state = errorMessage === undefined ? finalContext.state : VMState.Fault;\n  const toContractParameter = (item: StackItem) => safeToContractParameter(item, state === VMState.Fault);\n\n  return {\n    state: errorMessage === undefined ? finalContext.state : VMState.Fault,\n    stack: finalContext.stack.map(toContractParameter),\n    stackAlt: finalContext.stackAlt.map(toContractParameter),\n    gasConsumed,\n    gasCost,\n    errorMessage: errorMessage === undefined ? finalContext.errorMessage : errorMessage,\n  };\n};\n","import { common, crypto, Op as OpCodeToByteCode, OpCode, UInt160, utils, VMState } from '@neo-one/client-common';\n// tslint:disable-next-line:match-default-export-name\nimport bitwise from 'bitwise';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport {\n  ExecutionContext,\n  ExecutionStack,\n  FEES,\n  MAX_ARRAY_SIZE,\n  MAX_ITEM_SIZE,\n  MAX_SHL_SHR,\n  MIN_SHL_SHR,\n  Op,\n  OpInvoke,\n} from './constants';\nimport {\n  CodeOverflowError,\n  ContainerTooLargeError,\n  ContractNoDynamicInvokeError,\n  InsufficientReturnValueError,\n  InvalidCheckMultisigArgumentsError,\n  InvalidHasKeyIndexError,\n  InvalidPackCountError,\n  InvalidPickItemKeyError,\n  InvalidRemoveIndexError,\n  InvalidSetItemIndexError,\n  InvalidTailCallReturnValueError,\n  ItemTooLargeError,\n  LeftNegativeError,\n  PickNegativeError,\n  RightLengthError,\n  RightNegativeError,\n  RollNegativeError,\n  ShiftTooLargeError,\n  StackUnderflowError,\n  SubstrNegativeEndError,\n  SubstrNegativeStartError,\n  ThrowError,\n  UnknownOpError,\n  XDropNegativeError,\n  XDropUnderflowError,\n  XSwapNegativeError,\n  XTuckNegativeError,\n} from './errors';\nimport {\n  ArrayStackItem,\n  BooleanStackItem,\n  BufferStackItem,\n  IntegerStackItem,\n  MapStackItem,\n  StackItem,\n  StructStackItem,\n  UInt160StackItem,\n  UInt256StackItem,\n} from './stackItem';\nimport { lookupSysCall } from './syscalls';\nimport { vmUtils } from './vmUtils';\n\nexport type CreateOp = (\n  input: CreateOpArgs,\n) => {\n  readonly op: Op;\n  readonly context: ExecutionContext;\n};\n\ninterface OpStatic {\n  readonly type: 'op';\n  readonly op: Op;\n}\n\ninterface OpCreate {\n  readonly type: 'create';\n  readonly create: CreateOp;\n}\n\ntype OpObject = OpStatic | OpCreate;\n\nexport interface CreateOpArgs {\n  readonly context: ExecutionContext;\n}\n\nexport const createOp = ({\n  name,\n  in: _in = 0,\n  inAlt = 0,\n  out = 0,\n  outAlt = 0,\n  invocation = 0,\n  fee: feeIn,\n  invoke,\n}: {\n  readonly name: OpCode;\n  readonly in?: number;\n  readonly inAlt?: number;\n  readonly out?: number;\n  readonly outAlt?: number;\n  readonly invocation?: number;\n  readonly array?: number;\n  readonly item?: number;\n  readonly fee?: BN;\n  readonly invoke: OpInvoke;\n}): OpStatic => {\n  let fee = feeIn;\n  if (fee === undefined) {\n    const byteCode = OpCodeToByteCode[name];\n    fee = byteCode <= OpCodeToByteCode.NOP ? utils.ZERO : FEES.ONE;\n  }\n\n  return {\n    type: 'op',\n    op: {\n      name,\n      in: _in,\n      inAlt,\n      out,\n      outAlt,\n      invocation,\n      fee,\n      invoke,\n    },\n  };\n};\n\nconst pushNumber = ({ name, value }: { readonly name: OpCode; readonly value: number }) =>\n  createOp({\n    name,\n    out: 1,\n    invoke: ({ context }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(value))],\n    }),\n  });\n\nconst pushData = ({ name, numBytes }: { readonly name: OpCode; readonly numBytes: 1 | 2 | 4 }) =>\n  createOp({\n    name,\n    out: 1,\n    invoke: ({ context }) => {\n      const { code, pc } = context;\n      let size;\n      if (numBytes === 1) {\n        size = code.readUInt8(context.pc);\n      } else if (numBytes === 2) {\n        size = code.readUInt16LE(pc);\n      } else {\n        size = code.readInt32LE(pc);\n      }\n\n      if (code.length < pc + numBytes + size - 1) {\n        throw new CodeOverflowError(context);\n      }\n\n      const value = code.slice(pc + numBytes, pc + numBytes + size);\n      if (value.length > MAX_ITEM_SIZE) {\n        throw new ItemTooLargeError(context);\n      }\n\n      return {\n        context: {\n          ...context,\n          pc: pc + numBytes + size,\n        },\n\n        results: [new BufferStackItem(value)],\n      };\n    },\n  });\n\nconst jump = ({ name, checkTrue }: { readonly name: OpCode; readonly checkTrue?: boolean }) =>\n  createOp({\n    name,\n    in: checkTrue === undefined ? 0 : 1,\n    invoke: ({ context, args }) => {\n      const { code } = context;\n      let { pc } = context;\n      const offset = code.readInt16LE(pc);\n      pc += 2;\n      const newPC = pc + offset - 3;\n      if (newPC < 0 || newPC > code.length) {\n        throw new CodeOverflowError(context);\n      }\n\n      let shouldJump = true;\n      if (checkTrue !== undefined) {\n        shouldJump = args[0].asBoolean();\n        if (!checkTrue) {\n          shouldJump = !shouldJump;\n        }\n      }\n\n      return {\n        context: {\n          ...context,\n          pc: shouldJump ? newPC : pc,\n        },\n      };\n    },\n  });\n\nconst isDynamic = (hash: UInt160) => common.uInt160ToBuffer(hash).every((value) => value === 0);\n\nconst call = ({ name, tailCall }: { readonly name: OpCode; readonly tailCall?: boolean }): OpCreate => ({\n  type: 'create',\n  create: ({ context: contextIn }) => {\n    const hashIn = common.bufferToUInt160(contextIn.code.slice(contextIn.pc, contextIn.pc + 20));\n\n    const { op } = createOp({\n      name,\n      in: isDynamic(hashIn) ? 1 : 0,\n      invocation: tailCall ? 0 : 1,\n      fee: FEES.TEN,\n      invoke: async ({ context, args }) => {\n        const { pc, scriptHash } = context;\n        let hash = common.bufferToUInt160(context.code.slice(pc, pc + 20));\n        if (isDynamic(hash)) {\n          hash = common.bufferToUInt160(args[0].asBuffer());\n\n          const executingContract = await context.blockchain.contract.get({\n            hash: scriptHash,\n          });\n\n          if (!executingContract.hasDynamicInvoke) {\n            throw new ContractNoDynamicInvokeError(context, common.uInt160ToString(scriptHash));\n          }\n        }\n        const contract = await context.blockchain.contract.get({ hash });\n        const scriptHashStack = [hash, ...context.scriptHashStack];\n        const resultContext = await context.engine.executeScript({\n          code: contract.script,\n          blockchain: context.blockchain,\n          init: context.init,\n          gasLeft: context.gasLeft,\n          options: {\n            stack: context.stack,\n            stackAlt: context.stackAlt,\n            depth: tailCall ? context.depth : context.depth + 1,\n            createdContracts: context.createdContracts,\n            scriptHashStack: tailCall ? scriptHashStack.slice(0, scriptHashStack.length - 1) : scriptHashStack,\n            scriptHash: context.scriptHash,\n            entryScriptHash: context.entryScriptHash,\n            returnValueCount: -1,\n            stackCount: context.stackCount,\n          },\n        });\n\n        let { state } = resultContext;\n        if (state === VMState.Halt) {\n          // If it's a tail call, then the final recursive call executes the rest\n          // of the script, and we just return immediately here.\n          state = tailCall ? VMState.Halt : context.state;\n        }\n\n        return {\n          context: {\n            state,\n            errorMessage: resultContext.errorMessage,\n            blockchain: context.blockchain,\n            init: context.init,\n            engine: context.engine,\n            code: context.code,\n            scriptHashStack: tailCall\n              ? context.scriptHashStack.slice(0, context.scriptHashStack.length - 1)\n              : context.scriptHashStack,\n            scriptHash: context.scriptHash,\n            callingScriptHash: context.callingScriptHash,\n            entryScriptHash: context.entryScriptHash,\n            pc: pc + 20,\n            depth: context.depth,\n            returnValueCount: context.returnValueCount,\n            stackCount: resultContext.stackCount,\n            stack: resultContext.stack,\n            stackAlt: resultContext.stackAlt,\n            gasLeft: resultContext.gasLeft,\n            createdContracts: resultContext.createdContracts,\n          },\n        };\n      },\n    });\n\n    return { op, context: contextIn };\n  },\n});\n\nconst callIsolated = ({\n  name,\n  dynamicCall,\n  tailCall,\n}: {\n  readonly name: OpCode;\n  readonly dynamicCall?: boolean;\n  readonly tailCall?: boolean;\n}): OpCreate => ({\n  type: 'create',\n  create: ({ context: contextIn }) => {\n    const returnValueCount = contextIn.code.slice(contextIn.pc, contextIn.pc + 1)[0];\n    const parametersCount = contextIn.code.slice(contextIn.pc + 1, contextIn.pc + 2)[0];\n\n    const nextPC = dynamicCall ? contextIn.pc + 2 : contextIn.pc + 22;\n\n    const { op } = createOp({\n      name,\n      in: parametersCount + (dynamicCall ? 1 : 0),\n      invocation: tailCall ? 0 : 1,\n      invoke: async ({ context, args }) => {\n        const { pc, scriptHash } = context;\n        const hash = dynamicCall\n          ? common.bufferToUInt160(args[0].asBuffer())\n          : common.bufferToUInt160(context.code.slice(pc + 2, pc + 22));\n\n        if (tailCall && context.returnValueCount !== returnValueCount) {\n          throw new InvalidTailCallReturnValueError(context, context.returnValueCount, returnValueCount);\n        }\n\n        if (dynamicCall) {\n          const executingContract = await context.blockchain.contract.get({\n            hash: scriptHash,\n          });\n\n          if (!executingContract.hasDynamicInvoke) {\n            throw new ContractNoDynamicInvokeError(context, common.uInt160ToString(scriptHash));\n          }\n        }\n\n        const contract = await context.blockchain.contract.get({ hash });\n        const nextStack = dynamicCall ? args.slice(1) : args;\n        const scriptHashStack = [hash, ...context.scriptHashStack];\n\n        const resultContext = await context.engine.executeScript({\n          code: contract.script,\n          blockchain: context.blockchain,\n          init: context.init,\n          gasLeft: context.gasLeft,\n          options: {\n            stack: nextStack,\n            stackAlt: [],\n            depth: tailCall ? context.depth : context.depth + 1,\n            createdContracts: context.createdContracts,\n            scriptHashStack: tailCall ? scriptHashStack.slice(0, scriptHashStack.length - 1) : scriptHashStack,\n            scriptHash: context.scriptHash,\n            entryScriptHash: context.entryScriptHash,\n            returnValueCount,\n            stackCount: context.stackCount + nextStack.reduce((acc, value) => acc + value.increment(), 0),\n          },\n        });\n\n        let { state, stackCount } = resultContext;\n        if (state === VMState.Halt) {\n          // If it's a tail call, then the final recursive call executes the rest\n          // of the script, and we just return immediately here.\n          state = tailCall ? VMState.Halt : context.state;\n        }\n\n        let stack: ExecutionStack = [];\n        if (returnValueCount === -1) {\n          stack = resultContext.stack;\n        } else if (returnValueCount > 0) {\n          if (resultContext.state === VMState.Halt && resultContext.stack.length < returnValueCount) {\n            throw new InsufficientReturnValueError(context, resultContext.stack.length, returnValueCount);\n          }\n\n          stack = resultContext.stack.slice(0, returnValueCount);\n          stackCount += resultContext.stack.slice(returnValueCount).reduce((acc, value) => acc + value.decrement(), 0);\n        }\n\n        stackCount += resultContext.stackAlt.reduce((acc, value) => acc + value.decrement(), 0);\n\n        return {\n          context: {\n            state,\n            errorMessage: resultContext.errorMessage,\n            blockchain: context.blockchain,\n            init: context.init,\n            engine: context.engine,\n            code: context.code,\n            scriptHashStack: tailCall\n              ? context.scriptHashStack.slice(0, context.scriptHashStack.length - 1)\n              : context.scriptHashStack,\n            scriptHash: context.scriptHash,\n            callingScriptHash: context.callingScriptHash,\n            entryScriptHash: context.entryScriptHash,\n            pc: nextPC,\n            depth: context.depth,\n            returnValueCount: context.returnValueCount,\n            stackCount,\n            stack: stack.concat(context.stack),\n            stackAlt: context.stackAlt,\n            gasLeft: resultContext.gasLeft,\n            createdContracts: resultContext.createdContracts,\n          },\n        };\n      },\n    });\n\n    return { op, context: contextIn };\n  },\n});\n\nconst functionCallIsolated = ({ name }: { readonly name: OpCode }): OpCreate => ({\n  type: 'create',\n  create: ({ context: contextIn }) => {\n    const returnValueCount = contextIn.code.slice(contextIn.pc, contextIn.pc + 1)[0];\n    let parametersCount = contextIn.code.slice(contextIn.pc + 1, contextIn.pc + 2)[0];\n    parametersCount = parametersCount === -1 ? contextIn.stack.length : parametersCount;\n    const jumpCount = contextIn.code.slice(contextIn.pc + 2, contextIn.pc + 4).readInt16LE(0);\n    const nextPC = contextIn.pc + 4;\n\n    const { op } = createOp({\n      name,\n      in: parametersCount,\n      invocation: 1,\n      invoke: async ({ context, args }) => {\n        const resultContext = await context.engine.executeScript({\n          code: context.code,\n          blockchain: context.blockchain,\n          init: context.init,\n          gasLeft: context.gasLeft,\n          options: {\n            stack: args,\n            stackAlt: [],\n            depth: context.depth + 1,\n            createdContracts: context.createdContracts,\n            scriptHashStack: [context.scriptHash, ...context.scriptHashStack],\n            scriptHash: context.scriptHash,\n            entryScriptHash: context.entryScriptHash,\n            returnValueCount,\n            pc: context.pc + jumpCount + 1,\n            stackCount: context.stackCount + args.reduce((acc, value) => acc + value.increment(), 0),\n          },\n        });\n\n        let { state, stackCount } = resultContext;\n        if (state === VMState.Halt) {\n          state = context.state;\n        }\n\n        let stack: ExecutionStack = [];\n        if (returnValueCount === -1) {\n          stack = resultContext.stack;\n        } else if (returnValueCount > 0) {\n          if (resultContext.stack.length < returnValueCount) {\n            throw new InsufficientReturnValueError(context, resultContext.stack.length, returnValueCount);\n          }\n\n          stack = resultContext.stack.slice(0, returnValueCount);\n          stackCount += resultContext.stack.slice(returnValueCount).reduce((acc, value) => acc + value.decrement(), 0);\n        }\n\n        stackCount += resultContext.stackAlt.reduce((acc, value) => acc + value.decrement(), 0);\n\n        return {\n          context: {\n            state,\n            errorMessage: resultContext.errorMessage,\n            blockchain: context.blockchain,\n            init: context.init,\n            engine: context.engine,\n            code: context.code,\n            scriptHashStack: context.scriptHashStack,\n            scriptHash: context.scriptHash,\n            callingScriptHash: context.callingScriptHash,\n            entryScriptHash: context.entryScriptHash,\n            pc: nextPC,\n            depth: context.depth,\n            returnValueCount: context.returnValueCount,\n            stackCount,\n            stack: stack.concat(context.stack),\n            stackAlt: context.stackAlt,\n            gasLeft: resultContext.gasLeft,\n            createdContracts: resultContext.createdContracts,\n          },\n        };\n      },\n    });\n\n    return { op, context: contextIn };\n  },\n});\n\nconst newArrayOrStruct = ({ name }: { readonly name: 'NEWARRAY' | 'NEWSTRUCT' }) =>\n  createOp({\n    name,\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => {\n      let results;\n      if (args[0].isArray()) {\n        const array = args[0].asArray();\n        results = name === 'NEWARRAY' ? [new ArrayStackItem(array)] : [new StructStackItem(array)];\n      } else {\n        const count = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n\n        if (count > MAX_ARRAY_SIZE) {\n          throw new ContainerTooLargeError(context);\n        }\n\n        const fill = _.range(0, count).map(() => new BooleanStackItem(false));\n        results = name === 'NEWARRAY' ? [new ArrayStackItem(fill)] : [new StructStackItem(fill)];\n      }\n\n      return { context, results };\n    },\n  });\n\nconst JMP = jump({ name: 'JMP' });\n\nconst OPCODE_PAIRS = ([\n  [\n    0x00,\n    createOp({\n      name: 'PUSH0',\n      out: 1,\n      invoke: ({ context }) => ({\n        context,\n        results: [new BufferStackItem(Buffer.alloc(0, 0))],\n      }),\n    }),\n  ],\n  // tslint:disable-next-line: readonly-array\n] as ReadonlyArray<[number, OpObject]>)\n  .concat(\n    // tslint:disable-next-line: readonly-array\n    _.range(0x01, 0x4c).map<[number, OpObject]>((idx) => [\n      idx,\n      createOp({\n        // tslint:disable-next-line no-any\n        name: `PUSHBYTES${idx}` as any,\n        out: 1,\n        invoke: ({ context }) => ({\n          context: {\n            ...context,\n            pc: context.pc + idx,\n          },\n          results: [new BufferStackItem(context.code.slice(context.pc, context.pc + idx))],\n        }),\n      }),\n    ]),\n  )\n  .concat([\n    [0x4c, pushData({ name: 'PUSHDATA1', numBytes: 1 })],\n    [0x4d, pushData({ name: 'PUSHDATA2', numBytes: 2 })],\n    [0x4e, pushData({ name: 'PUSHDATA4', numBytes: 4 })],\n    [0x4f, pushNumber({ name: 'PUSHM1', value: -1 })],\n  ])\n  .concat(\n    // tslint:disable-next-line: readonly-array\n    _.range(0x51, 0x61).map<[number, OpObject]>((idx) => {\n      const value = idx - 0x50;\n\n      // tslint:disable-next-line no-any\n      return [idx, pushNumber({ name: `PUSH${value}` as any, value })];\n    }),\n  )\n  .concat([\n    [\n      0x61,\n      createOp({\n        name: 'NOP',\n        invoke: ({ context }) => ({ context }),\n      }),\n    ],\n    [0x62, JMP],\n    [0x63, jump({ name: 'JMPIF', checkTrue: true })],\n    [0x64, jump({ name: 'JMPIFNOT', checkTrue: false })],\n    [\n      0x65,\n      createOp({\n        name: 'CALL',\n        invocation: 1,\n        invoke: async ({ context }) => {\n          const { pc } = context;\n          // High level:\n          // Execute JMP in place of current op codes pc using same context\n          // Continue running after JMP until done\n          // Set current pc to pc + 2\n          const { op } = JMP;\n          const { context: startContext } = await op.invoke({\n            context: {\n              ...context,\n              callingScriptHash: context.scriptHash,\n            },\n            args: [],\n            argsAlt: [],\n          });\n\n          const resultContext = await context.engine.run({\n            context: {\n              ...startContext,\n              depth: context.depth + 1,\n            },\n          });\n\n          return {\n            context: {\n              ...resultContext,\n              callingScriptHash: context.callingScriptHash,\n              pc: pc + 2,\n              state: resultContext.state === VMState.Fault ? VMState.Fault : VMState.None,\n              depth: context.depth,\n            },\n          };\n        },\n      }),\n    ],\n    [\n      0x66,\n      createOp({\n        name: 'RET',\n        invoke: ({ context }) => ({\n          context: { ...context, state: VMState.Halt },\n        }),\n      }),\n    ],\n    [0x67, call({ name: 'APPCALL' })],\n    [\n      0x68,\n      {\n        type: 'create',\n        create: ({ context }) => {\n          const sysCall = lookupSysCall({ context });\n\n          return {\n            op: {\n              name: 'SYSCALL',\n              in: sysCall.in,\n              inAlt: sysCall.inAlt,\n              out: sysCall.out,\n              outAlt: sysCall.outAlt,\n              invocation: sysCall.invocation,\n              fee: sysCall.fee,\n              invoke: sysCall.invoke,\n            },\n            context: sysCall.context,\n          };\n        },\n      },\n    ],\n    [0x69, call({ name: 'TAILCALL', tailCall: true })],\n    [\n      0x6a,\n      createOp({\n        name: 'DUPFROMALTSTACK',\n        inAlt: 1,\n        out: 1,\n        outAlt: 1,\n        invoke: ({ context, argsAlt }) => ({\n          context,\n          results: [argsAlt[0]],\n          resultsAlt: [argsAlt[0]],\n        }),\n      }),\n    ],\n    [\n      0x6b,\n      createOp({\n        name: 'TOALTSTACK',\n        in: 1,\n        outAlt: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          resultsAlt: [args[0]],\n        }),\n      }),\n    ],\n    [\n      0x6c,\n      createOp({\n        name: 'FROMALTSTACK',\n        inAlt: 1,\n        out: 1,\n        invoke: ({ context, argsAlt }) => ({\n          context,\n          results: [argsAlt[0]],\n        }),\n      }),\n    ],\n    [\n      0x6d,\n      createOp({\n        name: 'XDROP',\n        in: 1,\n        invoke: ({ context, args }) => {\n          const n = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (n < 0) {\n            throw new XDropNegativeError(context);\n          }\n\n          const { stack } = context;\n\n          if (n >= stack.length) {\n            throw new XDropUnderflowError(context);\n          }\n\n          return {\n            context: {\n              ...context,\n              stack: stack.slice(0, n).concat(stack.slice(n + 1)),\n              stackCount: context.stackCount + stack[n].decrement(),\n            },\n          };\n        },\n      }),\n    ],\n    [\n      0x72,\n      createOp({\n        name: 'XSWAP',\n        in: 1,\n        invoke: ({ context, args }) => {\n          const n = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (n < 0) {\n            throw new XSwapNegativeError(context);\n          }\n\n          const mutableStack = [...context.stack];\n          mutableStack[n] = context.stack[0];\n          mutableStack[0] = context.stack[n];\n\n          return { context: { ...context, stack: mutableStack } };\n        },\n      }),\n    ],\n    [\n      0x73,\n      createOp({\n        name: 'XTUCK',\n        in: 1,\n        invoke: ({ context, args }) => {\n          const n = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (n <= 0) {\n            throw new XTuckNegativeError(context);\n          }\n\n          const { stack } = context;\n\n          return {\n            context: {\n              ...context,\n              stack: stack\n                .slice(0, n)\n                .concat([stack[0]])\n                .concat(stack.slice(n)),\n              stackCount: context.stackCount + stack[0].increment(),\n            },\n          };\n        },\n      }),\n    ],\n    [\n      0x74,\n      createOp({\n        name: 'DEPTH',\n        out: 1,\n        invoke: ({ context }) => ({\n          context,\n          results: [new IntegerStackItem(new BN(context.stack.length))],\n        }),\n      }),\n    ],\n    [\n      0x75,\n      createOp({\n        name: 'DROP',\n        in: 1,\n        invoke: ({ context }) => ({ context }),\n      }),\n    ],\n    [\n      0x76,\n      createOp({\n        name: 'DUP',\n        in: 1,\n        out: 2,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [args[0], args[0]],\n        }),\n      }),\n    ],\n    [\n      0x77,\n      createOp({\n        name: 'NIP',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [args[0]],\n        }),\n      }),\n    ],\n    [\n      0x78,\n      createOp({\n        name: 'OVER',\n        in: 2,\n        out: 3,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [args[1], args[0], args[1]],\n        }),\n      }),\n    ],\n    [\n      0x79,\n      createOp({\n        name: 'PICK',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const n = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (n < 0) {\n            throw new PickNegativeError(context);\n          }\n          if (n >= context.stack.length) {\n            throw new StackUnderflowError(context, 'PICK', context.stack.length, n + 1);\n          }\n\n          return { context, results: [context.stack[n]] };\n        },\n      }),\n    ],\n    [\n      0x7a,\n      createOp({\n        name: 'ROLL',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const n = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (n < 0) {\n            throw new RollNegativeError(context);\n          }\n          if (n >= context.stack.length) {\n            throw new StackUnderflowError(context, 'ROLL', context.stack.length, n + 1);\n          }\n\n          const { stack } = context;\n\n          return {\n            context: {\n              ...context,\n              stack: stack.slice(0, n).concat(stack.slice(n + 1)),\n              stackCount: context.stackCount + stack[n].decrement(),\n            },\n            results: [context.stack[n]],\n          };\n        },\n      }),\n    ],\n    [\n      0x7b,\n      createOp({\n        name: 'ROT',\n        in: 3,\n        out: 3,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [args[1], args[0], args[2]],\n        }),\n      }),\n    ],\n    [\n      0x7c,\n      createOp({\n        name: 'SWAP',\n        in: 2,\n        out: 2,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [args[0], args[1]],\n        }),\n      }),\n    ],\n    [\n      0x7d,\n      createOp({\n        name: 'TUCK',\n        in: 2,\n        out: 3,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [args[0], args[1], args[0]],\n        }),\n      }),\n    ],\n    [\n      0x7e,\n      createOp({\n        name: 'CAT',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const result = Buffer.concat([args[1].asBuffer(), args[0].asBuffer()]);\n          if (result.length > MAX_ITEM_SIZE) {\n            throw new ItemTooLargeError(context);\n          }\n\n          return {\n            context,\n            results: [new BufferStackItem(result)],\n          };\n        },\n      }),\n    ],\n    [\n      0x7f,\n      createOp({\n        name: 'SUBSTR',\n        in: 3,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const end = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (end < 0) {\n            throw new SubstrNegativeEndError(context);\n          }\n\n          const start = vmUtils.toNumber(context, args[1].asBigIntegerUnsafe());\n          if (start < 0) {\n            throw new SubstrNegativeStartError(context);\n          }\n\n          return {\n            context,\n            results: [new BufferStackItem(args[2].asBuffer().slice(start, start + end))],\n          };\n        },\n      }),\n    ],\n    [\n      0x80,\n      createOp({\n        name: 'LEFT',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const count = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (count < 0) {\n            throw new LeftNegativeError(context);\n          }\n\n          return {\n            context,\n            results: [new BufferStackItem(args[1].asBuffer().slice(0, count))],\n          };\n        },\n      }),\n    ],\n    [\n      0x81,\n      createOp({\n        name: 'RIGHT',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const count = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n          if (count < 0) {\n            throw new RightNegativeError(context);\n          }\n\n          const value = args[1].asBuffer();\n          if (value.length < count) {\n            throw new RightLengthError(context);\n          }\n\n          return {\n            context,\n            results: [new BufferStackItem(value.slice(value.length - count, value.length))],\n          };\n        },\n      }),\n    ],\n    [\n      0x82,\n      createOp({\n        name: 'SIZE',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(new BN(args[0].asBuffer().length))],\n        }),\n      }),\n    ],\n    [\n      0x83,\n      createOp({\n        name: 'INVERT',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              utils.fromSignedBuffer(bitwise.buffer.not(utils.toSignedBuffer(args[0].asBigIntegerUnsafe()))),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x84,\n      createOp({\n        name: 'AND',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              vmUtils.bitwiseOp(bitwise.buffer.and, args[0].asBigIntegerUnsafe(), args[1].asBigIntegerUnsafe()),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x85,\n      createOp({\n        name: 'OR',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              vmUtils.bitwiseOp(bitwise.buffer.or, args[0].asBigIntegerUnsafe(), args[1].asBigIntegerUnsafe()),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x86,\n      createOp({\n        name: 'XOR',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              vmUtils.bitwiseOp(bitwise.buffer.xor, args[0].asBigIntegerUnsafe(), args[1].asBigIntegerUnsafe()),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x87,\n      createOp({\n        name: 'EQUAL',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[0].equals(args[1]))],\n        }),\n      }),\n    ],\n    // [0x88, createOp({\n    //   name: 'OP_EQUALVERIFY',\n    //   invoke: ({ context }: OpInvokeArgs) => ({ context }),\n    // })],\n    // [0x89, createOp({\n    //   name: 'OP_RESERVED1',\n    //   invoke: ({ context }: OpInvokeArgs) => ({ context }),\n    // })],\n    // [0x8A, createOp({\n    //   name: 'OP_RESERVED2',\n    //   invoke: ({ context }: OpInvokeArgs) => ({ context }),\n    // })],\n    [\n      0x8b,\n      createOp({\n        name: 'INC',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(args[0].asBigInteger(context.blockchain.currentBlockIndex).add(utils.ONE))],\n        }),\n      }),\n    ],\n    [\n      0x8c,\n      createOp({\n        name: 'DEC',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(args[0].asBigInteger(context.blockchain.currentBlockIndex).sub(utils.ONE))],\n        }),\n      }),\n    ],\n    [\n      0x8d,\n      createOp({\n        name: 'SIGN',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const value = args[0].asBigIntegerUnsafe();\n          const mutableResults = [];\n          if (value.isZero()) {\n            mutableResults.push(new IntegerStackItem(utils.ZERO));\n          } else if (value.isNeg()) {\n            mutableResults.push(new IntegerStackItem(utils.NEGATIVE_ONE));\n          } else {\n            mutableResults.push(new IntegerStackItem(utils.ONE));\n          }\n\n          return { context, results: mutableResults };\n        },\n      }),\n    ],\n    [\n      0x8f,\n      createOp({\n        name: 'NEGATE',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(args[0].asBigIntegerUnsafe().neg())],\n        }),\n      }),\n    ],\n    [\n      0x90,\n      createOp({\n        name: 'ABS',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(args[0].asBigIntegerUnsafe().abs())],\n        }),\n      }),\n    ],\n    [\n      0x91,\n      createOp({\n        name: 'NOT',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(!args[0].asBoolean())],\n        }),\n      }),\n    ],\n    [\n      0x92,\n      createOp({\n        name: 'NZ',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(!args[0].asBigIntegerUnsafe().isZero())],\n        }),\n      }),\n    ],\n    [\n      0x93,\n      createOp({\n        name: 'ADD',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              args[1]\n                .asBigInteger(context.blockchain.currentBlockIndex)\n                .add(args[0].asBigInteger(context.blockchain.currentBlockIndex)),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x94,\n      createOp({\n        name: 'SUB',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              args[1]\n                .asBigInteger(context.blockchain.currentBlockIndex)\n                .sub(args[0].asBigInteger(context.blockchain.currentBlockIndex)),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x95,\n      createOp({\n        name: 'MUL',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              args[1]\n                .asBigInteger(context.blockchain.currentBlockIndex)\n                .mul(args[0].asBigInteger(context.blockchain.currentBlockIndex)),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x96,\n      createOp({\n        name: 'DIV',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              args[1]\n                .asBigInteger(context.blockchain.currentBlockIndex)\n                .div(args[0].asBigInteger(context.blockchain.currentBlockIndex)),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x97,\n      createOp({\n        name: 'MOD',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new IntegerStackItem(\n              args[1]\n                .asBigInteger(context.blockchain.currentBlockIndex)\n                .mod(args[0].asBigInteger(context.blockchain.currentBlockIndex)),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0x98,\n      createOp({\n        name: 'SHL',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const shift = args[0].asBigIntegerUnsafe();\n          if (shift.toNumber() > MAX_SHL_SHR || shift.toNumber() < MIN_SHL_SHR) {\n            throw new ShiftTooLargeError(context);\n          }\n\n          const value = args[1].asBigIntegerUnsafe();\n          const result = new IntegerStackItem(vmUtils.shiftLeft(value, shift));\n\n          return {\n            context,\n            results: [result],\n          };\n        },\n      }),\n    ],\n    [\n      0x99,\n      createOp({\n        name: 'SHR',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const shift = args[0].asBigIntegerUnsafe();\n          if (shift.toNumber() > MAX_SHL_SHR || shift.toNumber() < MIN_SHL_SHR) {\n            throw new ShiftTooLargeError(context);\n          }\n\n          const value = args[1].asBigIntegerUnsafe();\n          const result = new IntegerStackItem(vmUtils.shiftRight(value, shift));\n\n          return {\n            context,\n            results: [result],\n          };\n        },\n      }),\n    ],\n    [\n      0x9a,\n      createOp({\n        name: 'BOOLAND',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[0].asBoolean() && args[1].asBoolean())],\n        }),\n      }),\n    ],\n    [\n      0x9b,\n      createOp({\n        name: 'BOOLOR',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[0].asBoolean() || args[1].asBoolean())],\n        }),\n      }),\n    ],\n    [\n      0x9c,\n      createOp({\n        name: 'NUMEQUAL',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[0].asBigIntegerUnsafe().eq(args[1].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0x9e,\n      createOp({\n        name: 'NUMNOTEQUAL',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(!args[0].asBigIntegerUnsafe().eq(args[1].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0x9f,\n      createOp({\n        name: 'LT',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[1].asBigIntegerUnsafe().lt(args[0].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0xa0,\n      createOp({\n        name: 'GT',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[1].asBigIntegerUnsafe().gt(args[0].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0xa1,\n      createOp({\n        name: 'LTE',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[1].asBigIntegerUnsafe().lte(args[0].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0xa2,\n      createOp({\n        name: 'GTE',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BooleanStackItem(args[1].asBigIntegerUnsafe().gte(args[0].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0xa3,\n      createOp({\n        name: 'MIN',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(BN.min(args[1].asBigIntegerUnsafe(), args[0].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0xa4,\n      createOp({\n        name: 'MAX',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(BN.max(args[1].asBigIntegerUnsafe(), args[0].asBigIntegerUnsafe()))],\n        }),\n      }),\n    ],\n    [\n      0xa5,\n      createOp({\n        name: 'WITHIN',\n        in: 3,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [\n            new BooleanStackItem(\n              args[1].asBigIntegerUnsafe().lte(args[2].asBigIntegerUnsafe()) &&\n                args[2].asBigIntegerUnsafe().lt(args[0].asBigIntegerUnsafe()),\n            ),\n          ],\n        }),\n      }),\n    ],\n    [\n      0xa7,\n      createOp({\n        name: 'SHA1',\n        in: 1,\n        out: 1,\n        fee: FEES.TEN,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BufferStackItem(crypto.sha1(args[0].asBuffer()))],\n        }),\n      }),\n    ],\n    [\n      0xa8,\n      createOp({\n        name: 'SHA256',\n        in: 1,\n        out: 1,\n        fee: FEES.TEN,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new BufferStackItem(crypto.sha256(args[0].asBuffer()))],\n        }),\n      }),\n    ],\n    [\n      0xa9,\n      createOp({\n        name: 'HASH160',\n        in: 1,\n        out: 1,\n        fee: FEES.TWENTY,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new UInt160StackItem(crypto.hash160(args[0].asBuffer()))],\n        }),\n      }),\n    ],\n    [\n      0xaa,\n      createOp({\n        name: 'HASH256',\n        in: 1,\n        out: 1,\n        fee: FEES.TWENTY,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new UInt256StackItem(crypto.hash256(args[0].asBuffer()))],\n        }),\n      }),\n    ],\n    [\n      0xac,\n      createOp({\n        name: 'CHECKSIG',\n        in: 2,\n        out: 1,\n        fee: FEES.ONE_HUNDRED,\n        invoke: async ({ context, args }) => {\n          const publicKey = args[0].asECPoint();\n          const signature = args[1].asBuffer();\n          let result;\n          try {\n            result = await crypto.verify({\n              message: context.init.scriptContainer.value.message,\n              signature,\n              publicKey,\n            });\n          } catch {\n            result = false;\n          }\n\n          return {\n            context,\n            results: [new BooleanStackItem(result)],\n          };\n        },\n      }),\n    ],\n    [\n      0xad,\n      createOp({\n        name: 'VERIFY',\n        in: 3,\n        out: 1,\n        fee: FEES.ONE_HUNDRED,\n        invoke: async ({ context, args }) => {\n          const publicKey = args[0].asECPoint();\n          const signature = args[1].asBuffer();\n          const message = args[2].asBuffer();\n          let result;\n          try {\n            result = await crypto.verify({\n              message,\n              signature,\n              publicKey,\n            });\n          } catch {\n            result = false;\n          }\n\n          return {\n            context,\n            results: [new BooleanStackItem(result)],\n          };\n        },\n      }),\n    ],\n    [\n      0xae,\n      {\n        type: 'create',\n        create: ({ context: contextIn }) => {\n          const { stack } = contextIn;\n          const top = stack[0] as StackItem | undefined;\n          let pubKeyCount = 0;\n          let _in;\n          if (top === undefined || top.isArray()) {\n            if (top !== undefined) {\n              pubKeyCount = top.asArray().length;\n            }\n            _in = 1;\n          } else {\n            pubKeyCount = vmUtils.toNumber(contextIn, top.asBigIntegerUnsafe());\n            if (pubKeyCount <= 0) {\n              throw new InvalidCheckMultisigArgumentsError(contextIn);\n            }\n            _in = pubKeyCount + 1;\n          }\n\n          const next = stack[_in] as StackItem | undefined;\n          if (next === undefined || next.isArray()) {\n            _in += 1;\n          } else {\n            const sigCount = vmUtils.toNumber(contextIn, next.asBigIntegerUnsafe());\n            if (sigCount < 0) {\n              throw new InvalidCheckMultisigArgumentsError(contextIn);\n            }\n            _in += sigCount + 1;\n          }\n\n          const { op } = createOp({\n            name: 'CHECKMULTISIG',\n            in: _in,\n            out: 1,\n            fee: pubKeyCount === 0 ? FEES.ONE : FEES.ONE_HUNDRED.mul(new BN(pubKeyCount)),\n            invoke: ({ context, args }) => {\n              let index;\n              let publicKeys;\n              if (args[0].isArray()) {\n                index = 1;\n                publicKeys = args[0].asArray().map((value) => value.asECPoint());\n              } else {\n                const count = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n                index = count + 1;\n                publicKeys = args.slice(1, index).map((value) => value.asECPoint());\n              }\n\n              const signatures = args[index].isArray()\n                ? args[index].asArray().map((value) => value.asBuffer())\n                : args.slice(index + 1).map((value) => value.asBuffer());\n\n              if (publicKeys.length === 0 || signatures.length === 0 || signatures.length > publicKeys.length) {\n                throw new InvalidCheckMultisigArgumentsError(context);\n              }\n\n              let result = true;\n              const n = publicKeys.length;\n              const m = signatures.length;\n              try {\n                // tslint:disable-next-line no-loop-statement\n                for (let i = 0, j = 0; result && i < m && j < n; ) {\n                  const currentResult = crypto.verify({\n                    message: context.init.scriptContainer.value.message,\n                    signature: signatures[i],\n                    publicKey: publicKeys[j],\n                  });\n\n                  if (currentResult) {\n                    i += 1;\n                  }\n                  j += 1;\n                  if (m - i > n - j) {\n                    result = false;\n                  }\n                }\n              } catch {\n                result = false;\n              }\n\n              return {\n                context,\n                results: [new BooleanStackItem(result)],\n              };\n            },\n          });\n\n          return { op, context: contextIn };\n        },\n      },\n    ],\n    [\n      0xc0,\n      createOp({\n        name: 'ARRAYSIZE',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => ({\n          context,\n          results: [new IntegerStackItem(new BN(args[0].size))],\n        }),\n      }),\n    ],\n    [\n      0xc1,\n      {\n        type: 'create',\n        create: ({ context: contextIn }) => {\n          const { stack } = contextIn;\n          const top = stack[0] as StackItem | undefined;\n          let _in;\n          if (top === undefined) {\n            // This will cause the op to throw once it's executed.\n            _in = 1;\n          } else {\n            _in = vmUtils.toNumber(contextIn, top.asBigIntegerUnsafe()) + 1;\n\n            if (_in < 0) {\n              throw new InvalidPackCountError(contextIn);\n            }\n\n            if (_in > MAX_ARRAY_SIZE) {\n              throw new ContainerTooLargeError(contextIn);\n            }\n          }\n\n          const { op } = createOp({\n            name: 'PACK',\n            in: _in,\n            out: 1,\n            invoke: ({ context, args }) => ({\n              context,\n              results: [new ArrayStackItem(args.slice(1))],\n            }),\n          });\n\n          return { op, context: contextIn };\n        },\n      },\n    ],\n    [\n      0xc2,\n      {\n        type: 'create',\n        create: ({ context: contextIn }) => {\n          const { stack } = contextIn;\n          const top = stack[0] as StackItem | undefined;\n          const out = top === undefined ? 1 : top.asArray().length + 1;\n          const { op } = createOp({\n            name: 'UNPACK',\n            in: 1,\n            out,\n            invoke: ({ context, args }) => {\n              const arr = args[0].asArray();\n              const mutableResults = [];\n              // tslint:disable-next-line no-loop-statement\n              for (let i = arr.length - 1; i >= 0; i -= 1) {\n                mutableResults.push(arr[i]);\n              }\n              mutableResults.push(new IntegerStackItem(new BN(arr.length)));\n\n              return { context, results: mutableResults };\n            },\n          });\n\n          return { op, context: contextIn };\n        },\n      },\n    ],\n    [\n      0xc3,\n      createOp({\n        name: 'PICKITEM',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => {\n          if (args[1].isArray()) {\n            const index = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n            const val = args[1].asArray();\n            if (index < 0 || index >= val.length) {\n              throw new InvalidPickItemKeyError(context, `${index}`, JSON.stringify(args[1].convertJSON()));\n            }\n\n            const arrayValue = val[index];\n\n            return {\n              context,\n              results: [arrayValue],\n            };\n          }\n\n          const key = args[0];\n          const value = args[1].asMapStackItem();\n          if (!value.has(key)) {\n            throw new InvalidPickItemKeyError(context, key.toStructuralKey(), JSON.stringify(args[1].convertJSON()));\n          }\n\n          const mapValue = value.get(key);\n\n          return {\n            context,\n            results: [mapValue],\n          };\n        },\n      }),\n    ],\n    [\n      0xc4,\n      createOp({\n        name: 'SETITEM',\n        in: 3,\n        invoke: ({ context, args }) => {\n          let newItem = args[0];\n          if (newItem instanceof StructStackItem) {\n            newItem = newItem.clone();\n          }\n          if (args[2].isArray()) {\n            const index = vmUtils.toNumber(context, args[1].asBigIntegerUnsafe());\n            const mutableValue = args[2].asArray();\n            if (index < 0 || index >= mutableValue.length) {\n              throw new InvalidSetItemIndexError(context);\n            }\n\n            const existing = mutableValue[index];\n            mutableValue[index] = newItem;\n            const innerSeen = new Set([args[2]]);\n\n            return {\n              context: {\n                ...context,\n                stackCount:\n                  context.stackCount +\n                  (args[2].referenceCount > 0 ? existing.decrement(innerSeen) + newItem.increment(innerSeen) : 0),\n              },\n            };\n          }\n\n          const key = args[1];\n          const value = args[2].asMapStackItem();\n          const existingValue = value.has(key) ? value.get(key) : undefined;\n          value.set(key, newItem);\n\n          if (value.size > MAX_ARRAY_SIZE) {\n            throw new ContainerTooLargeError(context);\n          }\n          const seen = new Set([args[2]]);\n\n          return {\n            context: {\n              ...context,\n              stackCount:\n                context.stackCount +\n                (args[2].referenceCount > 0\n                  ? (existingValue === undefined ? key.increment(seen) : existingValue.decrement()) +\n                    newItem.increment(seen)\n                  : 0),\n            },\n          };\n        },\n      }),\n    ],\n    [0xc5, newArrayOrStruct({ name: 'NEWARRAY' })],\n    [0xc6, newArrayOrStruct({ name: 'NEWSTRUCT' })],\n    [\n      0xc7,\n      createOp({\n        name: 'NEWMAP',\n        out: 1,\n        invoke: ({ context }) => ({\n          context,\n          results: [new MapStackItem()],\n        }),\n      }),\n    ],\n    [\n      0xc8,\n      createOp({\n        name: 'APPEND',\n        in: 2,\n        invoke: ({ context, args }) => {\n          let newItem = args[0];\n          if (newItem instanceof StructStackItem) {\n            newItem = newItem.clone();\n          }\n          const mutableValue = args[1].asArray();\n          mutableValue.push(newItem);\n\n          if (mutableValue.length > MAX_ARRAY_SIZE) {\n            throw new ContainerTooLargeError(context);\n          }\n\n          return {\n            context: {\n              ...context,\n              stackCount: context.stackCount + (args[1].referenceCount > 0 ? newItem.increment(new Set([args[1]])) : 0),\n            },\n          };\n        },\n      }),\n    ],\n    [\n      0xc9,\n      createOp({\n        name: 'REVERSE',\n        in: 1,\n        invoke: ({ context, args }) => {\n          const mutableValue = args[0].asArray();\n          mutableValue.reverse();\n\n          return { context };\n        },\n      }),\n    ],\n    [\n      0xca,\n      createOp({\n        name: 'REMOVE',\n        in: 2,\n        invoke: ({ context, args }) => {\n          if (args[1].isArray()) {\n            const index = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n            const mutableValue = args[1].asArray();\n            if (index < 0 || index >= mutableValue.length) {\n              throw new InvalidRemoveIndexError(context, index);\n            }\n            const existing = mutableValue[index];\n            mutableValue.splice(index, 1);\n\n            return {\n              context: {\n                ...context,\n                stackCount:\n                  context.stackCount + (existing.referenceCount > 0 ? existing.decrement(new Set([args[1]])) : 0),\n              },\n            };\n          }\n\n          const key = args[0];\n          const value = args[1].asMapStackItem();\n          if (value.has(key)) {\n            const val = value.get(key);\n            value.delete(key);\n\n            const seen = new Set([args[1]]);\n\n            return {\n              context: {\n                ...context,\n                stackCount:\n                  context.stackCount +\n                  (key.referenceCount > 0 ? key.decrement(seen) : 0) +\n                  (val.referenceCount > 0 ? val.decrement(seen) : 0),\n              },\n            };\n          }\n\n          return { context };\n        },\n      }),\n    ],\n    [\n      0xcb,\n      createOp({\n        name: 'HASKEY',\n        in: 2,\n        out: 1,\n        invoke: ({ context, args }) => {\n          if (args[1].isArray()) {\n            const index = vmUtils.toNumber(context, args[0].asBigIntegerUnsafe());\n            const val = args[1].asArray();\n            if (index < 0) {\n              throw new InvalidHasKeyIndexError(context);\n            }\n\n            return {\n              context,\n              results: [new BooleanStackItem(index < val.length)],\n            };\n          }\n\n          const key = args[0];\n          const value = args[1].asMapStackItem();\n\n          return {\n            context,\n            results: [new BooleanStackItem(value.has(key))],\n          };\n        },\n      }),\n    ],\n    [\n      0xcc,\n      createOp({\n        name: 'KEYS',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const value = args[0].asMapStackItem();\n\n          return { context, results: [value.keys()] };\n        },\n      }),\n    ],\n    [\n      0xcd,\n      createOp({\n        name: 'VALUES',\n        in: 1,\n        out: 1,\n        invoke: ({ context, args }) => {\n          const values = args[0].isArray() ? args[0].asArray() : args[0].asMapStackItem().valuesArray();\n\n          const newValues = values.map((value) => (value instanceof StructStackItem ? value.clone() : value));\n\n          return { context, results: [new ArrayStackItem(newValues)] };\n        },\n      }),\n    ],\n    [0xe0, functionCallIsolated({ name: 'CALL_I' })],\n    [0xe1, callIsolated({ name: 'CALL_E' })],\n    [0xe2, callIsolated({ name: 'CALL_ED', dynamicCall: true })],\n    [0xe3, callIsolated({ name: 'CALL_ET', tailCall: true })],\n    [0xe4, callIsolated({ name: 'CALL_EDT', tailCall: true, dynamicCall: true })],\n    [\n      0xf0,\n      createOp({\n        name: 'THROW',\n        invoke: ({ context }) => {\n          throw new ThrowError(context);\n        },\n      }),\n    ],\n    [\n      0xf1,\n      createOp({\n        name: 'THROWIFNOT',\n        in: 1,\n        invoke: ({ context, args }) => {\n          if (!args[0].asBoolean()) {\n            throw new ThrowError(context);\n          }\n\n          return { context };\n        },\n      }),\n    ],\n  ]);\n\nexport const OPCODES = _.fromPairs(OPCODE_PAIRS) as { readonly [Byte in number]?: OpObject };\n// tslint:disable-next-line: readonly-array\nconst STATIC_OPCODES = _.fromPairs(OPCODE_PAIRS.filter((value): value is [number, OpStatic] => value[1].type === 'op'));\nconst CREATE_OPCODES = _.fromPairs(\n  // tslint:disable-next-line: readonly-array\n  OPCODE_PAIRS.filter((value): value is [number, OpCreate] => value[1].type === 'create'),\n);\n\nexport const lookupOp = ({ context }: { readonly context: ExecutionContext }) => {\n  const opCode = context.code[context.pc];\n  const op = STATIC_OPCODES[opCode] as OpStatic | undefined;\n  const newContext = {\n    ...context,\n    pc: context.pc + 1,\n  };\n  if (op !== undefined) {\n    return { op: op.op, context: newContext };\n  }\n\n  const create = CREATE_OPCODES[opCode] as OpCreate | undefined;\n  if (create === undefined) {\n    throw new UnknownOpError(context, `${opCode}`);\n  }\n\n  return create.create({ context: newContext });\n};\n","/// <reference types=\"@reactivex/ix-es2015-cjs\" />\nimport {\n  assertContractParameterType,\n  assertStorageFlags,\n  assertSysCall,\n  common,\n  crypto,\n  ECPoint,\n  hasStorageFlag,\n  isContractParameterType,\n  SysCall as SysCallEnum,\n  SysCallHash,\n  SysCallName,\n  toSysCallHash,\n  UInt160,\n  UInt256,\n} from '@neo-one/client-common';\nimport { assertContractPropertyState, HasDynamicInvoke, HasStorage } from '@neo-one/client-full-common';\nimport {\n  Account,\n  assertAssetType,\n  Asset,\n  AssetType,\n  BinaryReader,\n  Contract,\n  InvocationTransaction,\n  ScriptContainerType,\n  StorageFlags,\n  StorageItem,\n  TransactionType,\n  TriggerType,\n  utils,\n  Validator,\n  Witness,\n} from '@neo-one/node-core';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport { AsyncIterableX } from '@reactivex/ix-es2015-cjs/asynciterable/asynciterablex';\nimport { map as asyncMap } from '@reactivex/ix-es2015-cjs/asynciterable/pipe/map';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport { defer } from 'rxjs';\nimport { concatMap, map, toArray } from 'rxjs/operators';\nimport {\n  BLOCK_HEIGHT_YEAR,\n  ExecutionContext,\n  FEES,\n  MAX_ARRAY_SIZE,\n  MAX_ITEM_SIZE,\n  OpInvoke,\n  OpInvokeArgs,\n  SysCall,\n} from './constants';\nimport {\n  AccountFrozenError,\n  BadWitnessCheckError,\n  ConstantStorageError,\n  ContainerTooLargeError,\n  ContractNoStorageError,\n  InvalidAssetTypeError,\n  InvalidContractGetStorageContextError,\n  InvalidGetBlockArgumentsError,\n  InvalidGetHeaderArgumentsError,\n  InvalidIndexError,\n  InvalidInvocationTransactionError,\n  InvalidVerifySyscallError,\n  ItemTooLargeError,\n  NotEligibleVoteError,\n  StackUnderflowError,\n  UnexpectedScriptContainerError,\n  UnknownSysCallError,\n} from './errors';\nimport {\n  AccountStackItem,\n  ArrayStackItem,\n  AssetStackItem,\n  AttributeStackItem,\n  BlockStackItem,\n  BooleanStackItem,\n  BufferStackItem,\n  ConsensusPayloadStackItem,\n  ContractStackItem,\n  deserializeStackItem,\n  ECPointStackItem,\n  EnumeratorStackItem,\n  HeaderStackItem,\n  InputStackItem,\n  IntegerStackItem,\n  IteratorStackItem,\n  OutputStackItem,\n  StackItem,\n  StackItemEnumerator,\n  StackItemIterator,\n  StorageContextStackItem,\n  TransactionStackItem,\n  UInt160StackItem,\n  UInt256StackItem,\n  ValidatorStackItem,\n  WitnessStackItem,\n} from './stackItem';\nimport { vmUtils } from './vmUtils';\n\nexport interface CreateSysCallArgs {\n  readonly context: ExecutionContext;\n}\nexport type CreateSysCall = (input: CreateSysCallArgs) => SysCall;\n\nexport const createSysCall = ({\n  name,\n  in: _in = 0,\n  inAlt = 0,\n  out = 0,\n  outAlt = 0,\n  invocation = 0,\n  fee = FEES.ONE,\n  invoke,\n}: {\n  readonly name: SysCallName;\n  readonly in?: number;\n  readonly inAlt?: number;\n  readonly out?: number;\n  readonly outAlt?: number;\n  readonly invocation?: number;\n  readonly fee?: BN;\n  readonly invoke: OpInvoke;\n}): CreateSysCall => ({ context }) => ({\n  context,\n  name,\n  in: _in,\n  inAlt,\n  out,\n  outAlt,\n  invocation,\n  fee,\n  invoke,\n});\n\nconst getHashOrIndex = ({\n  context,\n  arg,\n}: {\n  readonly context: ExecutionContext;\n  readonly arg: StackItem;\n}): UInt256 | number | undefined => {\n  const buffer = arg.asBuffer();\n  let hashOrIndex;\n  if (buffer.length === 32) {\n    hashOrIndex = arg.asUInt256();\n  } else if (buffer.length <= 5) {\n    hashOrIndex = arg.asBigInteger(context.blockchain.currentBlockIndex).toNumber();\n  }\n\n  return hashOrIndex;\n};\n\nfunction getIndex<T>(context: ExecutionContext, index: number, values: readonly T[]): T {\n  if (index < 0 || index >= values.length) {\n    throw new InvalidIndexError(context);\n  }\n\n  return values[index];\n}\n\nconst checkWitness = async ({ context, hash }: { readonly context: ExecutionContext; readonly hash: UInt160 }) => {\n  const { scriptContainer, skipWitnessVerify } = context.init;\n  if (skipWitnessVerify) {\n    return true;\n  }\n\n  let scriptHashesForVerifying;\n  switch (scriptContainer.type) {\n    case ScriptContainerType.Transaction:\n      scriptHashesForVerifying = await scriptContainer.value.getScriptHashesForVerifying({\n        getOutput: context.blockchain.output.get,\n        getAsset: context.blockchain.asset.get,\n      });\n\n      break;\n    case ScriptContainerType.Block:\n      scriptHashesForVerifying = await scriptContainer.value.getScriptHashesForVerifying({\n        getHeader: context.blockchain.header.get,\n      });\n\n      break;\n    case ScriptContainerType.Consensus:\n      scriptHashesForVerifying = await scriptContainer.value.getScriptHashesForVerifying({\n        getValidators: async () => context.blockchain.getValidators([]),\n        currentBlockHash: context.blockchain.currentBlock.hash,\n      });\n\n      break;\n    default:\n      commonUtils.assertNever(scriptContainer);\n      throw new Error('For TS');\n  }\n\n  return scriptHashesForVerifying.has(common.uInt160ToHex(hash));\n};\n\nconst checkWitnessPublicKey = async ({\n  context,\n  publicKey,\n}: {\n  readonly context: ExecutionContext;\n  readonly publicKey: ECPoint;\n}) =>\n  checkWitness({\n    context,\n    hash: crypto.getVerificationScriptHash(publicKey),\n  });\n\nconst checkWitnessBuffer = async ({\n  context,\n  hashOrPublicKey,\n}: {\n  readonly context: ExecutionContext;\n  readonly hashOrPublicKey: Buffer;\n}) => {\n  if (hashOrPublicKey.length === common.ECPOINT_BUFFER_BYTES) {\n    return checkWitnessPublicKey({\n      context,\n      publicKey: common.bufferToECPoint(hashOrPublicKey),\n    });\n  }\n\n  return checkWitness({\n    context,\n    hash: common.bufferToUInt160(hashOrPublicKey),\n  });\n};\n\nconst createContract = async ({\n  context,\n  args,\n}: {\n  readonly context: ExecutionContext;\n  readonly args: readonly StackItem[];\n}) => {\n  const script = args[0].asBuffer();\n  // Removed check of valid ContractParameterTypes to match neo\n  const parameterList = [...args[1].asBuffer()].filter(isContractParameterType);\n\n  const returnType = assertContractParameterType(args[2].asBigIntegerUnsafe().toNumber());\n\n  const contractProperties = assertContractPropertyState(args[3].asBigIntegerUnsafe().toNumber());\n\n  const name = args[4].asString();\n  const codeVersion = args[5].asString();\n  const author = args[6].asString();\n  const email = args[7].asString();\n  const description = args[8].asString();\n  const hash = crypto.hash160(script);\n  let contract = await context.blockchain.contract.tryGet({ hash });\n  let created = false;\n  if (contract === undefined) {\n    contract = new Contract({\n      script,\n      parameterList,\n\n      returnType,\n      contractProperties,\n      name,\n      codeVersion,\n      author,\n      email,\n      description,\n      hash,\n    });\n\n    await context.blockchain.contract.add(contract);\n    created = true;\n  }\n\n  return { contract, created };\n};\n\nconst checkStorage = async ({ context, hash }: { readonly context: ExecutionContext; readonly hash: UInt160 }) => {\n  const contract = await context.blockchain.contract.get({ hash });\n  if (!contract.hasStorage) {\n    throw new ContractNoStorageError(context, common.uInt160ToString(hash));\n  }\n\n  return contract;\n};\n\nfunction getContractFee<T>(func: (args: CreateSysCallArgs, fee: BN) => T): (args: CreateSysCallArgs) => T {\n  return (args) => {\n    const { context: contextIn } = args;\n    const contractProperties = assertContractPropertyState(contextIn.stack[3].asBigIntegerUnsafe().toNumber());\n\n    let fee = common.ONE_HUNDRED_FIXED8;\n\n    if (HasStorage.has(contractProperties)) {\n      fee = fee.add(common.FOUR_HUNDRED_FIXED8);\n    }\n    if (HasDynamicInvoke.has(contractProperties)) {\n      fee = fee.add(common.FIVE_HUNDRED_FIXED8);\n    }\n\n    return func(args, fee);\n  };\n}\n\nconst destroyContract = async ({ context }: OpInvokeArgs) => {\n  const hash = context.scriptHash;\n  const contract = await context.blockchain.contract.tryGet({ hash });\n  if (contract !== undefined) {\n    await Promise.all([\n      context.blockchain.contract.delete({ hash }),\n      contract.hasStorage\n        ? context.blockchain.storageItem\n            .getAll$({ hash })\n            .pipe(\n              concatMap((item) =>\n                defer(async () =>\n                  context.blockchain.storageItem.delete({\n                    hash,\n                    key: item.key,\n                  }),\n                ),\n              ),\n            )\n            .toPromise()\n        : Promise.resolve(),\n    ]);\n  }\n};\n\nconst createPut = ({ name }: { readonly name: 'Neo.Storage.Put' | 'Neo.Storage.PutEx' }) => ({\n  context: contextIn,\n}: CreateSysCallArgs) => {\n  const keyIn = contextIn.stack[1] as StackItem | undefined;\n  const valueIn = contextIn.stack[2] as StackItem | undefined;\n  const expectedIn = name === 'Neo.Storage.Put' ? 3 : 4;\n  if (keyIn === undefined || valueIn === undefined) {\n    throw new StackUnderflowError(contextIn, 'SYSCALL', contextIn.stack.length, expectedIn);\n  }\n  const ratio = new BN(keyIn.asBuffer().length)\n    .add(new BN(valueIn.asBuffer().length))\n    .sub(utils.ONE)\n    .div(utils.ONE_THOUSAND_TWENTY_FOUR)\n    .add(utils.ONE);\n\n  return createSysCall({\n    name,\n    in: expectedIn,\n    fee: FEES.ONE_THOUSAND.mul(ratio),\n    invoke: async ({ context, args }) => {\n      if (context.init.triggerType !== TriggerType.Application) {\n        throw new InvalidVerifySyscallError(context, name);\n      }\n      const hash = vmUtils.toStorageContext({\n        context,\n        value: args[0],\n        write: true,\n      }).value;\n      await checkStorage({ context, hash });\n      const key = args[1].asBuffer();\n      if (key.length > 1024) {\n        throw new ItemTooLargeError(context);\n      }\n\n      const value = args[2].asBuffer();\n      const flags =\n        name === 'Neo.Storage.Put' ? StorageFlags.None : assertStorageFlags(args[3].asBigIntegerUnsafe().toNumber());\n      const item = await context.blockchain.storageItem.tryGet({ hash, key });\n      // if (item === undefined) {\n      //   await context.blockchain.storageItem.add(new StorageItem({ hash, key, value, flags }));\n      // } else if (hasStorageFlag(item.flags, StorageFlags.Constant)) {\n      //   throw new ConstantStorageError(context, key);\n      // } else {\n      //   await context.blockchain.storageItem.update(item, { value, flags });\n      // }\n      if (item !== undefined) {\n        if (hasStorageFlag(item.flags, StorageFlags.Constant)) {\n          throw new ConstantStorageError(context, key);\n        }\n        await context.blockchain.storageItem.update(item, { value, flags });\n      } else {\n        await context.blockchain.storageItem.add(new StorageItem({ hash, key, value, flags }));\n      }\n\n      return { context };\n    },\n  })({ context: contextIn });\n};\n\nexport const SYSCALLS: { readonly [K in SysCallEnum]: CreateSysCall } = {\n  'System.Runtime.Platform': createSysCall({\n    name: 'System.Runtime.Platform',\n    out: 1,\n    invoke: ({ context }) => ({\n      context,\n      results: [new BufferStackItem(Buffer.from('NEO', 'ascii'))],\n    }),\n  }),\n  'Neo.Runtime.GetTrigger': createSysCall({\n    name: 'Neo.Runtime.GetTrigger',\n    out: 1,\n    invoke: ({ context }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(context.init.triggerType))],\n    }),\n  }),\n\n  'Neo.Runtime.CheckWitness': createSysCall({\n    name: 'Neo.Runtime.CheckWitness',\n    in: 1,\n    out: 1,\n    fee: FEES.TWO_HUNDRED,\n    invoke: async ({ context, args }) => ({\n      context,\n      results: [\n        new BooleanStackItem(\n          await checkWitnessBuffer({\n            context,\n            hashOrPublicKey: args[0].asBuffer(),\n          }),\n        ),\n      ],\n    }),\n  }),\n\n  'Neo.Runtime.Notify': createSysCall({\n    name: 'Neo.Runtime.Notify',\n    in: 1,\n    invoke: async ({ context, args }) => {\n      const { onNotify } = context.init.listeners;\n      if (onNotify !== undefined) {\n        onNotify({\n          scriptHash: context.scriptHash,\n          args: args[0].isArray()\n            ? args[0].asArray().map((item) => item.toContractParameter())\n            : [args[0].toContractParameter()],\n        });\n      }\n\n      return { context };\n    },\n  }),\n\n  'Neo.Runtime.Log': createSysCall({\n    name: 'Neo.Runtime.Log',\n    in: 1,\n    invoke: async ({ context, args }) => {\n      const { onLog } = context.init.listeners;\n      if (onLog !== undefined) {\n        onLog({\n          scriptHash: context.scriptHash,\n          message: args[0].asString(),\n        });\n      }\n\n      return { context };\n    },\n  }),\n\n  'Neo.Runtime.GetTime': createSysCall({\n    name: 'Neo.Runtime.GetTime',\n    out: 1,\n    invoke: async ({ context }) => {\n      const { persistingBlock } = context.init;\n      const time =\n        persistingBlock === undefined\n          ? context.blockchain.currentBlock.timestamp + context.blockchain.settings.secondsPerBlock\n          : persistingBlock.timestamp;\n\n      return {\n        context,\n        results: [new IntegerStackItem(new BN(time))],\n      };\n    },\n  }),\n\n  'Neo.Runtime.Serialize': createSysCall({\n    name: 'Neo.Runtime.Serialize',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const serialized = args[0].serialize();\n\n      if (serialized.length > MAX_ITEM_SIZE) {\n        throw new ItemTooLargeError(context);\n      }\n\n      return { context, results: [new BufferStackItem(serialized)] };\n    },\n  }),\n\n  'Neo.Runtime.Deserialize': createSysCall({\n    name: 'Neo.Runtime.Deserialize',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const deserialized = deserializeStackItem(args[0].asBuffer());\n\n      return { context, results: [deserialized] };\n    },\n  }),\n\n  'Neo.Blockchain.GetHeight': createSysCall({\n    name: 'Neo.Blockchain.GetHeight',\n    out: 1,\n    invoke: ({ context }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(context.blockchain.currentBlock.index))],\n    }),\n  }),\n\n  'Neo.Blockchain.GetHeader': createSysCall({\n    name: 'Neo.Blockchain.GetHeader',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const hashOrIndex = getHashOrIndex({ context, arg: args[0] });\n      if (hashOrIndex === undefined) {\n        throw new InvalidGetHeaderArgumentsError(context);\n      }\n      const header = await context.blockchain.header.get({ hashOrIndex });\n\n      return {\n        context,\n        results: [new HeaderStackItem(header)],\n      };\n    },\n  }),\n\n  'Neo.Blockchain.GetBlock': createSysCall({\n    name: 'Neo.Blockchain.GetBlock',\n    in: 1,\n    out: 1,\n    fee: FEES.TWO_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const hashOrIndex = getHashOrIndex({\n        context,\n        arg: args[0],\n      });\n\n      if (hashOrIndex === undefined) {\n        throw new InvalidGetBlockArgumentsError(context, args[0].asBufferMaybe());\n      }\n      const block = await context.blockchain.block.get({ hashOrIndex });\n\n      return {\n        context,\n        results: [new BlockStackItem(block)],\n      };\n    },\n  }),\n\n  'Neo.Blockchain.GetTransaction': createSysCall({\n    name: 'Neo.Blockchain.GetTransaction',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const transaction = await context.blockchain.transaction.get({\n        hash: args[0].asUInt256(),\n      });\n\n      return {\n        context,\n        results: [new TransactionStackItem(transaction)],\n      };\n    },\n  }),\n\n  'Neo.Blockchain.GetTransactionHeight': createSysCall({\n    name: 'Neo.Blockchain.GetTransactionHeight',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const transactionData = await context.blockchain.transactionData.get({\n        hash: args[0].asUInt256(),\n      });\n\n      return {\n        context,\n        results: [new IntegerStackItem(new BN(transactionData.startHeight))],\n      };\n    },\n  }),\n\n  'Neo.Blockchain.GetAccount': createSysCall({\n    name: 'Neo.Blockchain.GetAccount',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const hash = args[0].asUInt160();\n      const account = await context.blockchain.account.tryGet({\n        hash,\n      });\n\n      return {\n        context,\n        results: [new AccountStackItem(account === undefined ? new Account({ hash }) : account)],\n      };\n    },\n  }),\n\n  'Neo.Blockchain.GetValidators': createSysCall({\n    name: 'Neo.Blockchain.GetValidators',\n    out: 1,\n    fee: FEES.TWO_HUNDRED,\n    invoke: async ({ context }) => {\n      const validators = await context.blockchain.validator.all$\n        .pipe(\n          map(({ publicKey }) => new ECPointStackItem(publicKey)),\n          toArray(),\n        )\n        .toPromise();\n\n      return {\n        context,\n        results: [new ArrayStackItem(validators)],\n      };\n    },\n  }),\n\n  'Neo.Blockchain.GetAsset': createSysCall({\n    name: 'Neo.Blockchain.GetAsset',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const asset = await context.blockchain.asset.get({\n        hash: args[0].asUInt256(),\n      });\n\n      return {\n        context,\n        results: [new AssetStackItem(asset)],\n      };\n    },\n  }),\n\n  'Neo.Blockchain.GetContract': createSysCall({\n    name: 'Neo.Blockchain.GetContract',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const contract = await context.blockchain.contract.tryGet({\n        hash: args[0].asUInt160(),\n      });\n\n      return {\n        context,\n        results: [contract === undefined ? new BufferStackItem(Buffer.alloc(0, 0)) : new ContractStackItem(contract)],\n      };\n    },\n  }),\n\n  'Neo.Header.GetHash': createSysCall({\n    name: 'Neo.Header.GetHash',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt256StackItem(args[0].asBlockBase().hash)],\n    }),\n  }),\n\n  'Neo.Header.GetVersion': createSysCall({\n    name: 'Neo.Header.GetVersion',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asBlockBase().version))],\n    }),\n  }),\n\n  'Neo.Header.GetPrevHash': createSysCall({\n    name: 'Neo.Header.GetPrevHash',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt256StackItem(args[0].asBlockBase().previousHash)],\n    }),\n  }),\n\n  'Neo.Header.GetIndex': createSysCall({\n    name: 'Neo.Header.GetIndex',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asBlockBase().index))],\n    }),\n  }),\n\n  'Neo.Header.GetMerkleRoot': createSysCall({\n    name: 'Neo.Header.GetMerkleRoot',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt256StackItem(args[0].asBlockBase().merkleRoot)],\n    }),\n  }),\n\n  'Neo.Header.GetTimestamp': createSysCall({\n    name: 'Neo.Header.GetTimestamp',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asBlockBase().timestamp))],\n    }),\n  }),\n\n  'Neo.Header.GetConsensusData': createSysCall({\n    name: 'Neo.Header.GetConsensusData',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(args[0].asBlockBase().consensusData)],\n    }),\n  }),\n\n  'Neo.Header.GetNextConsensus': createSysCall({\n    name: 'Neo.Header.GetNextConsensus',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt160StackItem(args[0].asBlockBase().nextConsensus)],\n    }),\n  }),\n\n  'Neo.Block.GetTransactionCount': createSysCall({\n    name: 'Neo.Block.GetTransactionCount',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asBlock().transactions.length))],\n    }),\n  }),\n\n  'Neo.Block.GetTransactions': createSysCall({\n    name: 'Neo.Block.GetTransactions',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => {\n      if (args[0].asBlock().transactions.length > MAX_ARRAY_SIZE) {\n        throw new ContainerTooLargeError(context);\n      }\n\n      return {\n        context,\n        results: [\n          new ArrayStackItem(\n            args[0].asBlock().transactions.map((transaction) => new TransactionStackItem(transaction)),\n          ),\n        ],\n      };\n    },\n  }),\n\n  'Neo.Block.GetTransaction': createSysCall({\n    name: 'Neo.Block.GetTransaction',\n    in: 2,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [\n        new TransactionStackItem(\n          getIndex(context, args[1].asBigIntegerUnsafe().toNumber(), args[0].asBlock().transactions),\n        ),\n      ],\n    }),\n  }),\n\n  'Neo.Transaction.GetHash': createSysCall({\n    name: 'Neo.Transaction.GetHash',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt256StackItem(args[0].asTransaction().hash)],\n    }),\n  }),\n\n  'Neo.Transaction.GetType': createSysCall({\n    name: 'Neo.Transaction.GetType',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asTransaction().type))],\n    }),\n  }),\n\n  'Neo.Transaction.GetAttributes': createSysCall({\n    name: 'Neo.Transaction.GetAttributes',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => {\n      if (args[0].asTransaction().attributes.length > MAX_ARRAY_SIZE) {\n        /* istanbul ignore next */\n        throw new ContainerTooLargeError(context);\n      }\n\n      return {\n        context,\n        results: [\n          new ArrayStackItem(args[0].asTransaction().attributes.map((attribute) => new AttributeStackItem(attribute))),\n        ],\n      };\n    },\n  }),\n\n  'Neo.Transaction.GetInputs': createSysCall({\n    name: 'Neo.Transaction.GetInputs',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => {\n      if (args[0].asTransaction().inputs.length > MAX_ARRAY_SIZE) {\n        throw new ContainerTooLargeError(context);\n      }\n\n      return {\n        context,\n        results: [new ArrayStackItem(args[0].asTransaction().inputs.map((input) => new InputStackItem(input)))],\n      };\n    },\n  }),\n\n  'Neo.Transaction.GetOutputs': createSysCall({\n    name: 'Neo.Transaction.GetOutputs',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => {\n      if (args[0].asTransaction().outputs.length > MAX_ARRAY_SIZE) {\n        throw new ContainerTooLargeError(context);\n      }\n\n      return {\n        context,\n        results: [new ArrayStackItem(args[0].asTransaction().outputs.map((output) => new OutputStackItem(output)))],\n      };\n    },\n  }),\n\n  'Neo.Transaction.GetReferences': createSysCall({\n    name: 'Neo.Transaction.GetReferences',\n    in: 1,\n    out: 1,\n    fee: FEES.TWO_HUNDRED,\n    invoke: async ({ context, args }) => {\n      if (args[0].asTransaction().inputs.length > MAX_ARRAY_SIZE) {\n        throw new ContainerTooLargeError(context);\n      }\n\n      const outputs = await args[0].asTransaction().getReferences({\n        getOutput: context.blockchain.output.get,\n      });\n\n      return {\n        context,\n        results: [new ArrayStackItem(outputs.map((output) => new OutputStackItem(output)))],\n      };\n    },\n  }),\n\n  'Neo.Transaction.GetUnspentCoins': createSysCall({\n    name: 'Neo.Transaction.GetUnspentCoins',\n    in: 1,\n    out: 1,\n    fee: FEES.TWO_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const transaction = args[0].asTransaction();\n      // tslint:disable-next-line readonly-array\n      let outputs: StackItem[];\n      if (\n        context.init.scriptContainer.type === ScriptContainerType.Transaction &&\n        context.init.scriptContainer.value.equals(transaction)\n      ) {\n        outputs = context.init.scriptContainer.value.outputs.map((output) => new OutputStackItem(output));\n      } else {\n        const spentCoins = await context.blockchain.transactionData.get({\n          hash: transaction.hash,\n        });\n        outputs = transaction.outputs\n          .filter((_output, idx) => (spentCoins.endHeights[idx] as number | undefined) === undefined)\n          .map((output) => new OutputStackItem(output));\n      }\n\n      if (outputs.length > MAX_ARRAY_SIZE) {\n        throw new ContainerTooLargeError(context);\n      }\n\n      return {\n        context,\n        results: [new ArrayStackItem(outputs)],\n      };\n    },\n  }),\n\n  'Neo.Transaction.GetWitnesses': createSysCall({\n    name: 'Neo.Transaction.GetWitnesses',\n    in: 1,\n    out: 1,\n    fee: FEES.TWO_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const transaction = args[0].asTransaction();\n\n      if (transaction.scripts.length > MAX_ARRAY_SIZE) {\n        throw new ContainerTooLargeError(context);\n      }\n\n      const hashes = await transaction.getSortedScriptHashesForVerifying({\n        getOutput: context.blockchain.output.get,\n        getAsset: context.blockchain.asset.get,\n      });\n      const witnesses = await Promise.all(\n        transaction.scripts.map(async (witness, idx) => {\n          if (witness.verification.length === 0) {\n            const contract = await context.blockchain.contract.get({ hash: common.stringToUInt160(hashes[idx]) });\n\n            return new Witness({\n              invocation: witness.invocation,\n              verification: contract.script,\n            });\n          }\n\n          return witness;\n        }),\n      );\n\n      return {\n        context,\n        results: [new ArrayStackItem(witnesses.map((witness) => new WitnessStackItem(witness)))],\n      };\n    },\n  }),\n\n  'Neo.Witness.GetVerificationScript': createSysCall({\n    name: 'Neo.Witness.GetVerificationScript',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const witness = args[0].asWitness();\n\n      return {\n        context,\n        results: [new BufferStackItem(witness.verification)],\n      };\n    },\n  }),\n\n  'Neo.InvocationTransaction.GetScript': createSysCall({\n    name: 'Neo.InvocationTransaction.GetScript',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const transaction = args[0].asTransaction();\n      if (transaction instanceof InvocationTransaction) {\n        return {\n          context,\n          results: [new BufferStackItem(transaction.script)],\n        };\n      }\n\n      throw new InvalidInvocationTransactionError(context);\n    },\n  }),\n\n  'Neo.Attribute.GetUsage': createSysCall({\n    name: 'Neo.Attribute.GetUsage',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asAttribute().usage))],\n    }),\n  }),\n\n  'Neo.Attribute.GetData': createSysCall({\n    name: 'Neo.Attribute.GetData',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [args[0].asAttributeStackItem().toValueStackItem()],\n    }),\n  }),\n\n  'Neo.Input.GetHash': createSysCall({\n    name: 'Neo.Input.GetHash',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt256StackItem(args[0].asInput().hash)],\n    }),\n  }),\n\n  'Neo.Input.GetIndex': createSysCall({\n    name: 'Neo.Input.GetIndex',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asInput().index))],\n    }),\n  }),\n\n  'Neo.Output.GetAssetId': createSysCall({\n    name: 'Neo.Output.GetAssetId',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt256StackItem(args[0].asOutput().asset)],\n    }),\n  }),\n\n  'Neo.Output.GetValue': createSysCall({\n    name: 'Neo.Output.GetValue',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(args[0].asOutput().value)],\n    }),\n  }),\n\n  'Neo.Output.GetScriptHash': createSysCall({\n    name: 'Neo.Output.GetScriptHash',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt160StackItem(args[0].asOutput().address)],\n    }),\n  }),\n\n  'Neo.Account.GetScriptHash': createSysCall({\n    name: 'Neo.Account.GetScriptHash',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt160StackItem(args[0].asAccount().hash)],\n    }),\n  }),\n\n  'Neo.Account.GetVotes': createSysCall({\n    name: 'Neo.Account.GetVotes',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new ArrayStackItem(args[0].asAccount().votes.map((vote) => new ECPointStackItem(vote)))],\n    }),\n  }),\n\n  'Neo.Account.GetBalance': createSysCall({\n    name: 'Neo.Account.GetBalance',\n    in: 2,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const account = args[0].asAccount();\n      const accountState = await context.blockchain.account.get({\n        hash: account.hash,\n      });\n\n      const asset = common.uInt256ToHex(args[1].asUInt256());\n      const balance = accountState.balances[asset];\n      const result = balance === undefined ? utils.ZERO : balance;\n\n      return {\n        context,\n        results: [new IntegerStackItem(result)],\n      };\n    },\n  }),\n\n  'Neo.Asset.GetAssetId': createSysCall({\n    name: 'Neo.Asset.GetAssetId',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt256StackItem(args[0].asAsset().hash)],\n    }),\n  }),\n\n  'Neo.Asset.GetAssetType': createSysCall({\n    name: 'Neo.Asset.GetAssetType',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asAsset().type))],\n    }),\n  }),\n\n  'Neo.Asset.GetAmount': createSysCall({\n    name: 'Neo.Asset.GetAmount',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asAsset().amount))],\n    }),\n  }),\n\n  'Neo.Asset.GetAvailable': createSysCall({\n    name: 'Neo.Asset.GetAvailable',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asAsset().available))],\n    }),\n  }),\n\n  'Neo.Asset.GetPrecision': createSysCall({\n    name: 'Neo.Asset.GetPrecision',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new IntegerStackItem(new BN(args[0].asAsset().precision))],\n    }),\n  }),\n\n  'Neo.Asset.GetOwner': createSysCall({\n    name: 'Neo.Asset.GetOwner',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new ECPointStackItem(args[0].asAsset().owner)],\n    }),\n  }),\n\n  'Neo.Asset.GetAdmin': createSysCall({\n    name: 'Neo.Asset.GetAdmin',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt160StackItem(args[0].asAsset().admin)],\n    }),\n  }),\n\n  'Neo.Asset.GetIssuer': createSysCall({\n    name: 'Neo.Asset.GetIssuer',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new UInt160StackItem(args[0].asAsset().issuer)],\n    }),\n  }),\n\n  'Neo.Contract.GetScript': createSysCall({\n    name: 'Neo.Contract.GetScript',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new BufferStackItem(args[0].asContract().script)],\n    }),\n  }),\n\n  'Neo.Contract.IsPayable': createSysCall({\n    name: 'Neo.Contract.IsPayable',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [new BooleanStackItem(args[0].asContract().payable)],\n    }),\n  }),\n\n  'Neo.Storage.GetContext': createSysCall({\n    name: 'Neo.Storage.GetContext',\n    out: 1,\n    invoke: ({ context }) => ({\n      context,\n      results: [new StorageContextStackItem(context.scriptHash)],\n    }),\n  }),\n\n  'Neo.Storage.GetReadOnlyContext': createSysCall({\n    name: 'Neo.Storage.GetReadOnlyContext',\n    out: 1,\n    invoke: ({ context }) => ({\n      context,\n      results: [new StorageContextStackItem(context.scriptHash).asReadOnly()],\n    }),\n  }),\n\n  'Neo.Storage.Get': createSysCall({\n    name: 'Neo.Storage.Get',\n    in: 2,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const hash = vmUtils.toStorageContext({ context, value: args[0] }).value;\n      await checkStorage({ context, hash });\n\n      const item = await context.blockchain.storageItem.tryGet({\n        hash,\n        key: args[1].asBuffer(),\n      });\n\n      const result = item === undefined ? Buffer.from([]) : item.value;\n\n      return {\n        context,\n        results: [new BufferStackItem(result)],\n      };\n    },\n  }),\n\n  'Neo.Storage.Find': createSysCall({\n    name: 'Neo.Storage.Find',\n    in: 2,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const hash = vmUtils.toStorageContext({ context, value: args[0] }).value;\n      await checkStorage({ context, hash });\n\n      const prefix = args[1].asBuffer();\n      const iterable = AsyncIterableX.from<StorageItem>(context.blockchain.storageItem.getAll$({ hash, prefix })).pipe<{\n        key: BufferStackItem;\n        value: BufferStackItem;\n      }>(\n        asyncMap(({ key, value }) => ({\n          key: new BufferStackItem(key),\n          value: new BufferStackItem(value),\n        })),\n      );\n\n      return {\n        context,\n        results: [new IteratorStackItem(new StackItemIterator(iterable[Symbol.asyncIterator]()))],\n      };\n    },\n  }),\n\n  'Neo.StorageContext.AsReadOnly': createSysCall({\n    name: 'Neo.StorageContext.AsReadOnly',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => ({\n      context,\n      results: [vmUtils.toStorageContext({ context, value: args[0] }).asReadOnly()],\n    }),\n  }),\n\n  'Neo.Enumerator.Create': createSysCall({\n    name: 'Neo.Enumerator.Create',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const iterable = AsyncIterableX.from(args[0].asArray().map((value) => ({ value })));\n\n      return {\n        context,\n        results: [new EnumeratorStackItem(new StackItemEnumerator(iterable[Symbol.asyncIterator]()))],\n      };\n    },\n  }),\n\n  'Neo.Enumerator.Next': createSysCall({\n    name: 'Neo.Enumerator.Next',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const enumerator = args[0].asEnumerator();\n      const value = await enumerator.next();\n\n      return {\n        context,\n        results: [new BooleanStackItem(value)],\n      };\n    },\n  }),\n\n  'Neo.Iterator.Create': createSysCall({\n    name: 'Neo.Iterator.Create',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => {\n      const iterable = args[0].isArray()\n        ? AsyncIterableX.from(\n            args[0].asArray().map((value, idx) => ({\n              key: new IntegerStackItem(new BN(idx)),\n              value,\n            })),\n          )\n        : AsyncIterableX.from(\n            commonUtils\n              .zip(args[0].asMapStackItem().keysArray(), args[0].asMapStackItem().valuesArray())\n              .map(([key, value]) => ({ key, value })),\n          );\n\n      return {\n        context,\n        results: [new IteratorStackItem(new StackItemIterator(iterable[Symbol.asyncIterator]()))],\n      };\n    },\n  }),\n\n  'Neo.Iterator.Key': createSysCall({\n    name: 'Neo.Iterator.Key',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => ({\n      context,\n      // tslint:disable-next-line no-any\n      results: [args[0].asIterator().key() as any],\n    }),\n  }),\n\n  'Neo.Enumerator.Value': createSysCall({\n    name: 'Neo.Enumerator.Value',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => ({\n      context,\n      // tslint:disable-next-line no-any\n      results: [args[0].asEnumerator().value() as any],\n    }),\n  }),\n\n  'Neo.Enumerator.Concat': createSysCall({\n    name: 'Neo.Enumerator.Concat',\n    in: 2,\n    out: 1,\n    invoke: async ({ context, args }) => ({\n      context,\n      results: [new EnumeratorStackItem(args[0].asEnumerator().concat(args[1].asEnumerator()))],\n    }),\n  }),\n\n  'Neo.Iterator.Concat': createSysCall({\n    name: 'Neo.Iterator.Concat',\n    in: 2,\n    out: 1,\n    invoke: async ({ context, args }) => ({\n      context,\n      results: [new IteratorStackItem(args[0].asIterator().concatIterator(args[1].asIterator()))],\n    }),\n  }),\n\n  'Neo.Iterator.Keys': createSysCall({\n    name: 'Neo.Iterator.Keys',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => ({\n      context,\n      results: [new EnumeratorStackItem(args[0].asIterator().keys())],\n    }),\n  }),\n\n  'Neo.Iterator.Values': createSysCall({\n    name: 'Neo.Iterator.Values',\n    in: 1,\n    out: 1,\n    invoke: async ({ context, args }) => ({\n      context,\n      results: [new EnumeratorStackItem(args[0].asIterator().values())],\n    }),\n  }),\n\n  'Neo.Account.SetVotes': createSysCall({\n    name: 'Neo.Account.SetVotes',\n    in: 2,\n    fee: FEES.ONE_THOUSAND,\n    invoke: async ({ context, args }) => {\n      // This has been removed, but we keep it here so that we can do a full\n      // build of the chain\n      const address = args[0].asAccount().hash;\n      const votes = args[1].asArray().map((vote) => vote.asECPoint());\n      const account = await context.blockchain.account.get({ hash: address });\n      const asset = context.blockchain.settings.governingToken.hashHex;\n      const currentBalance = account.balances[asset];\n      const balance = currentBalance === undefined ? utils.ZERO : currentBalance;\n      if (account.isFrozen) {\n        throw new AccountFrozenError(context);\n      }\n      if (balance.isZero() && votes.length > 0) {\n        throw new NotEligibleVoteError(context);\n      }\n      const valid = await checkWitness({ context, hash: address });\n      if (!valid) {\n        throw new BadWitnessCheckError(context);\n      }\n\n      const newAccount = await context.blockchain.account.update(account, {\n        votes,\n      });\n\n      if (context.init.listeners.onSetVotes !== undefined) {\n        context.init.listeners.onSetVotes({ address, votes });\n      }\n      if (newAccount.isDeletable()) {\n        await context.blockchain.account.delete({ hash: address });\n      }\n\n      return { context };\n    },\n  }),\n\n  'Neo.Account.IsStandard': createSysCall({\n    name: 'Neo.Account.IsStandard',\n    in: 1,\n    out: 1,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const hash = args[0].asUInt160();\n      const contract = await context.blockchain.contract.tryGet({ hash });\n\n      return {\n        context,\n        results: [new BooleanStackItem(contract === undefined || crypto.isStandardContract(contract.script))],\n      };\n    },\n  }),\n\n  'Neo.Validator.Register': createSysCall({\n    name: 'Neo.Validator.Register',\n    in: 1,\n    out: 1,\n    fee: common.ONE_THOUSAND_FIXED8,\n    invoke: async ({ context, args }) => {\n      // This has been removed, but we keep it here so that we can do a full\n      // build of the chain\n      const publicKey = args[0].asECPoint();\n      const valid = await checkWitnessPublicKey({ context, publicKey });\n      if (!valid) {\n        throw new BadWitnessCheckError(context);\n      }\n\n      let validator = await context.blockchain.validator.tryGet({ publicKey });\n      if (validator === undefined) {\n        validator = new Validator({ publicKey });\n        await context.blockchain.validator.add(validator);\n      }\n\n      return {\n        context,\n        results: [new ValidatorStackItem(validator)],\n      };\n    },\n  }),\n\n  'Neo.Asset.Create': createSysCall({\n    name: 'Neo.Asset.Create',\n    in: 7,\n    out: 1,\n    fee: common.FIVE_THOUSAND_FIXED8,\n    invoke: async ({ context, args }) => {\n      const { scriptContainer, triggerType } = context.init;\n      if (triggerType !== TriggerType.Application) {\n        throw new InvalidVerifySyscallError(context, 'Neo.Asset.Create');\n      }\n      if (scriptContainer.type !== ScriptContainerType.Transaction) {\n        throw new UnexpectedScriptContainerError(context);\n      }\n      const transaction = scriptContainer.value;\n      if (transaction.type !== TransactionType.Invocation) {\n        throw new UnexpectedScriptContainerError(context);\n      }\n\n      const assetType = assertAssetType(args[0].asBigIntegerUnsafe().toNumber());\n      if (assetType === AssetType.GoverningToken || assetType === AssetType.UtilityToken) {\n        throw new InvalidAssetTypeError(context);\n      }\n\n      const name = args[1].asString();\n      const amount = args[2].asBigIntegerUnsafe();\n      const precision = args[3].asBigIntegerUnsafe().toNumber();\n      const owner = args[4].asECPoint();\n      const admin = args[5].asUInt160();\n      const issuer = args[6].asUInt160();\n\n      const valid = await checkWitnessPublicKey({ context, publicKey: owner });\n      if (!valid) {\n        throw new BadWitnessCheckError(context);\n      }\n\n      const asset = new Asset({\n        hash: transaction.hash,\n        type: assetType,\n        name,\n        amount,\n        precision,\n        owner,\n        admin,\n        issuer,\n        expiration: context.blockchain.currentBlock.index + 1 + 2000000,\n      });\n\n      const result = new AssetStackItem(asset);\n      await context.blockchain.asset.add(asset);\n\n      return { context, results: [result] };\n    },\n  }),\n\n  'Neo.Asset.Renew': ({ context: contextIn }) => {\n    const yearsIn = contextIn.stack[1].asBigInteger(contextIn.blockchain.currentBlockIndex);\n\n    return createSysCall({\n      name: 'Neo.Asset.Renew',\n      in: 2,\n      out: 1,\n      fee: common.FIVE_THOUSAND_FIXED8.mul(yearsIn),\n      invoke: async ({ context, args }) => {\n        if (context.init.triggerType !== TriggerType.Application) {\n          throw new InvalidVerifySyscallError(context, 'Neo.Asset.Renew');\n        }\n        const { hash } = args[0].asAsset();\n        const years = args[1].asBigInteger(contextIn.blockchain.currentBlockIndex);\n\n        const asset = await context.blockchain.asset.get({ hash });\n        let { expiration } = asset;\n        if (expiration < context.blockchain.currentBlock.index + 1) {\n          expiration = context.blockchain.currentBlock.index + 1;\n        }\n\n        let newExpiration = new BN(expiration).add(years.mul(new BN(BLOCK_HEIGHT_YEAR)));\n\n        if (newExpiration.gt(utils.UINT_MAX)) {\n          newExpiration = utils.UINT_MAX;\n        }\n\n        await context.blockchain.asset.update(asset, {\n          expiration: newExpiration.toNumber(),\n        });\n\n        return {\n          context,\n          results: [new IntegerStackItem(newExpiration)],\n        };\n      },\n    })({ context: contextIn });\n  },\n  'Neo.Contract.Create': getContractFee((argsIn, fee) =>\n    createSysCall({\n      name: 'Neo.Contract.Create',\n      in: 9,\n      out: 1,\n      fee,\n      invoke: async ({ context, args }) => {\n        if (context.init.triggerType !== TriggerType.Application) {\n          throw new InvalidVerifySyscallError(context, 'Neo.Contract.Create');\n        }\n        const { contract } = await createContract({ context, args });\n        const result = new ContractStackItem(contract);\n\n        return {\n          context: {\n            ...context,\n            createdContracts: {\n              ...context.createdContracts,\n              [contract.hashHex]: context.scriptHash,\n            },\n          },\n\n          results: [result],\n        };\n      },\n    })(argsIn),\n  ),\n\n  'Neo.Contract.Migrate': getContractFee((argsIn, fee) =>\n    createSysCall({\n      name: 'Neo.Contract.Migrate',\n      in: 9,\n      out: 1,\n      fee,\n      invoke: async (options) => {\n        if (options.context.init.triggerType !== TriggerType.Application) {\n          throw new InvalidVerifySyscallError(options.context, 'Neo.Contract.Migrate');\n        }\n        const { context: contextIn, args } = options;\n        let context = contextIn;\n        const { contract, created } = await createContract({ context, args });\n        if (contract.hasStorage && created) {\n          await context.blockchain.storageItem\n            .getAll$({\n              hash: context.scriptHash,\n            })\n            .pipe(\n              concatMap((item) =>\n                defer(async () =>\n                  context.blockchain.storageItem.add(\n                    new StorageItem({\n                      hash: contract.hash,\n                      key: item.key,\n                      value: item.value,\n                      flags: StorageFlags.None,\n                    }),\n                  ),\n                ),\n              ),\n            )\n            .toPromise();\n          context = {\n            ...context,\n            createdContracts: {\n              ...context.createdContracts,\n              [contract.hashHex]: context.scriptHash,\n            },\n          };\n        }\n\n        await destroyContract(options);\n\n        if (context.init.listeners.onMigrateContract !== undefined) {\n          context.init.listeners.onMigrateContract({\n            from: context.scriptHash,\n            to: contract.hash,\n          });\n        }\n\n        return {\n          context,\n          results: [new ContractStackItem(contract)],\n        };\n      },\n    })(argsIn),\n  ),\n\n  'Neo.Contract.GetStorageContext': createSysCall({\n    name: 'Neo.Contract.GetStorageContext',\n    in: 1,\n    out: 1,\n    invoke: ({ context, args }) => {\n      const contract = args[0].asContract();\n      const createdScriptHash = context.createdContracts[contract.hashHex];\n      if (!common.uInt160Equal(createdScriptHash, context.scriptHash)) {\n        throw new InvalidContractGetStorageContextError(context);\n      }\n\n      return {\n        context,\n        results: [new StorageContextStackItem(contract.hash)],\n      };\n    },\n  }),\n\n  'Neo.Contract.Destroy': createSysCall({\n    name: 'Neo.Contract.Destroy',\n    invoke: async (options) => {\n      if (options.context.init.triggerType !== TriggerType.Application) {\n        throw new InvalidVerifySyscallError(options.context, 'Neo.Contract.Destroy');\n      }\n      await destroyContract(options);\n\n      return { context: options.context };\n    },\n  }),\n\n  'Neo.Storage.Put': createPut({ name: 'Neo.Storage.Put' }),\n\n  'Neo.Storage.PutEx': createPut({ name: 'Neo.Storage.PutEx' }),\n\n  'Neo.Storage.Delete': createSysCall({\n    name: 'Neo.Storage.Delete',\n    in: 2,\n    fee: FEES.ONE_HUNDRED,\n    invoke: async ({ context, args }) => {\n      const hash = vmUtils.toStorageContext({\n        context,\n        value: args[0],\n        write: true,\n      }).value;\n      await checkStorage({ context, hash });\n      const key = args[1].asBuffer();\n      const existing = await context.blockchain.storageItem.tryGet({ hash, key });\n      if (existing !== undefined) {\n        if (hasStorageFlag(existing.flags, StorageFlags.Constant)) {\n          throw new ConstantStorageError(context, key);\n        }\n\n        await context.blockchain.storageItem.delete({ hash, key });\n      }\n\n      return { context };\n    },\n  }),\n\n  'System.ExecutionEngine.GetScriptContainer': createSysCall({\n    name: 'System.ExecutionEngine.GetScriptContainer',\n    out: 1,\n    invoke: async ({ context }) => {\n      let result;\n      const { scriptContainer } = context.init;\n      switch (scriptContainer.type) {\n        case ScriptContainerType.Transaction:\n          result = new TransactionStackItem(scriptContainer.value);\n          break;\n        case ScriptContainerType.Block:\n          result = new BlockStackItem(scriptContainer.value);\n          break;\n        case ScriptContainerType.Consensus:\n          result = new ConsensusPayloadStackItem(scriptContainer.value);\n          break;\n        /* istanbul ignore next */\n        default:\n          commonUtils.assertNever(scriptContainer);\n          throw new Error('For TS');\n      }\n\n      return { context, results: [result] };\n    },\n  }),\n\n  'System.ExecutionEngine.GetExecutingScriptHash': createSysCall({\n    name: 'System.ExecutionEngine.GetExecutingScriptHash',\n    out: 1,\n    invoke: async ({ context }) => ({\n      context,\n      results: [new UInt160StackItem(context.scriptHash)],\n    }),\n  }),\n\n  'System.ExecutionEngine.GetCallingScriptHash': createSysCall({\n    name: 'System.ExecutionEngine.GetCallingScriptHash',\n    out: 1,\n    invoke: async ({ context }) => ({\n      context,\n      results: [\n        context.scriptHashStack.length > 1\n          ? new UInt160StackItem(context.scriptHashStack[1])\n          : new BufferStackItem(Buffer.alloc(0, 0)),\n      ],\n    }),\n  }),\n\n  'System.ExecutionEngine.GetEntryScriptHash': createSysCall({\n    name: 'System.ExecutionEngine.GetEntryScriptHash',\n    out: 1,\n    invoke: async ({ context }) => ({\n      context,\n      results: [new UInt160StackItem(context.scriptHashStack[context.scriptHashStack.length - 1])],\n    }),\n  }),\n};\n\nexport const SYSCALL_ALIASES: { readonly [key: string]: string | undefined } = {\n  'Neo.Iterator.Next': 'Neo.Enumerator.Next',\n  'Neo.Iterator.Value': 'Neo.Enumerator.Value',\n  'System.Runtime.GetTrigger': 'Neo.Runtime.GetTrigger',\n  'System.Runtime.CheckWitness': 'Neo.Runtime.CheckWitness',\n  'System.Runtime.Notify': 'Neo.Runtime.Notify',\n  'System.Runtime.Log': 'Neo.Runtime.Log',\n  'System.Runtime.GetTime': 'Neo.Runtime.GetTime',\n  'System.Runtime.Serialize': 'Neo.Runtime.Serialize',\n  'System.Runtime.Deserialize': 'Neo.Runtime.Deserialize',\n  'System.Blockchain.GetHeight': 'Neo.Blockchain.GetHeight',\n  'System.Blockchain.GetHeader': 'Neo.Blockchain.GetHeader',\n  'System.Blockchain.GetBlock': 'Neo.Blockchain.GetBlock',\n  'System.Blockchain.GetTransaction': 'Neo.Blockchain.GetTransaction',\n  'System.Blockchain.GetTransactionHeight': 'Neo.Blockchain.GetTransactionHeight',\n  'System.Blockchain.GetContract': 'Neo.Blockchain.GetContract',\n  'System.Header.GetIndex': 'Neo.Header.GetIndex',\n  'System.Header.GetHash': 'Neo.Header.GetHash',\n  'System.Header.GetPrevHash': 'Neo.Header.GetPrevHash',\n  'System.Header.GetTimestamp': 'Neo.Header.GetTimestamp',\n  'System.Block.GetTransactionCount': 'Neo.Block.GetTransactionCount',\n  'System.Block.GetTransactions': 'Neo.Block.GetTransactions',\n  'System.Block.GetTransaction': 'Neo.Block.GetTransaction',\n  'System.Transaction.GetHash': 'Neo.Transaction.GetHash',\n  'System.Contract.Destroy': 'Neo.Contract.Destroy',\n  'System.Contract.GetStorageContext': 'Neo.Contract.GetStorageContext',\n  'System.Storage.GetContext': 'Neo.Storage.GetContext',\n  'System.Storage.GetReadOnlyContext': 'Neo.Storage.GetReadOnlyContext',\n  'System.Storage.Get': 'Neo.Storage.Get',\n  'System.Storage.Put': 'Neo.Storage.Put',\n  'System.Storage.Delete': 'Neo.Storage.Delete',\n  'System.StorageContext.AsReadOnly': 'Neo.StorageContext.AsReadOnly',\n  'AntShares.Runtime.CheckWitness': 'Neo.Runtime.CheckWitness',\n  'AntShares.Runtime.Notify': 'Neo.Runtime.Notify',\n  'AntShares.Runtime.Log': 'Neo.Runtime.Log',\n  'AntShares.Blockchain.GetHeight': 'Neo.Blockchain.GetHeight',\n  'AntShares.Blockchain.GetHeader': 'Neo.Blockchain.GetHeader',\n  'AntShares.Blockchain.GetBlock': 'Neo.Blockchain.GetBlock',\n  'AntShares.Blockchain.GetTransaction': 'Neo.Blockchain.GetTransaction',\n  'AntShares.Blockchain.GetAccount': 'Neo.Blockchain.GetAccount',\n  'AntShares.Blockchain.GetValidators': 'Neo.Blockchain.GetValidators',\n  'AntShares.Blockchain.GetAsset': 'Neo.Blockchain.GetAsset',\n  'AntShares.Blockchain.GetContract': 'Neo.Blockchain.GetContract',\n  'AntShares.Header.GetHash': 'Neo.Header.GetHash',\n  'AntShares.Header.GetVersion': 'Neo.Header.GetVersion',\n  'AntShares.Header.GetPrevHash': 'Neo.Header.GetPrevHash',\n  'AntShares.Header.GetMerkleRoot': 'Neo.Header.GetMerkleRoot',\n  'AntShares.Header.GetTimestamp': 'Neo.Header.GetTimestamp',\n  'AntShares.Header.GetConsensusData': 'Neo.Header.GetConsensusData',\n  'AntShares.Header.GetNextConsensus': 'Neo.Header.GetNextConsensus',\n  'AntShares.Block.GetTransactionCount': 'Neo.Block.GetTransactionCount',\n  'AntShares.Block.GetTransactions': 'Neo.Block.GetTransactions',\n  'AntShares.Block.GetTransaction': 'Neo.Block.GetTransaction',\n  'AntShares.Transaction.GetHash': 'Neo.Transaction.GetHash',\n  'AntShares.Transaction.GetType': 'Neo.Transaction.GetType',\n  'AntShares.Transaction.GetAttributes': 'Neo.Transaction.GetAttributes',\n  'AntShares.Transaction.GetInputs': 'Neo.Transaction.GetInputs',\n  'AntShares.Transaction.GetOutputs': 'Neo.Transaction.GetOutputs',\n  'AntShares.Transaction.GetReferences': 'Neo.Transaction.GetReferences',\n  'AntShares.Attribute.GetUsage': 'Neo.Attribute.GetUsage',\n  'AntShares.Attribute.GetData': 'Neo.Attribute.GetData',\n  'AntShares.Input.GetHash': 'Neo.Input.GetHash',\n  'AntShares.Input.GetIndex': 'Neo.Input.GetIndex',\n  'AntShares.Output.GetAssetId': 'Neo.Output.GetAssetId',\n  'AntShares.Output.GetValue': 'Neo.Output.GetValue',\n  'AntShares.Output.GetScriptHash': 'Neo.Output.GetScriptHash',\n  'AntShares.Account.GetScriptHash': 'Neo.Account.GetScriptHash',\n  'AntShares.Account.GetVotes': 'Neo.Account.GetVotes',\n  'AntShares.Account.GetBalance': 'Neo.Account.GetBalance',\n  'AntShares.Asset.GetAssetId': 'Neo.Asset.GetAssetId',\n  'AntShares.Asset.GetAssetType': 'Neo.Asset.GetAssetType',\n  'AntShares.Asset.GetAmount': 'Neo.Asset.GetAmount',\n  'AntShares.Asset.GetAvailable': 'Neo.Asset.GetAvailable',\n  'AntShares.Asset.GetPrecision': 'Neo.Asset.GetPrecision',\n  'AntShares.Asset.GetOwner': 'Neo.Asset.GetOwner',\n  'AntShares.Asset.GetAdmin': 'Neo.Asset.GetAdmin',\n  'AntShares.Asset.GetIssuer': 'Neo.Asset.GetIssuer',\n  'AntShares.Contract.GetScript': 'Neo.Contract.GetScript',\n  'AntShares.Storage.GetContext': 'Neo.Storage.GetContext',\n  'AntShares.Storage.Get': 'Neo.Storage.Get',\n  'AntShares.Account.SetVotes': 'Neo.Account.SetVotes',\n  'AntShares.Validator.Register': 'Neo.Validator.Register',\n  'AntShares.Asset.Create': 'Neo.Asset.Create',\n  'AntShares.Asset.Renew': 'Neo.Asset.Renew',\n  'AntShares.Contract.Create': 'Neo.Contract.Create',\n  'AntShares.Contract.Migrate': 'Neo.Contract.Migrate',\n  'AntShares.Contract.GetStorageContext': 'Neo.Contract.GetStorageContext',\n  'AntShares.Contract.Destroy': 'Neo.Contract.Destroy',\n  'AntShares.Storage.Put': 'Neo.Storage.Put',\n  'AntShares.Storage.Delete': 'Neo.Storage.Delete',\n};\n\nconst SYS_CALL_STRING_LENGTH = 252;\n\nconst SYSCALLS_BY_HASH = _.fromPairs(\n  Object.entries(SYSCALLS).map(([key, value]) => [toSysCallHash(key as SysCallEnum), value]),\n);\n\nexport const lookupSysCall = ({ context }: { readonly context: ExecutionContext }) => {\n  const { code, pc } = context;\n  const reader = new BinaryReader(code, pc);\n\n  const sysCallBytes = reader.readVarBytesLE(SYS_CALL_STRING_LENGTH);\n  let key: SysCallHash;\n  let debugName: string;\n  if (sysCallBytes.length === 4) {\n    key = sysCallBytes.readUInt32LE(0) as SysCallHash;\n    debugName = sysCallBytes.toString('hex');\n  } else {\n    const sysCallName = utils.toASCII(sysCallBytes);\n    const aliasName = SYSCALL_ALIASES[sysCallName];\n    const canonicalName = aliasName === undefined ? sysCallName : aliasName;\n    key = toSysCallHash(assertSysCall(canonicalName));\n    debugName = canonicalName;\n  }\n  const createCall = SYSCALLS_BY_HASH[key];\n  // tslint:disable-next-line: strict-type-predicates\n  if (createCall === undefined) {\n    throw new UnknownSysCallError(context, debugName);\n  }\n\n  const nextContext = {\n    ...context,\n    pc: reader.index,\n  };\n\n  return createCall({ context: nextContext });\n};\n","import { common, ECPoint } from '@neo-one/client-common';\nimport { ContractParameter, PublicKeyContractParameter } from '@neo-one/node-core';\nimport { StackItemBase } from './StackItemBase';\n\nexport class ECPointStackItem extends StackItemBase {\n  public readonly value: ECPoint;\n\n  public constructor(value: ECPoint) {\n    super();\n    this.value = value;\n  }\n\n  public asECPoint(): ECPoint {\n    return this.value;\n  }\n\n  public asBuffer(): Buffer {\n    return common.ecPointToBuffer(this.value);\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new PublicKeyContractParameter(this.value);\n  }\n}\n","import { common, UInt256 } from '@neo-one/client-common';\nimport { ContractParameter, Hash256ContractParameter } from '@neo-one/node-core';\nimport { StackItemBase } from './StackItemBase';\n\nexport class UInt256StackItem extends StackItemBase {\n  public readonly value: UInt256;\n\n  public constructor(value: UInt256) {\n    super();\n    this.value = value;\n  }\n\n  public asUInt256(): UInt256 {\n    return this.value;\n  }\n\n  public asBuffer(): Buffer {\n    return common.uInt256ToBuffer(this.value);\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new Hash256ContractParameter(this.value);\n  }\n}\n","import { common, UInt160 } from '@neo-one/client-common';\nimport { ContractParameter, Hash160ContractParameter } from '@neo-one/node-core';\nimport { StackItemBase } from './StackItemBase';\n\nexport class UInt160StackItem extends StackItemBase {\n  public readonly value: UInt160;\n\n  public constructor(value: UInt160) {\n    super();\n    this.value = value;\n  }\n\n  public asUInt160(): UInt160 {\n    return this.value;\n  }\n\n  public asBuffer(): Buffer {\n    return common.uInt160ToBuffer(this.value);\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new Hash160ContractParameter(this.value);\n  }\n}\n","import { ObjectStackItem } from './ObjectStackItem';\nimport { getNextID } from './referenceCounter';\nimport { StackItemBase } from './StackItemBase';\nimport { StackItemEnumerator } from './StackItemEnumerator';\n\nexport class EnumeratorStackItem<\n  T extends { readonly value: StackItemBase } = { readonly value: StackItemBase },\n  TEnumerator extends StackItemEnumerator<T> = StackItemEnumerator<T>\n> extends ObjectStackItem<TEnumerator> {\n  private readonly referenceID = getNextID();\n\n  public toStructuralKey(): string {\n    return `${this.referenceID}`;\n  }\n  // tslint:disable-next-line no-any\n  public equals(other: any): boolean {\n    return this === other;\n  }\n\n  public asEnumerator(): StackItemEnumerator {\n    return this.value;\n  }\n}\n","import { Equatable } from '@neo-one/node-core';\nimport { AsyncIterableX } from '@reactivex/ix-es2015-cjs/asynciterable/asynciterablex';\nimport { concat } from '@reactivex/ix-es2015-cjs/asynciterable/concat';\nimport { InvalidStorageStackItemEnumeratorError } from './errors';\nimport { StackItemBase } from './StackItemBase';\n\nexport class StackItemEnumerator<T extends { readonly value: StackItemBase } = { readonly value: StackItemBase }>\n  implements Equatable {\n  protected readonly enumerator: AsyncIterator<T>;\n  protected mutableCurrent: T | undefined;\n  private mutableDone: boolean;\n\n  public constructor(enumerator: AsyncIterator<T>) {\n    this.enumerator = enumerator;\n    this.mutableDone = false;\n  }\n\n  public get done(): boolean {\n    return this.mutableDone;\n  }\n\n  public equals(other: {}): boolean {\n    return this === other;\n  }\n\n  public async next(): Promise<boolean> {\n    if (!this.mutableDone) {\n      const result = await this.enumerator.next();\n      this.mutableCurrent = result.done ? undefined : result.value;\n      this.mutableDone = result.done;\n      if (this.mutableDone) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public value(): StackItemBase {\n    const { mutableCurrent } = this;\n    if (mutableCurrent === undefined) {\n      throw new InvalidStorageStackItemEnumeratorError();\n    }\n\n    return mutableCurrent.value;\n  }\n\n  public concat<TOther extends { readonly value: StackItemBase }>(\n    other: StackItemEnumerator<TOther>,\n  ): StackItemEnumerator<T | TOther> {\n    const iterable = concat(\n      AsyncIterableX.from<T>(this.enumerator as AsyncIterableIterator<T>),\n      AsyncIterableX.from<TOther>(other.enumerator as AsyncIterableIterator<TOther>),\n    );\n\n    return new StackItemEnumerator(iterable[Symbol.asyncIterator]());\n  }\n}\n","import {\n  BinaryWriter,\n  createSerializeWire,\n  InvalidFormatError,\n  SerializableWire,\n  SerializeWire,\n} from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport { Address6 } from 'ip-address';\n\nexport interface NetworkAddressAdd {\n  readonly host: string;\n  readonly port: number;\n  readonly timestamp: number;\n  readonly services: BN;\n}\n\nconst BYTE_LENGTH = 16;\n\nexport class NetworkAddress implements SerializableWire<NetworkAddress> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): NetworkAddress {\n    const timestamp = reader.readUInt32LE();\n    const services = reader.readUInt64LE();\n    const address = Address6.fromByteArray([...reader.readBytes(16)]) as Address6 | undefined | null;\n    const port = reader.readUInt16BE();\n\n    const canonical = address == undefined ? '' : (address.canonicalForm() as string | undefined | null);\n\n    return new this({\n      timestamp,\n      services,\n      host: canonical == undefined ? '' : canonical,\n      port,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): NetworkAddress {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public static isValid(host: string): boolean {\n    const address = this.getAddress6(host);\n    if (address == undefined) {\n      return false;\n    }\n\n    try {\n      address.toByteArray();\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  public static getAddress6(host: string): Address6 | null | undefined {\n    const parts = host.split('.');\n\n    return parts.length === 4 ? Address6.fromAddress4(host) : new Address6(host);\n  }\n\n  public readonly host: string;\n  public readonly port: number;\n  public readonly timestamp: number;\n  public readonly services: BN;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ host, port, timestamp, services }: NetworkAddressAdd) {\n    this.host = host;\n    this.port = port;\n    this.timestamp = timestamp;\n    this.services = services;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    const address = NetworkAddress.getAddress6(this.host);\n    if (address == undefined) {\n      throw new InvalidFormatError('Network IP address undefined');\n    }\n    writer.writeUInt32LE(this.timestamp);\n    writer.writeUInt64LE(this.services);\n    const addressSerialized = Buffer.from(address.toByteArray());\n    writer.writeBytes(Buffer.concat([Buffer.alloc(BYTE_LENGTH - addressSerialized.length, 0), addressSerialized]));\n    writer.writeUInt16BE(this.port);\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  createSerializeWire,\n  crypto,\n  InvalidFormatError,\n  IOHelper,\n  SerializableWire,\n  SerializeWire,\n} from '@neo-one/client-common';\nimport {\n  BinaryReader,\n  Block,\n  ConsensusPayload,\n  deserializeTransactionWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireContext,\n  DeserializeWireOptions,\n  Transaction,\n} from '@neo-one/node-core';\nimport { makeErrorWithCode, utils } from '@neo-one/utils';\nimport { Transform } from 'stream';\nimport { assertCommand, Command } from './Command';\nimport {\n  AddrPayload,\n  FilterAddPayload,\n  FilterLoadPayload,\n  GetBlocksPayload,\n  HeadersPayload,\n  InvPayload,\n  MerkleBlockPayload,\n  VersionPayload,\n} from './payload';\nexport type MessageValue =\n  | { readonly command: Command.addr; readonly payload: AddrPayload }\n  | { readonly command: Command.block; readonly payload: Block }\n  | { readonly command: Command.consensus; readonly payload: ConsensusPayload }\n  | { readonly command: Command.filteradd; readonly payload: FilterAddPayload }\n  | { readonly command: Command.filterclear }\n  | { readonly command: Command.filterload; readonly payload: FilterLoadPayload }\n  | { readonly command: Command.getaddr }\n  | { readonly command: Command.getblocks; readonly payload: GetBlocksPayload }\n  | { readonly command: Command.getdata; readonly payload: InvPayload }\n  | { readonly command: Command.getheaders; readonly payload: GetBlocksPayload }\n  | { readonly command: Command.headers; readonly payload: HeadersPayload }\n  | { readonly command: Command.inv; readonly payload: InvPayload }\n  | { readonly command: Command.mempool }\n  | { readonly command: Command.tx; readonly payload: Transaction }\n  | { readonly command: Command.verack }\n  | { readonly command: Command.version; readonly payload: VersionPayload }\n  | { readonly command: Command.alert }\n  | { readonly command: Command.merkleblock; readonly payload: MerkleBlockPayload }\n  | { readonly command: Command.notfound }\n  | { readonly command: Command.ping }\n  | { readonly command: Command.pong }\n  | { readonly command: Command.reject };\nexport interface MessageAdd {\n  readonly magic: number;\n  readonly value: MessageValue;\n}\n\nexport const COMMAND_LENGTH = 12;\nexport const PAYLOAD_MAX_SIZE = 0x02000000;\n\nconst calculateChecksum = (buffer: Buffer) => common.toUInt32LE(crypto.hash256(buffer));\n\nconst deserializeMessageHeader = ({\n  context,\n  reader,\n}: DeserializeWireBaseOptions): {\n  readonly command: Command;\n  readonly length: number;\n  readonly checksum: number;\n} => {\n  if (reader.readUInt32LE() !== context.messageMagic) {\n    throw new InvalidFormatError(\n      `Expected BinaryReader readUInt32LE(0) to equal ${context.messageMagic}. Received: ${context.messageMagic}`,\n    );\n  }\n  const command = assertCommand(reader.readFixedString(COMMAND_LENGTH));\n  const length = reader.readUInt32LE();\n  if (length > PAYLOAD_MAX_SIZE) {\n    throw new InvalidFormatError(\n      `Expected buffer readout to be less than max payload size of ${PAYLOAD_MAX_SIZE}. Received: ${length}`,\n    );\n  }\n  const checksum = reader.readUInt32LE();\n\n  return { command, length, checksum };\n};\n\nexport class Message implements SerializableWire<Message> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): Message {\n    const { reader, context } = options;\n    const { command, length, checksum } = deserializeMessageHeader(options);\n    const payloadBuffer = reader.readBytes(length);\n    const payloadBufferChecksum = calculateChecksum(payloadBuffer);\n    if (payloadBufferChecksum !== checksum) {\n      throw new InvalidFormatError(\n        `Expected payloadBuffer checksum to be ${checksum}. Received: ${payloadBufferChecksum}`,\n      );\n    }\n\n    const payloadOptions = {\n      context: options.context,\n      buffer: payloadBuffer,\n    };\n\n    let value: MessageValue;\n    switch (command) {\n      case Command.addr:\n        value = {\n          command: Command.addr,\n          payload: AddrPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.block:\n        value = {\n          command: Command.block,\n          payload: Block.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.consensus:\n        value = {\n          command: Command.consensus,\n          payload: ConsensusPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.filteradd:\n        value = {\n          command: Command.filteradd,\n          payload: FilterAddPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.filterclear:\n        value = { command: Command.filterclear };\n        break;\n      case Command.filterload:\n        value = {\n          command: Command.filterload,\n          payload: FilterLoadPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.getaddr:\n        value = { command: Command.getaddr };\n        break;\n      case Command.getblocks:\n        value = {\n          command: Command.getblocks,\n          payload: GetBlocksPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.getdata:\n        value = {\n          command: Command.getdata,\n          payload: InvPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.getheaders:\n        value = {\n          command: Command.getheaders,\n          payload: GetBlocksPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.headers:\n        value = {\n          command: Command.headers,\n          payload: HeadersPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.inv:\n        value = {\n          command: Command.inv,\n          payload: InvPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.mempool:\n        value = { command: Command.mempool };\n        break;\n      case Command.tx:\n        value = {\n          command: Command.tx,\n          payload: deserializeTransactionWire(payloadOptions),\n        };\n\n        break;\n      case Command.verack:\n        value = { command: Command.verack };\n        break;\n      case Command.version:\n        value = {\n          command: Command.version,\n          payload: VersionPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.alert:\n        value = { command: Command.alert };\n        break;\n      case Command.merkleblock:\n        value = {\n          command: Command.merkleblock,\n          payload: MerkleBlockPayload.deserializeWire(payloadOptions),\n        };\n\n        break;\n      case Command.notfound:\n        value = { command: Command.notfound };\n        break;\n      case Command.ping:\n        value = { command: Command.ping };\n        break;\n      case Command.pong:\n        value = { command: Command.pong };\n        break;\n      case Command.reject:\n        value = { command: Command.reject };\n        break;\n      default:\n        utils.assertNever(command);\n        throw new InvalidFormatError(``);\n    }\n\n    return new this({ magic: context.messageMagic, value });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Message {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly magic: number;\n  public readonly value: MessageValue;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ magic, value }: MessageAdd) {\n    this.magic = magic;\n    this.value = value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    const { value } = this;\n\n    writer.writeUInt32LE(this.magic);\n    writer.writeFixedString(value.command, COMMAND_LENGTH);\n\n    let payload = Buffer.alloc(0);\n    switch (value.command) {\n      case Command.addr:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.block:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.consensus:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.filteradd:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.filterclear:\n        break;\n      case Command.filterload:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.getaddr:\n        break;\n      case Command.getblocks:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.getdata:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.getheaders:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.headers:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.inv:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.mempool:\n        break;\n      case Command.tx:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.verack:\n        break;\n      case Command.version:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.alert:\n        break;\n      case Command.merkleblock:\n        payload = value.payload.serializeWire();\n        break;\n      case Command.notfound:\n        break;\n      case Command.ping:\n        break;\n      case Command.pong:\n        break;\n      case Command.reject:\n        break;\n      default:\n        utils.assertNever(value);\n        throw new InvalidFormatError('Command does not exist');\n    }\n\n    writer.writeUInt32LE(payload.length);\n    writer.writeUInt32LE(calculateChecksum(payload));\n    writer.writeBytes(payload);\n  }\n}\n\nexport const InvalidMessageTransformEncodingError = makeErrorWithCode(\n  'INVALID_MESSAGE_TRANSFORM_ENCODING',\n  (message: string) => message,\n);\n\nconst SIZE_OF_MESSAGE_HEADER =\n  IOHelper.sizeOfUInt32LE +\n  IOHelper.sizeOfFixedString(COMMAND_LENGTH) +\n  IOHelper.sizeOfUInt32LE +\n  IOHelper.sizeOfUInt32LE;\n\nexport class MessageTransform extends Transform {\n  public readonly context: DeserializeWireContext;\n  public mutableBuffer: Buffer;\n\n  public constructor(context: DeserializeWireContext) {\n    super({ readableObjectMode: true });\n    this.context = context;\n    this.mutableBuffer = Buffer.from([]);\n  }\n\n  public _transform(\n    chunk: Buffer | string,\n    encoding: string,\n    callback: (error: Error | undefined, data?: Buffer | string) => void,\n  ): void {\n    if (typeof chunk === 'string') {\n      throw new InvalidMessageTransformEncodingError(\n        `Invalid Message Transform Chunk Type. Expected chunk type to be 'string', found: ${typeof chunk}`,\n      );\n    }\n    if (encoding !== 'buffer') {\n      throw new InvalidMessageTransformEncodingError(\n        `Invalid Message Transform Encoding. Expected: 'buffer', found: ${encoding}`,\n      );\n    }\n\n    this.mutableBuffer = Buffer.concat([this.mutableBuffer, chunk]);\n    try {\n      const { remainingBuffer, mutableMessages } = this.processBuffer(new BinaryReader(this.mutableBuffer));\n\n      this.mutableBuffer = remainingBuffer;\n      mutableMessages.forEach((message) => this.push(message));\n      callback(undefined);\n    } catch (error) {\n      callback(error);\n    }\n  }\n\n  private processBuffer(\n    reader: BinaryReader,\n  ): {\n    readonly remainingBuffer: Buffer;\n    readonly mutableMessages: Message[];\n  } {\n    if (reader.remaining < SIZE_OF_MESSAGE_HEADER) {\n      return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n    }\n\n    const { length } = deserializeMessageHeader({\n      context: this.context,\n      reader: reader.clone(),\n    });\n\n    if (reader.remaining < SIZE_OF_MESSAGE_HEADER + length) {\n      return { remainingBuffer: reader.remainingBuffer, mutableMessages: [] };\n    }\n\n    const message = Message.deserializeWireBase({\n      context: this.context,\n      reader,\n    });\n\n    const { remainingBuffer, mutableMessages } = this.processBuffer(reader);\n    mutableMessages.push(message);\n\n    return { remainingBuffer, mutableMessages };\n  }\n}\n","import { BinaryWriter, UInt256 } from '@neo-one/client-common';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableWire,\n  SerializeWire,\n} from '../Serializable';\nimport { BinaryReader } from '../utils';\nimport { ConsensusMessage, deserializeConsensusMessageWire } from './message';\n\nexport interface UnsignedConsensusPayloadAdd {\n  readonly version: number;\n  readonly previousHash: UInt256;\n  readonly blockIndex: number;\n  readonly validatorIndex: number;\n  readonly timestamp?: number;\n  readonly consensusMessage: ConsensusMessage;\n}\n\nexport class UnsignedConsensusPayload implements SerializableWire<UnsignedConsensusPayload> {\n  public static readonly deserializeUnsignedConsensusPayloadWireBase = (options: DeserializeWireBaseOptions) => {\n    const { reader } = options;\n    const version = reader.readUInt32LE();\n    const previousHash = reader.readUInt256();\n    const blockIndex = reader.readUInt32LE();\n    const validatorIndex = reader.readUInt16LE();\n    const timestamp = reader.readUInt32LE();\n    const messageBytes = reader.readVarBytesLE();\n    const consensusMessage = deserializeConsensusMessageWire({\n      context: options.context,\n      buffer: messageBytes,\n    });\n\n    return {\n      version,\n      previousHash,\n      blockIndex,\n      validatorIndex,\n      timestamp,\n      consensusMessage,\n    };\n  };\n\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): UnsignedConsensusPayload {\n    return new this(this.deserializeUnsignedConsensusPayloadWireBase(options));\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): UnsignedConsensusPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly version: number;\n  public readonly previousHash: UInt256;\n  public readonly blockIndex: number;\n  public readonly validatorIndex: number;\n  public readonly timestamp: number;\n  public readonly consensusMessage: ConsensusMessage;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({\n    version,\n    previousHash,\n    blockIndex,\n    validatorIndex,\n    timestamp,\n    consensusMessage,\n  }: UnsignedConsensusPayloadAdd) {\n    this.version = version;\n    this.previousHash = previousHash;\n    this.blockIndex = blockIndex;\n    this.validatorIndex = validatorIndex;\n    this.timestamp = timestamp === undefined ? commonUtils.nowSeconds() : timestamp;\n    this.consensusMessage = consensusMessage;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt32LE(this.version);\n    writer.writeUInt256(this.previousHash);\n    writer.writeUInt32LE(this.blockIndex);\n    writer.writeUInt16LE(this.validatorIndex);\n    writer.writeUInt32LE(this.timestamp);\n    writer.writeVarBytesLE(this.consensusMessage.serializeWire());\n  }\n}\n","import { BinaryWriter, InvalidFormatError } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions } from '../../Serializable';\nimport { ConsensusMessageBase, ConsensusMessageBaseAdd } from './ConsensusMessageBase';\nimport { ConsensusMessageType } from './ConsensusMessageType';\n\nexport interface ChangeViewAdd extends ConsensusMessageBaseAdd {\n  readonly newViewNumber: number;\n}\n\nexport class ChangeViewConsensusMessage extends ConsensusMessageBase<\n  ChangeViewConsensusMessage,\n  ConsensusMessageType.ChangeView\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): ChangeViewConsensusMessage {\n    const { reader } = options;\n    const message = super.deserializeConsensusMessageBaseWireBase(options);\n    const newViewNumber = reader.readUInt8();\n    if (newViewNumber === 0) {\n      throw new InvalidFormatError(`Expected BinaryReader\\'s readUInt8(0) to be 0. Received: ${newViewNumber}`);\n    }\n\n    return new this({\n      viewNumber: message.viewNumber,\n      newViewNumber,\n    });\n  }\n\n  public readonly newViewNumber: number;\n\n  public constructor({ viewNumber, newViewNumber }: ChangeViewAdd) {\n    const options = {\n      // tslint:disable-next-line no-useless-cast\n      type: ConsensusMessageType.ChangeView as ConsensusMessageType.ChangeView,\n      viewNumber,\n    };\n    super(options);\n\n    this.newViewNumber = newViewNumber;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt8(this.newViewNumber);\n  }\n}\n","import { BinaryWriter, common, InvalidFormatError, UInt160, UInt256 } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { DeserializeWireBaseOptions } from '../../Serializable';\nimport { MinerTransaction } from '../../transaction';\nimport { ConsensusMessageBase, ConsensusMessageBaseAdd } from './ConsensusMessageBase';\nimport { ConsensusMessageType } from './ConsensusMessageType';\n\nexport interface PrepareRequestAdd extends ConsensusMessageBaseAdd {\n  readonly nonce: BN;\n  readonly nextConsensus: UInt160;\n  readonly transactionHashes: readonly UInt256[];\n  readonly minerTransaction: MinerTransaction;\n  readonly signature: Buffer;\n}\n\nexport class PrepareRequestConsensusMessage extends ConsensusMessageBase<\n  PrepareRequestConsensusMessage,\n  ConsensusMessageType.PrepareRequest\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): PrepareRequestConsensusMessage {\n    const { reader } = options;\n    const message = super.deserializeConsensusMessageBaseWireBase(options);\n    const nonce = reader.readUInt64LE();\n    const nextConsensus = reader.readUInt160();\n    const transactionHashes = reader.readArray(() => reader.readUInt256());\n    const distinctTransactionHashes = new Set(transactionHashes.map((hash) => common.uInt256ToString(hash)));\n\n    if (distinctTransactionHashes.size !== transactionHashes.length) {\n      throw new InvalidFormatError(\n        `Distinct hashes: ${distinctTransactionHashes.size} ` + `Transaction hashes: ${transactionHashes.length}`,\n      );\n    }\n    const minerTransaction = MinerTransaction.deserializeWireBase(options);\n    if (!common.uInt256Equal(minerTransaction.hash, transactionHashes[0])) {\n      throw new InvalidFormatError(\n        `Expected minerTransaction hash (${minerTransaction.hash}) to equal first transaction hash (${transactionHashes[0]})`,\n      );\n    }\n    const signature = reader.readBytes(64);\n\n    return new this({\n      viewNumber: message.viewNumber,\n      nonce,\n      nextConsensus,\n      transactionHashes,\n      minerTransaction,\n      signature,\n    });\n  }\n\n  public readonly nonce: BN;\n  public readonly nextConsensus: UInt160;\n  public readonly transactionHashes: readonly UInt256[];\n  public readonly minerTransaction: MinerTransaction;\n  public readonly signature: Buffer;\n\n  public constructor({\n    viewNumber,\n    nonce,\n    nextConsensus,\n    transactionHashes,\n    minerTransaction,\n    signature,\n  }: PrepareRequestAdd) {\n    const options = {\n      // tslint:disable-next-line no-useless-cast\n      type: ConsensusMessageType.PrepareRequest as ConsensusMessageType.PrepareRequest,\n      viewNumber,\n    };\n    super(options);\n\n    this.nonce = nonce;\n    this.nextConsensus = nextConsensus;\n    this.transactionHashes = transactionHashes;\n    this.minerTransaction = minerTransaction;\n    this.signature = signature;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt64LE(this.nonce);\n    writer.writeUInt160(this.nextConsensus);\n    writer.writeArray(this.transactionHashes, (value) => {\n      writer.writeUInt256(value);\n    });\n    this.minerTransaction.serializeWireBase(writer);\n    writer.writeBytes(this.signature);\n  }\n}\n","import { BinaryWriter } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions } from '../../Serializable';\nimport { ConsensusMessageBase, ConsensusMessageBaseAdd } from './ConsensusMessageBase';\nimport { ConsensusMessageType } from './ConsensusMessageType';\n\nexport interface PrepareResponseAdd extends ConsensusMessageBaseAdd {\n  readonly signature: Buffer;\n}\n\nexport class PrepareResponseConsensusMessage extends ConsensusMessageBase<\n  PrepareResponseConsensusMessage,\n  ConsensusMessageType.PrepareResponse\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): PrepareResponseConsensusMessage {\n    const { reader } = options;\n    const message = super.deserializeConsensusMessageBaseWireBase(options);\n    const signature = reader.readBytes(64);\n\n    return new this({\n      viewNumber: message.viewNumber,\n      signature,\n    });\n  }\n\n  public readonly signature: Buffer;\n\n  public constructor({ viewNumber, signature }: PrepareResponseAdd) {\n    const options = {\n      // tslint:disable-next-line no-useless-cast\n      type: ConsensusMessageType.PrepareResponse as ConsensusMessageType.PrepareResponse,\n      viewNumber,\n    };\n    super(options);\n\n    this.signature = signature;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeBytes(this.signature);\n  }\n}\n","import { makeErrorWithCode } from '@neo-one/utils';\n\nexport enum InventoryType {\n  Transaction = 0x01,\n  Block = 0x02,\n  Consensus = 0xe0,\n}\n\nexport const InvalidInventoryTypeError = makeErrorWithCode(\n  'INVALID_INVENTORY_TYPE',\n  (inventoryType: number) => `Expected inventory type, found: ${inventoryType}`,\n);\n\nconst isInventoryType = (inventoryType: number): inventoryType is InventoryType =>\n  // tslint:disable-next-line strict-type-predicates\n  InventoryType[inventoryType] !== undefined;\n\nexport const assertInventoryType = (inventoryType: number): InventoryType => {\n  if (isInventoryType(inventoryType)) {\n    return inventoryType;\n  }\n\n  throw new InvalidInventoryTypeError(inventoryType);\n};\n","import { Event } from './types';\ntype Item = { readonly type: 'value'; readonly value: Event } | { readonly type: 'error'; readonly error: Error };\ninterface Resolver {\n  readonly resolve: (value: IteratorResult<Event>) => void;\n  readonly reject: (reason: Error) => void;\n}\n\nexport class ConsensusQueue implements AsyncIterator<Event> {\n  private mutableItems: Item[];\n  private mutableResolvers: Resolver[];\n  private mutableDoneInternal: boolean;\n\n  public constructor() {\n    this.mutableItems = [];\n    this.mutableResolvers = [];\n    this.mutableDoneInternal = false;\n  }\n\n  public [Symbol.asyncIterator]() {\n    return this;\n  }\n\n  public async next(): Promise<IteratorResult<Event>> {\n    const item = this.mutableItems.shift();\n    if (item !== undefined) {\n      if (item.type === 'error') {\n        return Promise.reject(item.error);\n      }\n\n      return Promise.resolve({ done: false, value: item.value });\n    }\n\n    if (this.mutableDoneInternal) {\n      // tslint:disable-next-line no-any\n      return Promise.resolve({ done: true } as any);\n    }\n\n    // tslint:disable-next-line promise-must-complete\n    return new Promise<IteratorResult<Event>>((resolve, reject) => {\n      this.mutableResolvers.push({ resolve, reject });\n    });\n  }\n\n  public write(value: Event): void {\n    let pushTimer = false;\n    if (value.type === 'handlePersistBlock') {\n      pushTimer = this.mutableItems.some((item) => item.type === 'value' && item.value.type === 'timer');\n      this.clear();\n    }\n\n    this.push({ type: 'value', value });\n    if (pushTimer) {\n      this.push({ type: 'value', value: { type: 'timer' } });\n    }\n  }\n\n  public error(error: Error): void {\n    this.push({ type: 'error', error });\n  }\n\n  public clear(): void {\n    this.mutableItems = [];\n  }\n\n  public done(): void {\n    this.clear();\n    // tslint:disable-next-line no-any\n    this.mutableResolvers.forEach(({ resolve }) => resolve({ done: true } as any));\n    this.mutableResolvers = [];\n    this.mutableDoneInternal = true;\n  }\n\n  private push(item: Item): void {\n    if (this.mutableDoneInternal) {\n      throw new Error('ConsensusQueue already ended');\n    }\n\n    const resolver = this.mutableResolvers.shift();\n    if (resolver !== undefined) {\n      const { resolve, reject } = resolver;\n      if (item.type === 'error') {\n        reject(item.error);\n      } else {\n        resolve({ done: false, value: item.value });\n      }\n    } else {\n      this.mutableItems.push(item);\n    }\n  }\n}\n","import { utils } from '@neo-one/utils';\n\nexport class ConsensusContext {\n  private mutableFastForwardSeconds: number;\n\n  public constructor() {\n    this.mutableFastForwardSeconds = 0;\n  }\n\n  public nowSeconds(): number {\n    return utils.nowSeconds() + this.mutableFastForwardSeconds;\n  }\n\n  public fastForwardOffset(seconds: number) {\n    if (seconds >= 0) {\n      this.mutableFastForwardSeconds += seconds;\n    } else {\n      throw new Error('Can only fast forward to future time.');\n    }\n  }\n\n  public fastForwardToTime(seconds: number) {\n    this.fastForwardOffset(seconds - this.nowSeconds());\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { BN } from 'bn.js';\nimport { common, ECPoint, ECPointHex, UInt160, UInt160Hex, UInt256, UInt256Hex } from './common';\n\n// tslint:disable-next-line variable-name\nexport const JSONHelper = {\n  writeUInt64LE: (value: BN): string => value.toString(16, 16),\n  readUInt64LE: (value: string): BN => new BN(value, 16),\n  writeUInt64: (value: BN): string => value.toString(10),\n  readUInt64: (value: string): BigNumber => new BigNumber(value),\n  writeUInt160: (value: UInt160 | UInt160Hex): string => common.uInt160ToString(value),\n  readUInt160: (hash: string): UInt160 => common.stringToUInt160(hash),\n  writeUInt256: (value: UInt256 | UInt256Hex): string => common.uInt256ToString(value),\n  readUInt256: (hash: string): UInt256 => common.stringToUInt256(hash),\n  writeFixed8: (value: BN): string => common.fixed8ToDecimal(value).toString(),\n  readFixed8: (value: string): BN => common.fixed8FromDecimal(new BigNumber(value)),\n  writeECPoint: (value: ECPoint | ECPointHex): string => common.ecPointToString(value),\n  readECPoint: (value: string): ECPoint => common.stringToECPoint(value),\n  writeBuffer: (value: Buffer): string => value.toString('hex'),\n  readBuffer: (value: string): Buffer => Buffer.from(value, 'hex'),\n};\n","import { Context } from './Context';\n\nexport class InitialContext extends Context<InitialContext> {\n  public cloneExpectedView({ expectedView }: { readonly expectedView: readonly number[] }): InitialContext {\n    return new InitialContext({\n      type: this.type,\n      previousHash: this.previousHash,\n      blockIndex: this.blockIndex,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n    });\n  }\n}\n","import { HeaderContext } from './HeaderContext';\nimport { RequestSentContext } from './RequestSentContext';\nimport { Type } from './types';\n\nexport class SignatureSentContext extends HeaderContext<SignatureSentContext> {\n  public clone({\n    type,\n    primaryIndex,\n    viewNumber,\n  }: {\n    readonly type: Type;\n    readonly primaryIndex: number;\n    readonly viewNumber: number;\n  }): SignatureSentContext {\n    return new SignatureSentContext({\n      type,\n      viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex,\n      expectedView: this.expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures: this.signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n\n  public cloneExpectedView({ expectedView }: { readonly expectedView: readonly number[] }): SignatureSentContext {\n    return new SignatureSentContext({\n      type: this.type,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures: this.signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n\n  public cloneSignatures({\n    signatures,\n  }: {\n    readonly signatures: ReadonlyArray<Buffer | undefined>;\n  }): SignatureSentContext {\n    return new SignatureSentContext({\n      type: this.type,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView: this.expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n\n  public cloneRequestSent(): RequestSentContext {\n    return new RequestSentContext({\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView: this.expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures: this.signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n}\n","import { ECPoint, UInt160, UInt256, UInt256Hex } from '@neo-one/client-common';\nimport { Block } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport { HeaderContext } from './HeaderContext';\nimport { Transactions } from './types';\n\ninterface RequestSentContextAdd {\n  readonly viewNumber: number;\n  readonly myIndex: number;\n  readonly primaryIndex: number;\n  readonly expectedView: readonly number[];\n  readonly validators: readonly ECPoint[];\n  readonly blockReceivedTimeSeconds: number;\n  readonly transactions: Transactions;\n  readonly signatures: ReadonlyArray<Buffer | undefined>;\n  readonly header:\n    | {\n        readonly type: 'new';\n        readonly previousHash: UInt256;\n        readonly transactionHashes: readonly UInt256Hex[];\n        readonly blockIndex: number;\n        readonly nonce: BN;\n        readonly timestamp: number;\n        readonly nextConsensus: UInt160;\n      }\n    | {\n        readonly type: 'existing';\n        readonly block: Block;\n        readonly transactionHashes: readonly UInt256Hex[];\n      };\n}\n\nexport class RequestSentContext extends HeaderContext<RequestSentContext> {\n  public constructor({\n    viewNumber,\n    myIndex,\n    primaryIndex,\n    expectedView,\n    validators,\n    blockReceivedTimeSeconds,\n    transactions,\n    signatures,\n    header,\n  }: RequestSentContextAdd) {\n    super({\n      type: 'primary',\n      viewNumber,\n      myIndex,\n      primaryIndex,\n      expectedView,\n      validators,\n      blockReceivedTimeSeconds,\n      transactions,\n      signatures,\n      header,\n    });\n  }\n\n  public cloneExpectedView({ expectedView }: { readonly expectedView: readonly number[] }): RequestSentContext {\n    return new RequestSentContext({\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures: this.signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n\n  public cloneSignatures({\n    signatures,\n  }: {\n    readonly signatures: ReadonlyArray<Buffer | undefined>;\n  }): RequestSentContext {\n    return new RequestSentContext({\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView: this.expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n}\n","import { Context } from './Context';\n\nexport class BlockSentContext extends Context<BlockSentContext> {\n  public cloneExpectedView({ expectedView }: { readonly expectedView: readonly number[] }): BlockSentContext {\n    return new BlockSentContext({\n      type: this.type,\n      previousHash: this.previousHash,\n      blockIndex: this.blockIndex,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n    });\n  }\n}\n","import { ECPoint } from '@neo-one/client-common';\nimport { Blockchain } from '@neo-one/node-core';\nimport { initializeNewConsensus } from './common';\nimport { ConsensusContext } from './ConsensusContext';\nimport { InitialContext } from './context';\nimport { Result } from './types';\n\nexport const handlePersistBlock = async ({\n  blockchain,\n  publicKey,\n  consensusContext,\n}: {\n  readonly blockchain: Blockchain;\n  readonly publicKey: ECPoint;\n  readonly consensusContext: ConsensusContext;\n}): Promise<Result<InitialContext>> =>\n  initializeNewConsensus({\n    blockchain,\n    publicKey,\n    consensusContext,\n  });\n","import { common, crypto, PrivateKey } from '@neo-one/client-common';\nimport {\n  ChangeViewConsensusMessage,\n  ConsensusMessageType,\n  ConsensusPayload,\n  Node,\n  PrepareRequestConsensusMessage,\n  PrepareResponseConsensusMessage,\n  Transaction,\n} from '@neo-one/node-core';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport { addTransaction, checkExpectedView, checkSignatures, initializeConsensus } from './common';\nimport { ConsensusContext } from './ConsensusContext';\nimport { Context, HeaderContext, RequestReceivedContext } from './context';\nimport { Result } from './types';\n\nconst handleChangeView = ({\n  context: contextIn,\n  node,\n  payload,\n  consensusContext,\n  message,\n}: {\n  readonly context: Context;\n  readonly node: Node;\n  readonly payload: ConsensusPayload;\n  readonly consensusContext: ConsensusContext;\n  readonly message: ChangeViewConsensusMessage;\n}): Result<Context> => {\n  let context = contextIn;\n  const viewNumber = message.newViewNumber;\n  if (viewNumber > context.expectedView[payload.validatorIndex]) {\n    const mutableExpectedView = [...context.expectedView];\n    mutableExpectedView[payload.validatorIndex] = viewNumber;\n    context = context.cloneExpectedView({ expectedView: mutableExpectedView });\n    if (checkExpectedView({ context, viewNumber })) {\n      return initializeConsensus({\n        node,\n        context,\n        viewNumber,\n        consensusContext,\n      });\n    }\n  }\n\n  return { context };\n};\n\nconst TEN_MINUTES_IN_SECONDS = 10 * 60;\n\nconst handlePrepareRequest = async ({\n  context: contextIn,\n  node,\n  privateKey,\n  payload,\n  consensusContext,\n  message,\n}: {\n  readonly context: Context;\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly payload: ConsensusPayload;\n  readonly consensusContext: ConsensusContext;\n  readonly message: PrepareRequestConsensusMessage;\n}): Promise<Result<Context>> => {\n  let context = contextIn;\n  if (\n    context.type !== 'backup' ||\n    context instanceof RequestReceivedContext ||\n    payload.validatorIndex !== context.primaryIndex ||\n    payload.timestamp > consensusContext.nowSeconds() + TEN_MINUTES_IN_SECONDS\n  ) {\n    return { context };\n  }\n  const header = await node.blockchain.header.get({\n    hashOrIndex: context.previousHash,\n  });\n\n  if (payload.timestamp <= header.timestamp) {\n    return { context };\n  }\n\n  const mutableSignatures = [];\n  mutableSignatures[payload.validatorIndex] = message.signature;\n  const newContext = new RequestReceivedContext({\n    viewNumber: context.viewNumber,\n    myIndex: context.myIndex,\n    primaryIndex: context.primaryIndex,\n    expectedView: context.expectedView,\n    validators: context.validators,\n    blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n    transactions: {},\n    signatures: mutableSignatures,\n    header: {\n      type: 'new',\n      previousHash: context.previousHash,\n      transactionHashes: message.transactionHashes.map((hash) => common.uInt256ToHex(hash)),\n\n      blockIndex: context.blockIndex,\n      nonce: message.nonce,\n      timestamp: payload.timestamp,\n      nextConsensus: message.nextConsensus,\n    },\n  });\n\n  const verified = crypto.verify({\n    message: newContext.header.message,\n    signature: message.signature,\n    publicKey: context.validators[payload.validatorIndex],\n  });\n\n  if (!verified) {\n    return { context };\n  }\n\n  let nextContext = newContext;\n  // tslint:disable-next-line no-loop-statement\n  for (const hash of newContext.transactionHashes.slice(1)) {\n    const transaction = node.memPool[hash] as Transaction | undefined;\n    if (transaction !== undefined) {\n      const res = await addTransaction({\n        context: nextContext,\n        node,\n        privateKey,\n        transaction,\n        verify: false,\n        consensusContext,\n      });\n\n      if (!(res.context instanceof RequestReceivedContext)) {\n        return res;\n      }\n      // eslint-disable-next-line\n      nextContext = res.context;\n    }\n  }\n\n  const result = await addTransaction({\n    context: nextContext,\n    node,\n    privateKey,\n    transaction: message.minerTransaction,\n    verify: true,\n    consensusContext,\n  });\n\n  if (!(result.context instanceof RequestReceivedContext)) {\n    return result;\n  }\n  // eslint-disable-next-line\n  context = result.context;\n  node.syncMemPool();\n\n  return { context };\n};\n\nconst handlePrepareResponse = async ({\n  context,\n  node,\n  payload,\n  message,\n}: {\n  readonly context: Context;\n  readonly node: Node;\n  readonly payload: ConsensusPayload;\n  readonly message: PrepareResponseConsensusMessage;\n}): Promise<Result<Context>> => {\n  if (\n    context instanceof HeaderContext &&\n    context.signatures[payload.validatorIndex] === undefined &&\n    crypto.verify({\n      message: context.header.message,\n      signature: message.signature,\n      publicKey: context.validators[payload.validatorIndex],\n    })\n  ) {\n    const mutableSignatures = [...context.signatures];\n    mutableSignatures[payload.validatorIndex] = message.signature;\n    const newContext = context.cloneSignatures({ signatures: mutableSignatures });\n\n    return checkSignatures({ context: newContext, node });\n  }\n\n  return { context };\n};\n\nexport const handleConsensusPayload = async ({\n  context,\n  node,\n  privateKey,\n  payload,\n  consensusContext,\n}: {\n  readonly context: Context;\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly payload: ConsensusPayload;\n  readonly consensusContext: ConsensusContext;\n}): Promise<Result<Context>> => {\n  const { consensusMessage } = payload;\n  if (\n    payload.validatorIndex === context.myIndex ||\n    payload.version !== context.version ||\n    !common.uInt256Equal(payload.previousHash, context.previousHash) ||\n    payload.blockIndex !== context.blockIndex ||\n    payload.validatorIndex >= context.validators.length ||\n    (consensusMessage.type !== ConsensusMessageType.ChangeView && consensusMessage.viewNumber !== context.viewNumber)\n  ) {\n    return { context };\n  }\n\n  switch (consensusMessage.type) {\n    case ConsensusMessageType.ChangeView:\n      return handleChangeView({\n        context,\n        node,\n        payload,\n        consensusContext,\n        message: consensusMessage,\n      });\n\n    case ConsensusMessageType.PrepareRequest:\n      return handlePrepareRequest({\n        context,\n        node,\n        privateKey,\n        payload,\n        consensusContext,\n        message: consensusMessage,\n      });\n\n    case ConsensusMessageType.PrepareResponse:\n      return handlePrepareResponse({\n        context,\n        node,\n        payload,\n        message: consensusMessage,\n      });\n\n    default:\n      commonUtils.assertNever(consensusMessage);\n      throw new Error('For TS');\n  }\n};\n","import { ECPoint, UInt256 } from '@neo-one/client-common';\nimport { Context } from './Context';\n\ninterface ViewChangingContextAdd {\n  readonly previousHash: UInt256;\n  readonly blockIndex: number;\n  readonly viewNumber: number;\n  readonly myIndex: number;\n  readonly primaryIndex: number;\n  readonly expectedView: readonly number[];\n  readonly validators: readonly ECPoint[];\n  readonly blockReceivedTimeSeconds: number;\n}\n\nexport class ViewChangingContext extends Context<ViewChangingContext> {\n  public constructor({\n    previousHash,\n    blockIndex,\n    viewNumber,\n    myIndex,\n    primaryIndex,\n    expectedView,\n    validators,\n    blockReceivedTimeSeconds,\n  }: ViewChangingContextAdd) {\n    super({\n      type: 'backup',\n      previousHash,\n      blockIndex,\n      viewNumber,\n      myIndex,\n      primaryIndex,\n      expectedView,\n      validators,\n      blockReceivedTimeSeconds,\n    });\n  }\n\n  public cloneExpectedView({ expectedView }: { readonly expectedView: readonly number[] }): ViewChangingContext {\n    return new ViewChangingContext({\n      previousHash: this.previousHash,\n      blockIndex: this.blockIndex,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n    });\n  }\n}\n","import { PrivateKey } from '@neo-one/client-common';\nimport { Node, Transaction } from '@neo-one/node-core';\nimport { addTransaction } from './common';\nimport { ConsensusContext } from './ConsensusContext';\nimport { Context, RequestReceivedContext } from './context';\nimport { Result } from './types';\n\nexport const handleTransactionReceived = async ({\n  context,\n  node,\n  privateKey,\n  transaction,\n  consensusContext,\n}: {\n  readonly context: Context;\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly transaction: Transaction;\n  readonly consensusContext: ConsensusContext;\n}): Promise<Result<Context>> => {\n  if (\n    !(context instanceof RequestReceivedContext) ||\n    context.transactions[transaction.hashHex] !== undefined ||\n    !context.transactionHashesSet.has(transaction.hashHex)\n  ) {\n    return { context };\n  }\n\n  return addTransaction({\n    context,\n    node,\n    privateKey,\n    transaction,\n    verify: true,\n    consensusContext,\n  });\n};\n","import { common, crypto, PrivateKey, UInt160 } from '@neo-one/client-common';\nimport {\n  Block,\n  MinerTransaction,\n  Node,\n  Output,\n  PrepareRequestConsensusMessage,\n  Transaction,\n  utils,\n} from '@neo-one/node-core';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport BigNumber from 'bignumber.js';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport {\n  checkExpectedView,\n  checkSignatures,\n  incrementExpectedView,\n  initializeConsensusInitial,\n  signAndRelay,\n  signAndRelayChangeView,\n} from './common';\nimport { InternalOptions } from './Consensus';\nimport { ConsensusContext } from './ConsensusContext';\nimport { Context, RequestSentContext, SignatureSentContext } from './context';\nimport { Result } from './types';\n\nconst createMinerTransaction = async ({\n  node,\n  feeAddress,\n  transactions,\n  nonce,\n}: {\n  readonly node: Node;\n  readonly feeAddress: UInt160;\n  readonly transactions: readonly Transaction[];\n  readonly nonce: BN;\n}) => {\n  const networkFee = await Block.calculateNetworkFee(node.blockchain.feeContext, transactions);\n\n  const outputs = networkFee.isZero()\n    ? []\n    : [\n        new Output({\n          asset: node.blockchain.settings.utilityToken.hash,\n          value: networkFee,\n          address: feeAddress,\n        }),\n      ];\n\n  return new MinerTransaction({\n    nonce: nonce.mod(utils.UINT_MAX.addn(1)).toNumber(),\n    outputs,\n  });\n};\n\nconst requestChangeView = ({\n  context: contextIn,\n  node,\n  privateKey,\n  consensusContext,\n}: {\n  readonly context: Context;\n  readonly node: Node;\n  readonly privateKey: PrivateKey;\n  readonly consensusContext: ConsensusContext;\n}): Result<Context> => {\n  let context = contextIn;\n\n  context = context.cloneExpectedView({\n    expectedView: incrementExpectedView(context),\n  });\n\n  signAndRelayChangeView({ context, node, privateKey });\n\n  const viewNumber = context.expectedView[context.myIndex];\n  if (checkExpectedView({ context, viewNumber })) {\n    return initializeConsensusInitial({\n      blockchain: node.blockchain,\n      context,\n      viewNumber,\n      consensusContext,\n    });\n  }\n\n  const { secondsPerBlock } = node.blockchain.settings;\n\n  return {\n    context,\n    // tslint:disable-next-line no-bitwise\n    timerSeconds: secondsPerBlock << (viewNumber + 1),\n  };\n};\n\nexport const runConsensus = async ({\n  context,\n  node,\n  options: { privateKey, feeAddress, privateNet },\n  consensusContext,\n}: {\n  readonly context: Context;\n  readonly node: Node;\n  readonly options: InternalOptions;\n  readonly consensusContext: ConsensusContext;\n}): Promise<Result<Context>> => {\n  if (context.type === 'primary' && !(context instanceof RequestSentContext)) {\n    let requestSentContext: RequestSentContext;\n    if (context instanceof SignatureSentContext) {\n      requestSentContext = context.cloneRequestSent();\n    } else {\n      const nonce = utils.randomUInt64();\n      let mutableTransactions = Object.values(node.memPool);\n      const minerTransaction = await createMinerTransaction({\n        node,\n        feeAddress,\n        transactions: mutableTransactions,\n        nonce,\n      });\n\n      if (mutableTransactions.length >= node.blockchain.settings.maxTransactionsPerBlock) {\n        const mutableNetworkFees = await Promise.all(\n          mutableTransactions.map<Promise<[Transaction, BigNumber]>>(async (transaction) => {\n            const networkFee = await transaction.getNetworkFee(node.blockchain.feeContext);\n\n            return [transaction, new BigNumber(networkFee.toString(10))];\n          }),\n        );\n\n        mutableNetworkFees.sort(([first, a], [second, b]) => b.div(second.size).comparedTo(a.div(first.size)));\n        mutableTransactions = _.take(mutableNetworkFees, node.blockchain.settings.maxTransactionsPerBlock - 1)\n          // tslint:disable-next-line no-unused\n          .map(([transaction, _unused]) => transaction);\n      }\n      mutableTransactions.unshift(minerTransaction);\n      const [previousHeader, validators] = await Promise.all([\n        node.blockchain.header.get({ hashOrIndex: context.previousHash }),\n        node.blockchain.getValidators(mutableTransactions),\n      ]);\n\n      const newContext = new RequestSentContext({\n        viewNumber: context.viewNumber,\n        myIndex: context.myIndex,\n        primaryIndex: context.primaryIndex,\n        expectedView: context.expectedView,\n        validators: context.validators,\n        blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n        transactions: mutableTransactions.reduce<{ [key: string]: Transaction }>(\n          (acc, transaction) => ({\n            ...acc,\n            [transaction.hashHex]: transaction,\n          }),\n          {},\n        ),\n        signatures: [],\n        header: {\n          type: 'new',\n          previousHash: context.previousHash,\n          transactionHashes: mutableTransactions.map((transaction) => transaction.hashHex),\n\n          blockIndex: context.blockIndex,\n          nonce,\n          timestamp: Math.max(consensusContext.nowSeconds(), previousHeader.timestamp + 1),\n\n          nextConsensus: crypto.getConsensusAddress(validators),\n        },\n      });\n\n      const mutableSignatures = [];\n      mutableSignatures[newContext.myIndex] = crypto.sign({\n        message: newContext.header.message,\n        privateKey,\n      });\n\n      requestSentContext = newContext.cloneSignatures({ signatures: mutableSignatures });\n    }\n\n    if (privateNet) {\n      return checkSignatures({ node, context: requestSentContext });\n    }\n\n    signAndRelay({\n      context: requestSentContext,\n      node,\n      privateKey,\n      consensusMessage: new PrepareRequestConsensusMessage({\n        viewNumber: requestSentContext.viewNumber,\n        nonce: requestSentContext.header.consensusData,\n        nextConsensus: requestSentContext.header.nextConsensus,\n        transactionHashes: requestSentContext.transactionHashes.map((hash) => common.hexToUInt256(hash)),\n        minerTransaction: commonUtils.nullthrows(\n          requestSentContext.transactions[requestSentContext.transactionHashes[0]],\n        ) as MinerTransaction,\n        signature: commonUtils.nullthrows(requestSentContext.signatures[requestSentContext.myIndex]),\n      }),\n    });\n\n    const { secondsPerBlock } = node.blockchain.settings;\n\n    return {\n      context: requestSentContext,\n      // tslint:disable-next-line no-bitwise\n      timerSeconds: secondsPerBlock << (requestSentContext.viewNumber + 1),\n    };\n  }\n\n  if (context instanceof RequestSentContext || context.type === 'backup') {\n    return requestChangeView({\n      context,\n      node,\n      privateKey,\n      consensusContext,\n    });\n  }\n\n  return { context };\n};\n","import { ConnectedPeer, Endpoint } from '@neo-one/node-core';\n\nexport class Network<Message, PeerData> {\n  public readonly connectedPeers: ReadonlyArray<ConnectedPeer<Message, PeerData>> = [];\n  public blacklistAndClose(_peer: ConnectedPeer<Message, PeerData>): void {\n    // do nothing\n  }\n  public start(): void {\n    // do nothing\n  }\n  public stop(): void {\n    // do nothing\n  }\n  public relay(_buffer: Buffer): void {\n    // do nothing\n  }\n  public permanentlyBlacklist(_endpoint: Endpoint): void {\n    // do nothing\n  }\n  public addEndpoint(_endpoint: Endpoint): void {\n    // do nothing\n  }\n}\n","// tslint:disable-next-line no-let\nlet id = 0;\n// tslint:disable-next-line export-name\nexport const getNextID = () => {\n  id += 1;\n  /* istanbul ignore next */\n  if (id === Number.MAX_SAFE_INTEGER) {\n    id = 0;\n  }\n\n  return id;\n};\n","import { EquatableKey } from '@neo-one/node-core';\nimport { ObjectStackItem } from './ObjectStackItem';\n\nexport class EquatableKeyStackItem<Value extends EquatableKey> extends ObjectStackItem<Value> {\n  public toStructuralKey(): string {\n    return this.value.toKeyString();\n  }\n  // tslint:disable-next-line no-any\n  public equals(other: any): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    if (this === other) {\n      return true;\n    }\n\n    return other instanceof EquatableKeyStackItem && this.value.equals(other.value);\n  }\n}\n","import { JSONRPCProvider, JSONRPCRequest, JSONRPCResponse } from '@neo-one/client-core';\nimport { FullNode, FullNodeOptions } from './FullNode';\n\n// tslint:disable-next-line no-let\nlet startPromise: Promise<FullNode> | undefined;\nconst start = async (options: FullNodeOptions) => {\n  if (startPromise === undefined) {\n    const node = new FullNode(options);\n    startPromise = node.start().then(() => node);\n  }\n\n  return startPromise;\n};\n\nconst handleRequest = async (options: FullNodeOptions, req: JSONRPCRequest) => {\n  const node = await start(options);\n  const { watchTimeoutMS, params = [] } = req;\n\n  return node.handleRequest({\n    jsonrpc: '2.0',\n    id: 1,\n    method: req.method,\n    params: watchTimeoutMS === undefined ? params : params.concat([watchTimeoutMS]),\n  });\n};\n\nexport interface JSONRPCLocalProviderOptions {\n  readonly id: string;\n}\n\nexport class JSONRPCLocalProvider extends JSONRPCProvider {\n  public constructor(private readonly options: FullNodeOptions) {\n    super();\n  }\n\n  public async request(req: JSONRPCRequest): Promise<JSONRPCResponse> {\n    // Something weird with comlink causes the property to be wrapped in a function, so we do this as a workaround.\n    const options = await this.getOptions();\n    const response = await handleRequest(options, req);\n\n    return this.handleResponse(response);\n  }\n\n  private async getOptions(): Promise<FullNodeOptions> {\n    return this.options;\n  }\n}\n","import { Observable, Observer } from 'rxjs';\nimport { utils } from './utils';\n\n// tslint:disable-next-line no-let\nlet currentID = 0;\nconst getID = () => {\n  const result = currentID;\n  currentID += 1;\n\n  return result;\n};\n\nexport function finalize<T>(\n  func: (value: T | undefined) => Promise<void> | void,\n): (source$: Observable<T>) => Observable<T> {\n  return (source$) =>\n    new Observable((observer: Observer<T>) => {\n      let lastValue: T | undefined;\n      const subscription = source$.subscribe({\n        next: (value) => {\n          lastValue = value;\n          observer.next(value);\n        },\n        error: (error) => observer.error(error),\n        complete: () => observer.complete(),\n      });\n      subscription.add(() => {\n        const result = func(lastValue);\n        if (utils.isPromise(result)) {\n          const id = getID();\n          let deleted = false;\n          const promise = result.then(() => {\n            deleted = true;\n            finalize.shutdownPromises.delete(id);\n          });\n          if (!deleted) {\n            finalize.shutdownPromises.set(id, promise);\n          }\n        }\n      });\n\n      return subscription;\n    });\n}\n\nexport namespace finalize {\n  export const shutdownPromises = new Map<number, Promise<void>>();\n  export const wait = async () => {\n    const promises = [...shutdownPromises.values()];\n    shutdownPromises.clear();\n    if (promises.length === 0) {\n      return;\n    }\n\n    await Promise.all(promises);\n    await wait();\n  };\n}\n","import { common as clientCommon, crypto, UInt160 } from '@neo-one/client-common';\nimport { Settings, TransactionType } from '@neo-one/node-core';\nimport { common } from './common';\n\nconst DEFAULT_VALIDATORS: readonly string[] = [\n  '03b209fd4f53a7170ea4444e0cb0a6bb6a53c2bd016926989cf85f9b0fba17a70c',\n  '02df48f60e8f3e01c48ff40b9b7f1310d7a8b2a193188befe1c2e3df740e895093',\n  '03b8d9d5771d8f513aa0869b9cc8d50986403b78c6da36890638c3d46a5adce04a',\n  '02ca0e27697b9c248f6f16e085fd0061e26f44da85b58ee835c110caa5ec3ba554',\n  '024c7b7fb6c310fccf1ba33b082519d82964ea93868d676662d4a59ad548df0e7d',\n  '02aaec38470f6aad0042c6e877cfd8087d2676b0f516fddd362801b9bd3936399e',\n  '02486fd15702c4490a26703112a5cc1d0923fd697a33406bd5a1c00e0013b09a70',\n];\n\nexport const createMain = ({\n  privateNet = false,\n  standbyValidators: standbyValidatorsIn = DEFAULT_VALIDATORS,\n  secondsPerBlock,\n  address: addressIn,\n}: {\n  readonly privateNet?: boolean;\n  readonly secondsPerBlock?: number;\n  readonly standbyValidators?: readonly string[];\n  readonly address?: string;\n} = {}): Settings => {\n  const standbyValidators = standbyValidatorsIn.map((value) => clientCommon.stringToECPoint(value));\n\n  const consensusAddress =\n    standbyValidatorsIn === DEFAULT_VALIDATORS\n      ? clientCommon.asUInt160(Buffer.from('59e75d652b5d3827bf04c165bbe9ef95cca4bf55', 'hex'))\n      : crypto.getConsensusAddress(standbyValidators);\n  let address: UInt160;\n  if (addressIn === undefined) {\n    address =\n      standbyValidatorsIn === DEFAULT_VALIDATORS\n        ? clientCommon.asUInt160(Buffer.from('5fa99d93303775fe50ca119c327759313eccfa1c', 'hex'))\n        : crypto.toScriptHash(\n            crypto.createMultiSignatureVerificationScript(standbyValidators.length / 2 + 1, standbyValidators),\n          );\n  } else {\n    address = clientCommon.stringToUInt160(addressIn);\n  }\n\n  const commonSettings = common({\n    privateNet,\n    consensusAddress,\n    address,\n  });\n\n  return {\n    genesisBlock: commonSettings.genesisBlock,\n    governingToken: commonSettings.governingToken,\n    utilityToken: commonSettings.utilityToken,\n    decrementInterval: commonSettings.decrementInterval,\n    generationAmount: commonSettings.generationAmount,\n    secondsPerBlock: secondsPerBlock === undefined ? commonSettings.secondsPerBlock : secondsPerBlock,\n    maxTransactionsPerBlock: commonSettings.maxTransactionsPerBlock,\n    memPoolSize: commonSettings.memPoolSize,\n    fees: {\n      [TransactionType.Enrollment]: clientCommon.fixed8FromDecimal(1000),\n      [TransactionType.Issue]: clientCommon.fixed8FromDecimal(500),\n      [TransactionType.Publish]: clientCommon.fixed8FromDecimal(500),\n      [TransactionType.Register]: clientCommon.fixed8FromDecimal(10000),\n    },\n\n    registerValidatorFee: clientCommon.fixed8FromDecimal(1000),\n    messageMagic: 7630401,\n    addressVersion: clientCommon.NEO_ADDRESS_VERSION,\n    privateKeyVersion: clientCommon.NEO_PRIVATE_KEY_VERSION,\n    standbyValidators,\n    vm: {\n      storageContext: {\n        v0: {\n          index: 0,\n        },\n      },\n    },\n  };\n};\n","import { assertAttributeUsage } from '@neo-one/client-common';\nimport { utils } from '@neo-one/utils';\nimport { createDeserializeWire, DeserializeWireBaseOptions } from '../../Serializable';\nimport { AttributeUsage } from './AttributeUsage';\nimport { BufferAttribute } from './BufferAttribute';\nimport { ECPointAttribute } from './ECPointAttribute';\nimport { UInt160Attribute } from './UInt160Attribute';\nimport { UInt256Attribute } from './UInt256Attribute';\n\nexport type Attribute = BufferAttribute | ECPointAttribute | UInt160Attribute | UInt256Attribute;\n\nexport const deserializeAttributeWireBase = (options: DeserializeWireBaseOptions): Attribute => {\n  const { reader } = options;\n  const usage = assertAttributeUsage(reader.clone().readUInt8());\n  switch (usage) {\n    case AttributeUsage.Script:\n      return UInt160Attribute.deserializeWireBase(options);\n    case AttributeUsage.ContractHash:\n    case AttributeUsage.Vote:\n    case AttributeUsage.Hash1:\n    case AttributeUsage.Hash2:\n    case AttributeUsage.Hash3:\n    case AttributeUsage.Hash4:\n    case AttributeUsage.Hash5:\n    case AttributeUsage.Hash6:\n    case AttributeUsage.Hash7:\n    case AttributeUsage.Hash8:\n    case AttributeUsage.Hash9:\n    case AttributeUsage.Hash10:\n    case AttributeUsage.Hash11:\n    case AttributeUsage.Hash12:\n    case AttributeUsage.Hash13:\n    case AttributeUsage.Hash14:\n    case AttributeUsage.Hash15:\n      return UInt256Attribute.deserializeWireBase(options);\n    case AttributeUsage.ECDH02:\n    case AttributeUsage.ECDH03:\n      return ECPointAttribute.deserializeWireBase(options);\n    case AttributeUsage.DescriptionUrl:\n    case AttributeUsage.Description:\n    case AttributeUsage.Remark:\n    case AttributeUsage.Remark1:\n    case AttributeUsage.Remark2:\n    case AttributeUsage.Remark3:\n    case AttributeUsage.Remark4:\n    case AttributeUsage.Remark5:\n    case AttributeUsage.Remark6:\n    case AttributeUsage.Remark7:\n    case AttributeUsage.Remark8:\n    case AttributeUsage.Remark9:\n    case AttributeUsage.Remark10:\n    case AttributeUsage.Remark11:\n    case AttributeUsage.Remark12:\n    case AttributeUsage.Remark13:\n    case AttributeUsage.Remark14:\n    case AttributeUsage.Remark15:\n      return BufferAttribute.deserializeWireBase(options);\n    default:\n      utils.assertNever(usage);\n      throw new Error('For TS');\n  }\n};\n\nexport const deserializeAttributeWire = createDeserializeWire(deserializeAttributeWireBase);\n","// tslint:disable readonly-keyword no-object-mutation no-array-mutation\nimport { common, crypto, UInt256 } from '@neo-one/client-common';\nimport { makeErrorWithCode } from '@neo-one/utils';\n\nexport const InvalidMerkleTreeException = makeErrorWithCode(\n  'INVALID_MERKLE_TREE',\n  () => 'Invalid Merkle tree. (no nodes found)',\n);\n\nclass MerkleTreeNode {\n  public readonly hash: UInt256;\n  public leftChild: MerkleTreeNode | undefined;\n  public rightChild: MerkleTreeNode | undefined;\n  public parent: MerkleTreeNode | undefined;\n\n  public constructor({\n    hash,\n    leftChild,\n    rightChild,\n    parent,\n  }: {\n    readonly hash: UInt256;\n    readonly leftChild?: MerkleTreeNode;\n    readonly rightChild?: MerkleTreeNode;\n    readonly parent?: MerkleTreeNode;\n  }) {\n    this.hash = hash;\n    this.leftChild = leftChild;\n    this.rightChild = rightChild;\n    this.parent = parent;\n  }\n\n  public clone(parent?: MerkleTreeNode): MerkleTreeNode {\n    const self = new MerkleTreeNode({\n      hash: this.hash,\n      parent,\n    });\n\n    if (this.leftChild !== undefined) {\n      self.leftChild = this.leftChild.clone(self);\n    }\n    if (this.rightChild !== undefined) {\n      self.rightChild = this.rightChild.clone(self);\n    }\n\n    return self;\n  }\n}\n\nconst build = (leavesIn: readonly MerkleTreeNode[]): MerkleTreeNode => {\n  const leaves = leavesIn;\n  if (leaves.length === 0) {\n    throw new InvalidMerkleTreeException();\n  }\n  if (leaves.length === 1) {\n    return leaves[0];\n  }\n\n  const parents = [];\n  const length = Math.floor((leaves.length + 1) / 2);\n  // tslint:disable-next-line no-loop-statement\n  for (let i = 0; i < length; i += 1) {\n    const leftChild = leaves[i * 2];\n\n    const rightChild = i * 2 + 1 === leaves.length ? leftChild : leaves[i * 2 + 1];\n    const node = new MerkleTreeNode({\n      hash: crypto.hash256(\n        Buffer.concat([common.uInt256ToBuffer(leftChild.hash), common.uInt256ToBuffer(rightChild.hash)]),\n      ),\n      leftChild,\n      rightChild,\n    });\n\n    parents[i] = node;\n    leaves[i * 2].parent = node;\n\n    if (i * 2 + 1 !== leaves.length) {\n      leaves[i * 2 + 1].parent = node;\n    }\n  }\n\n  return build(parents);\n};\n\nconst trim = (node: MerkleTreeNode, index: number, depth: number, flags: readonly boolean[]) => {\n  const { leftChild, rightChild } = node;\n  if (depth === 1 || leftChild === undefined) {\n    return;\n  }\n\n  if (depth === 2) {\n    if (!flags[index * 2] && !flags[index * 2 + 1]) {\n      node.leftChild = undefined;\n      node.rightChild = undefined;\n    }\n  } else if (rightChild !== undefined) {\n    trim(leftChild, index * 2, depth - 1, flags);\n    trim(rightChild, index * 2 + 1, depth - 1, flags);\n    if (leftChild.leftChild === undefined && rightChild.rightChild === undefined) {\n      node.leftChild = undefined;\n      node.rightChild = undefined;\n    }\n  }\n};\n\nconst depthFirstSearchWorker = (node: MerkleTreeNode, mutableHashes: UInt256[]): void => {\n  const { leftChild, rightChild } = node;\n  if (leftChild === undefined || rightChild === undefined) {\n    mutableHashes.push(node.hash);\n  } else {\n    depthFirstSearchWorker(leftChild, mutableHashes);\n    depthFirstSearchWorker(rightChild, mutableHashes);\n  }\n};\n\nconst depthFirstSearch = (node: MerkleTreeNode): readonly UInt256[] => {\n  const mutableHashes: UInt256[] = [];\n  depthFirstSearchWorker(node, mutableHashes);\n\n  return mutableHashes;\n};\n\nexport class MerkleTree {\n  public static computeRoot(hashes: readonly UInt256[]): UInt256 {\n    const tree = new this(hashes);\n\n    return tree.root.hash;\n  }\n\n  public readonly root: MerkleTreeNode;\n  public readonly depth: number;\n\n  public constructor(hashesOrNode: readonly UInt256[] | MerkleTreeNode) {\n    this.root = Array.isArray(hashesOrNode)\n      ? build(hashesOrNode.map((hash) => new MerkleTreeNode({ hash })))\n      : (hashesOrNode as MerkleTreeNode);\n    this.depth = 1;\n    // tslint:disable-next-line no-loop-statement no-let\n    for (let node = this.root; node.leftChild !== undefined; node = node.leftChild) {\n      this.depth += 1;\n    }\n  }\n\n  public trim(flags: readonly boolean[]): MerkleTree {\n    const result = this.root.clone();\n    trim(result, 0, this.depth, flags);\n\n    return new MerkleTree(result);\n  }\n\n  public depthFirstSearch(): readonly UInt256[] {\n    return depthFirstSearch(this.root);\n  }\n\n  public toHashArray(): readonly UInt256[] {\n    return this.depthFirstSearch();\n  }\n}\n","import { assertTransactionType, UInt256 } from '@neo-one/client-common';\nimport { utils } from '@neo-one/utils';\nimport { createDeserializeWire, DeserializeWireBaseOptions } from '../Serializable';\nimport { ClaimTransaction } from './ClaimTransaction';\nimport { ContractTransaction } from './ContractTransaction';\nimport { EnrollmentTransaction } from './EnrollmentTransaction';\nimport { InvocationTransaction } from './InvocationTransaction';\nimport { IssueTransaction } from './IssueTransaction';\nimport { MinerTransaction } from './MinerTransaction';\nimport { PublishTransaction } from './PublishTransaction';\nimport { RegisterTransaction } from './RegisterTransaction';\nimport { StateTransaction } from './StateTransaction';\nimport { TransactionType } from './TransactionType';\n\nexport type Transaction =\n  | MinerTransaction\n  | IssueTransaction\n  | ClaimTransaction\n  | EnrollmentTransaction\n  | RegisterTransaction\n  | ContractTransaction\n  | PublishTransaction\n  | StateTransaction\n  | InvocationTransaction;\n\nexport interface TransactionKey {\n  readonly hash: UInt256;\n}\n\nexport const deserializeTransactionWireBase = (options: DeserializeWireBaseOptions): Transaction => {\n  const { reader } = options;\n  const type = assertTransactionType(reader.clone().readUInt8());\n  switch (type) {\n    case TransactionType.Miner:\n      return MinerTransaction.deserializeWireBase(options);\n    case TransactionType.Issue:\n      return IssueTransaction.deserializeWireBase(options);\n    case TransactionType.Claim:\n      return ClaimTransaction.deserializeWireBase(options);\n    case TransactionType.Enrollment:\n      return EnrollmentTransaction.deserializeWireBase(options);\n    case TransactionType.Register:\n      return RegisterTransaction.deserializeWireBase(options);\n    case TransactionType.Contract:\n      return ContractTransaction.deserializeWireBase(options);\n    case TransactionType.State:\n      return StateTransaction.deserializeWireBase(options);\n    case TransactionType.Publish:\n      return PublishTransaction.deserializeWireBase(options);\n    case TransactionType.Invocation:\n      return InvocationTransaction.deserializeWireBase(options);\n    default:\n      utils.assertNever(type);\n      throw new Error('For TS');\n  }\n};\n\nexport const deserializeTransactionWire = createDeserializeWire(deserializeTransactionWireBase);\n","import {\n  assertStateDescriptorType,\n  BinaryWriter,\n  common,\n  crypto,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  StateDescriptorJSON,\n  StateDescriptorTypeJSON,\n  UInt160Hex,\n} from '@neo-one/client-common';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { VerifyError } from '../../errors';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n  SerializeWire,\n} from '../../Serializable';\nimport { BinaryReader, utils } from '../../utils';\nimport { FeeContext, TransactionVerifyOptions } from '../TransactionBase';\nimport { StateDescriptorType } from './StateDescriptorType';\n\nexport interface StateDescriptorAdd {\n  readonly type: StateDescriptorType;\n  readonly key: Buffer;\n  readonly field: string;\n  readonly value: Buffer;\n}\n\nconst VOTES = 'Votes';\nconst REGISTERED = 'Registered';\n\nexport class StateDescriptor implements SerializableWire<StateDescriptor>, SerializableJSON<StateDescriptorJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): StateDescriptor {\n    const { reader } = options;\n    const type = assertStateDescriptorType(reader.readUInt8());\n    const key = reader.readVarBytesLE(100);\n    const field = reader.readVarString(32);\n    const value = reader.readVarBytesLE(65535);\n\n    switch (type) {\n      case StateDescriptorType.Account:\n        if (key.length !== 20) {\n          throw new InvalidFormatError(\n            `Expected StateDescriptor account key length to equal 20. Received: ${key.length}`,\n          );\n        }\n        if (field !== VOTES) {\n          throw new InvalidFormatError(`Expected StateDescriptor account field to equal ${VOTES}. Received: ${field}`);\n        }\n        break;\n      case StateDescriptorType.Validator:\n        if (key.length !== 33) {\n          throw new InvalidFormatError(\n            `Expected StateDescriptor validator key length to equal 33. Received: ${key.length}`,\n          );\n        }\n        if (field !== REGISTERED) {\n          throw new InvalidFormatError(\n            `Expected StateDescriptor validator field to equal ${REGISTERED}. Received: ${field}`,\n          );\n        }\n        break;\n      default:\n        commonUtils.assertNever(type);\n    }\n\n    return new this({\n      type,\n      key,\n      field,\n      value,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): StateDescriptor {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly type: StateDescriptorType;\n  public readonly key: Buffer;\n  public readonly field: string;\n  public readonly value: Buffer;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal = utils.lazy(\n    () =>\n      IOHelper.sizeOfUInt8 +\n      IOHelper.sizeOfVarBytesLE(this.key) +\n      IOHelper.sizeOfVarString(this.field) +\n      IOHelper.sizeOfVarBytesLE(this.value),\n  );\n\n  public constructor({ type, key, field, value }: StateDescriptorAdd) {\n    this.type = type;\n    this.key = key;\n    this.field = field;\n    this.value = value;\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public getSystemFee(context: FeeContext): BN {\n    const { type } = this;\n    switch (type) {\n      case StateDescriptorType.Account:\n        return utils.ZERO;\n      case StateDescriptorType.Validator:\n        if (this.value.some((byte) => byte !== 0)) {\n          return context.registerValidatorFee;\n        }\n\n        return utils.ZERO;\n      default:\n        commonUtils.assertNever(type);\n        throw new Error('For TS');\n    }\n  }\n\n  public getScriptHashesForVerifying(): readonly UInt160Hex[] {\n    const { type } = this;\n    switch (type) {\n      case StateDescriptorType.Account:\n        return [common.uInt160ToHex(common.bufferToUInt160(this.key))];\n      case StateDescriptorType.Validator:\n        return [common.uInt160ToHex(crypto.getVerificationScriptHash(common.bufferToECPoint(this.key)))];\n      default:\n        commonUtils.assertNever(type);\n        throw new Error('For TS');\n    }\n  }\n\n  public async verify(options: TransactionVerifyOptions): Promise<void> {\n    const { type } = this;\n    switch (type) {\n      case StateDescriptorType.Account:\n        return this.verifyAccount(options);\n      case StateDescriptorType.Validator:\n        return this.verifyValidator();\n      default:\n        commonUtils.assertNever(type);\n        throw new Error('For TS');\n    }\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.type);\n    writer.writeVarBytesLE(this.key);\n    writer.writeVarString(this.field);\n    writer.writeVarBytesLE(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): StateDescriptorJSON {\n    return {\n      type: this.getJSONType(),\n      key: JSONHelper.writeBuffer(this.key),\n      field: this.field,\n      value: JSONHelper.writeBuffer(this.value),\n    };\n  }\n\n  private getJSONType(): StateDescriptorTypeJSON {\n    return StateDescriptorType[this.type] as StateDescriptorTypeJSON;\n  }\n\n  private async verifyAccount(options: TransactionVerifyOptions): Promise<void> {\n    if (this.field !== VOTES) {\n      throw new VerifyError(`Invalid field ${this.field}`);\n    }\n\n    const reader = new BinaryReader(this.value);\n    const hash = common.bufferToUInt160(this.key);\n    const [account, validators] = await Promise.all([options.tryGetAccount({ hash }), options.getAllValidators()]);\n\n    if (account === undefined || account.isFrozen) {\n      throw new VerifyError('Account is frozen');\n    }\n\n    const publicKeys = reader.readArray(() => reader.readECPoint());\n    if (publicKeys.length > 0) {\n      if (account.getBalance(options.governingToken.hashHex).eq(utils.ZERO)) {\n        throw new VerifyError('Account does not have NEO');\n      }\n\n      const validatorPublicKeysSet = new Set(\n        validators\n          .filter((validator) => validator.registered)\n          .map((validator) => validator.publicKey)\n          .concat(options.standbyValidators)\n          .map((key) => common.ecPointToHex(key)),\n      );\n\n      publicKeys.forEach((publicKey) => {\n        if (!validatorPublicKeysSet.has(common.ecPointToHex(publicKey))) {\n          throw new VerifyError('Invalid validator public key');\n        }\n      });\n    }\n  }\n\n  private async verifyValidator(): Promise<void> {\n    if (this.field !== REGISTERED) {\n      throw new VerifyError(`Invalid field ${this.field}`);\n    }\n  }\n}\n","import { UInt256 } from '@neo-one/client-common';\nimport {\n  Account,\n  AccountUnclaimed,\n  AccountUnspent,\n  Asset,\n  Block,\n  BlockData,\n  BlockKey,\n  Contract,\n  deserializeActionWire,\n  deserializeTransactionWire,\n  DeserializeWireContext,\n  Header,\n  HeaderKey,\n  InvocationData,\n  Output,\n  Storage,\n  StorageItem,\n  TransactionData,\n  Validator,\n  ValidatorsCount,\n} from '@neo-one/node-core';\nimport { keys } from '@neo-one/node-storage-common';\nimport { LevelUp } from 'levelup';\nimport * as common from './common';\nimport { convertChange } from './convertChange';\nimport { KeyNotFoundError } from './errors';\nimport * as read from './read';\n\nexport const levelUpStorage = ({\n  db,\n  context,\n}: {\n  readonly db: LevelUp;\n  readonly context: DeserializeWireContext;\n}): Storage => {\n  const getHash = async ({ hashOrIndex }: HeaderKey): Promise<UInt256> => {\n    let hash = hashOrIndex;\n    if (typeof hash === 'number') {\n      try {\n        const result = await db.get(keys.serializeHeaderIndexHashKey(hash));\n        hash = common.deserializeHeaderHash(result as Buffer);\n      } catch (error) {\n        if (error.notFound) {\n          throw new KeyNotFoundError(`${hash}`);\n        }\n        throw error;\n      }\n    }\n\n    return hash;\n  };\n\n  const headerBase = read.createReadStorage({\n    db,\n    serializeKey: keys.typeKeyToSerializeKey.header,\n    deserializeValue: (buffer) =>\n      Header.deserializeWire({\n        context,\n        buffer,\n      }),\n  });\n\n  const getHeader = async ({ hashOrIndex }: HeaderKey): Promise<Header> => {\n    const hash = await getHash({ hashOrIndex });\n\n    return headerBase.get({ hash });\n  };\n\n  const header = {\n    get: getHeader,\n    tryGet: read.createTryGet({ get: getHeader }),\n    tryGetLatest: read.createTryGetLatest({\n      db,\n      latestKey: keys.maxHeaderHashKey,\n      deserializeResult: (result) => ({\n        hash: common.deserializeHeaderHash(result),\n      }),\n\n      get: headerBase.get,\n    }),\n  };\n\n  const blockBase = read.createReadStorage({\n    db,\n    serializeKey: keys.typeKeyToSerializeKey.block,\n    deserializeValue: (buffer) =>\n      Block.deserializeWire({\n        context,\n        buffer,\n      }),\n  });\n\n  const getBlock = async ({ hashOrIndex }: BlockKey): Promise<Block> => {\n    const hash = await getHash({ hashOrIndex });\n\n    return blockBase.get({ hash });\n  };\n\n  const block = {\n    get: getBlock,\n    tryGet: read.createTryGet({ get: getBlock }),\n    tryGetLatest: read.createTryGetLatest({\n      db,\n      latestKey: keys.maxBlockHashKey,\n      deserializeResult: (result) => ({\n        hash: common.deserializeBlockHash(result),\n      }),\n\n      get: blockBase.get,\n    }),\n  };\n\n  const transaction = read.createReadStorage({\n    db,\n    serializeKey: keys.typeKeyToSerializeKey.transaction,\n    deserializeValue: (buffer) =>\n      deserializeTransactionWire({\n        context,\n        buffer,\n      }),\n  });\n\n  const output = read.createReadStorage({\n    db,\n    serializeKey: keys.typeKeyToSerializeKey.output,\n    deserializeValue: (buffer) => Output.deserializeWire({ context, buffer }),\n  });\n\n  return {\n    header,\n    block,\n    blockData: read.createReadStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.blockData,\n      deserializeValue: (buffer) =>\n        BlockData.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    account: read.createReadAllStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.account,\n      minKey: keys.accountMinKey,\n      maxKey: keys.accountMaxKey,\n      deserializeValue: (buffer) =>\n        Account.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    accountUnclaimed: read.createReadGetAllStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.accountUnclaimed,\n      getMinKey: keys.getAccountUnclaimedKeyMin,\n      getMaxKey: keys.getAccountUnclaimedKeyMax,\n      deserializeValue: (buffer) =>\n        AccountUnclaimed.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    accountUnspent: read.createReadGetAllStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.accountUnspent,\n      getMinKey: keys.getAccountUnspentKeyMin,\n      getMaxKey: keys.getAccountUnspentKeyMax,\n      deserializeValue: (buffer) =>\n        AccountUnspent.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    action: read.createReadGetAllStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.action,\n      getMinKey: keys.getActionKeyMin,\n      getMaxKey: keys.getActionKeyMax,\n      deserializeValue: (buffer) =>\n        deserializeActionWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    asset: read.createReadStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.asset,\n      deserializeValue: (buffer) =>\n        Asset.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    transaction,\n    transactionData: read.createReadStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.transactionData,\n      deserializeValue: (buffer) => TransactionData.deserializeWire({ context, buffer }),\n    }),\n\n    output,\n    contract: read.createReadStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.contract,\n      deserializeValue: (buffer) =>\n        Contract.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    storageItem: read.createReadGetAllStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.storageItem,\n      getMinKey: keys.getStorageItemKeyMin,\n      getMaxKey: keys.getStorageItemKeyMax,\n      deserializeValue: (buffer) =>\n        StorageItem.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    validator: read.createReadAllStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.validator,\n      minKey: keys.validatorMinKey,\n      maxKey: keys.validatorMaxKey,\n      deserializeValue: (buffer) =>\n        Validator.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    invocationData: read.createReadStorage({\n      db,\n      serializeKey: keys.typeKeyToSerializeKey.invocationData,\n      deserializeValue: (buffer) =>\n        InvocationData.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    validatorsCount: read.createReadMetadataStorage({\n      db,\n      key: keys.validatorsCountKey,\n      deserializeValue: (buffer) =>\n        ValidatorsCount.deserializeWire({\n          context,\n          buffer,\n        }),\n    }),\n\n    async close(): Promise<void> {\n      await db.close();\n    },\n    async commit(changeSet): Promise<void> {\n      const changesList = changeSet.map(convertChange);\n      // tslint:disable-next-line readonly-array no-any\n      const changes = changesList.reduce<any[]>((acc, converted) => {\n        // tslint:disable-next-line no-array-mutation\n        acc.push(...converted);\n\n        return acc;\n      }, []);\n      await db.batch(changes);\n    },\n    async reset(): Promise<void> {\n      // tslint:disable-next-line readonly-array no-any\n      const batch: any[] = [];\n      await new Promise<void>((resolve, reject) => {\n        db.createKeyStream()\n          .on('data', (key: Buffer) => {\n            // tslint:disable-next-line no-array-mutation\n            batch.push({ type: 'del', key });\n          })\n          .on('error', (error) => {\n            reject(error);\n          })\n          .on('end', () => {\n            resolve();\n          });\n      });\n      await db.batch(batch);\n    },\n  };\n};\n","import { common, UInt160, UInt256 } from '@neo-one/client-common';\nimport {\n  AccountInputKey,\n  AccountInputsKey,\n  ActionKey,\n  ActionsKey,\n  OutputKey,\n  StorageItemKey,\n  StorageItemsKey,\n  ValidatorKey,\n} from '@neo-one/node-core';\nimport { utils } from '@neo-one/utils';\n\nconst DELIMITER = '\\x00';\nconst createPrefix = (value: string) => `${value}${DELIMITER}`;\nconst MAX_CHAR = '\\xff';\nconst createMax = (value: string) => `${value}${MAX_CHAR}`;\n\nconst accountKeyPrefix = createPrefix('0');\nconst accountUnclaimedKeyPrefix = createPrefix('1');\nconst accountUnspentKeyPrefix = createPrefix('2');\nconst actionKeyPrefix = createPrefix('3');\nconst assetKeyPrefix = createPrefix('4');\nconst blockKeyPrefix = createPrefix('5');\nconst blockDataKeyPrefix = createPrefix('6');\nconst headerKeyPrefix = createPrefix('7');\nconst headerHashKeyPrefix = createPrefix('8');\nconst transactionKeyPrefix = createPrefix('9');\nconst outputKeyPrefix = createPrefix('a');\nconst transactionDataKeyPrefix = createPrefix('b');\nconst contractKeyPrefix = createPrefix('c');\nconst storageItemKeyPrefix = createPrefix('d');\nconst validatorKeyPrefix = createPrefix('e');\nconst invocationDataKeyPrefix = createPrefix('f');\nconst settingsPrefix = createPrefix('g');\nconst validatorsCountKey = createPrefix('h');\n\nconst serializeHeaderIndexHashKey = (index: number) => `${headerHashKeyPrefix}${index}`;\n\nconst maxHeaderHashKey = `${settingsPrefix}0`;\nconst maxBlockHashKey = `${settingsPrefix}1`;\n\nconst createSerializeAccountInputKey = (prefix: string) => ({ hash, input }: AccountInputKey): string =>\n  `${prefix}${common.uInt160ToString(hash)}${common.uInt256ToString(input.hash)}${input.index}`;\nconst createGetAccountInputKeyMin = (prefix: string) => ({ hash }: AccountInputsKey): string =>\n  `${prefix}${common.uInt160ToString(hash)}`;\nconst createGetAccountInputKeyMax = (prefix: string) => ({ hash }: AccountInputsKey): string =>\n  createMax(`${prefix}${common.uInt160ToString(hash)}`);\n\nconst getAccountUnclaimedKeyMin = createGetAccountInputKeyMin(accountUnclaimedKeyPrefix);\nconst getAccountUnclaimedKeyMax = createGetAccountInputKeyMax(accountUnclaimedKeyPrefix);\n\nconst getAccountUnspentKeyMin = createGetAccountInputKeyMin(accountUnspentKeyPrefix);\nconst getAccountUnspentKeyMax = createGetAccountInputKeyMax(accountUnspentKeyPrefix);\n\nconst serializeStorageItemKey = ({ hash, key }: StorageItemKey): string =>\n  `${storageItemKeyPrefix}${common.uInt160ToString(hash)}${key.toString('hex')}`;\nconst getStorageItemKeyMin = ({ hash, prefix }: StorageItemsKey): string =>\n  [\n    storageItemKeyPrefix,\n    hash === undefined ? undefined : common.uInt160ToString(hash),\n    prefix === undefined ? undefined : prefix.toString('hex'),\n  ]\n    .filter(utils.notNull)\n    .join('');\nconst getStorageItemKeyMax = (key: StorageItemsKey): string => createMax(getStorageItemKeyMin(key));\n\nconst serializeActionKey = ({ index }: ActionKey): string => `${actionKeyPrefix}${index.toString(10, 8)}`;\nconst getActionKeyMin = ({ indexStart }: ActionsKey): string =>\n  [actionKeyPrefix, indexStart === undefined ? undefined : indexStart.toString(10, 8)].filter(utils.notNull).join('');\nconst getActionKeyMax = ({ indexStop }: ActionsKey): string =>\n  createMax(\n    [actionKeyPrefix, indexStop === undefined ? undefined : indexStop.toString(10, 8)].filter(utils.notNull).join(''),\n  );\n\nconst serializeValidatorKey = ({ publicKey }: ValidatorKey): string =>\n  `${validatorKeyPrefix}${common.ecPointToString(publicKey)}`;\nconst validatorMinKey = validatorKeyPrefix;\nconst validatorMaxKey = createMax(validatorKeyPrefix);\n\nconst serializeUInt160Key = ({ hash }: { readonly hash: UInt160 }): string => common.uInt160ToString(hash);\nconst serializeUInt256Key = ({ hash }: { readonly hash: UInt256 }): string => common.uInt256ToString(hash);\n\nconst createSerializeUInt160Key = (prefix: string) => (input: { readonly hash: UInt160 }): string =>\n  `${prefix}${serializeUInt160Key(input)}`;\nconst createSerializeUInt256Key = (prefix: string) => (input: { readonly hash: UInt256 }): string =>\n  `${prefix}${serializeUInt256Key(input)}`;\n\nconst accountMinKey = accountKeyPrefix;\nconst accountMaxKey = createMax(accountKeyPrefix);\n\nconst serializeOutputKey = ({ index, hash }: OutputKey): string =>\n  `${outputKeyPrefix}${common.uInt256ToString(hash)}${index}`;\n\nconst typeKeyToSerializeKey = {\n  account: createSerializeUInt160Key(accountKeyPrefix),\n  accountUnclaimed: createSerializeAccountInputKey(accountUnclaimedKeyPrefix),\n  accountUnspent: createSerializeAccountInputKey(accountUnspentKeyPrefix),\n  action: serializeActionKey,\n  asset: createSerializeUInt256Key(assetKeyPrefix),\n  block: createSerializeUInt256Key(blockKeyPrefix),\n  blockData: createSerializeUInt256Key(blockDataKeyPrefix),\n  header: createSerializeUInt256Key(headerKeyPrefix),\n  transaction: createSerializeUInt256Key(transactionKeyPrefix),\n  output: serializeOutputKey,\n  transactionData: createSerializeUInt256Key(transactionDataKeyPrefix),\n  contract: createSerializeUInt160Key(contractKeyPrefix),\n  storageItem: serializeStorageItemKey,\n  validator: serializeValidatorKey,\n  invocationData: createSerializeUInt256Key(invocationDataKeyPrefix),\n};\n\nexport const keys = {\n  validatorsCountKey,\n  serializeHeaderIndexHashKey,\n  maxHeaderHashKey,\n  maxBlockHashKey,\n  getAccountUnclaimedKeyMin,\n  getAccountUnclaimedKeyMax,\n  getAccountUnspentKeyMin,\n  getAccountUnspentKeyMax,\n  getStorageItemKeyMin,\n  getStorageItemKeyMax,\n  serializeActionKey,\n  getActionKeyMin,\n  getActionKeyMax,\n  validatorMinKey,\n  validatorMaxKey,\n  accountMinKey,\n  accountMaxKey,\n  typeKeyToSerializeKey,\n};\n","import { utils } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport { createDeserializeWire, DeserializeWireBaseOptions } from '../Serializable';\nimport { ActionType, assertActionType } from './ActionType';\nimport { LogAction } from './LogAction';\nimport { NotificationAction } from './NotificationAction';\n\nexport interface ActionsKey {\n  readonly indexStart?: BN;\n  readonly indexStop?: BN;\n}\n\nexport interface ActionKey {\n  readonly index: BN;\n}\n\nexport type Action = LogAction | NotificationAction;\n\nexport const deserializeActionWireBase = (options: DeserializeWireBaseOptions): Action => {\n  const { reader } = options;\n  const type = assertActionType(reader.clone().readUInt8());\n  switch (type) {\n    case ActionType.Log:\n      return LogAction.deserializeWireBase(options);\n    case ActionType.Notification:\n      return NotificationAction.deserializeWireBase(options);\n    default:\n      utils.assertNever(type);\n      throw new Error('For TS');\n  }\n};\n\nexport const deserializeActionWire = createDeserializeWire(deserializeActionWireBase);\n","import { assertContractParameterType } from '@neo-one/client-common';\nimport { utils } from '@neo-one/utils';\nimport {\n  createDeserializeWire,\n  DeserializeWire,\n  DeserializeWireBase,\n  DeserializeWireBaseOptions,\n} from '../Serializable';\nimport { ArrayContractParameter } from './ArrayContractParameter';\nimport { BooleanContractParameter } from './BooleanContractParameter';\nimport { ByteArrayContractParameter } from './ByteArrayContractParameter';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\nimport { Hash160ContractParameter } from './Hash160ContractParameter';\nimport { Hash256ContractParameter } from './Hash256ContractParameter';\nimport { IntegerContractParameter } from './IntegerContractParameter';\nimport { InteropInterfaceContractParameter } from './InteropInterfaceContractParameter';\nimport { MapContractParameter } from './MapContractParameter';\nimport { PublicKeyContractParameter } from './PublicKeyContractParameter';\nimport { SignatureContractParameter } from './SignatureContractParameter';\nimport { StringContractParameter } from './StringContractParameter';\nimport { VoidContractParameter } from './VoidContractParameter';\n\nexport type ContractParameter =\n  | SignatureContractParameter\n  | BooleanContractParameter\n  | IntegerContractParameter\n  | Hash160ContractParameter\n  | Hash256ContractParameter\n  | ByteArrayContractParameter\n  | PublicKeyContractParameter\n  | StringContractParameter\n  | ArrayContractParameter\n  | MapContractParameter\n  | InteropInterfaceContractParameter\n  | VoidContractParameter;\n\nexport const deserializeContractParameterWireBase = (options: DeserializeWireBaseOptions): ContractParameter => {\n  const { reader } = options;\n  const type = assertContractParameterType(reader.clone().readUInt8());\n  switch (type) {\n    case ContractParameterType.Signature:\n      return SignatureContractParameter.deserializeWireBase(options);\n    case ContractParameterType.Boolean:\n      return BooleanContractParameter.deserializeWireBase(options);\n    case ContractParameterType.Integer:\n      return IntegerContractParameter.deserializeWireBase(options);\n    case ContractParameterType.Hash160:\n      return Hash160ContractParameter.deserializeWireBase(options);\n    case ContractParameterType.Hash256:\n      return Hash256ContractParameter.deserializeWireBase(options);\n    case ContractParameterType.ByteArray:\n      return ByteArrayContractParameter.deserializeWireBase(options);\n    case ContractParameterType.PublicKey:\n      return PublicKeyContractParameter.deserializeWireBase(options);\n    case ContractParameterType.String:\n      return StringContractParameter.deserializeWireBase(options);\n    case ContractParameterType.Array:\n      // tslint:disable-next-line\n      return (ArrayContractParameter as any).deserializeWireBase(options);\n    case ContractParameterType.Map:\n      // tslint:disable-next-line\n      return (MapContractParameter as any).deserializeWireBase(options);\n    case ContractParameterType.InteropInterface:\n      return InteropInterfaceContractParameter.deserializeWireBase(options);\n    case ContractParameterType.Void:\n      return VoidContractParameter.deserializeWireBase(options);\n    default:\n      utils.assertNever(type);\n      throw new Error('For TS');\n  }\n};\n\nexport const deserializeWire = createDeserializeWire(deserializeContractParameterWireBase);\n\n// tslint:disable-next-line no-object-mutation readonly-keyword\n(ArrayContractParameter as { deserializeWireBase?: DeserializeWireBase<ContractParameterBase> }).deserializeWireBase = (\n  options,\n): ArrayContractParameter => {\n  const { reader } = options;\n  reader.readUInt8();\n  const value = reader.readArray(() => deserializeContractParameterWireBase(options));\n\n  return new ArrayContractParameter(value);\n};\n\n// tslint:disable-next-line no-object-mutation\n(ArrayContractParameter as {\n  // tslint:disable-next-line readonly-keyword\n  deserializeWire?: DeserializeWire<ContractParameterBase>;\n}).deserializeWire = createDeserializeWire(\n  // tslint:disable-next-line no-any\n  (ArrayContractParameter as any).deserializeWireBase.bind(ArrayContractParameter),\n);\n\n// tslint:disable-next-line no-object-mutation readonly-keyword\n(MapContractParameter as { deserializeWireBase?: DeserializeWireBase<ContractParameterBase> }).deserializeWireBase = (\n  options,\n): MapContractParameter => {\n  const { reader } = options;\n  reader.readUInt8();\n  const value = reader.readArray(() => reader.readArray(() => deserializeContractParameterWireBase(options)));\n\n  // tslint:disable-next-line no-any\n  return new MapContractParameter(value as any);\n};\n\n// tslint:disable-next-line no-object-mutation\n(MapContractParameter as {\n  // tslint:disable-next-line readonly-keyword\n  deserializeWire?: DeserializeWire<ContractParameterBase>;\n}).deserializeWire = createDeserializeWire(\n  // tslint:disable-next-line no-any\n  (MapContractParameter as any).deserializeWireBase.bind(MapContractParameter),\n);\n","import { InvalidAssetTypeError, InvalidAssetTypeJSONError } from '../errors';\nimport { AssetTypeJSON } from './types';\n\nexport enum AssetTypeModel {\n  CreditFlag = 0x40,\n  DutyFlag = 0x80,\n  GoverningToken = 0x00,\n  UtilityToken = 0x01,\n  Currency = 0x08,\n  Share = 0x90,\n  Invoice = 0x98,\n  Token = 0x60,\n}\n\nexport const hasFlag = (\n  assetType: AssetTypeModel,\n  flag: AssetTypeModel,\n  // tslint:disable-next-line\n): boolean => (assetType & flag) === flag;\n\nconst isAssetType = (assetType: number): assetType is AssetTypeModel =>\n  // tslint:disable-next-line strict-type-predicates\n  AssetTypeModel[assetType] !== undefined;\n\nexport const assertAssetType = (assetType: number): AssetTypeModel => {\n  if (!isAssetType(assetType)) {\n    throw new InvalidAssetTypeError(assetType);\n  }\n\n  return assetType;\n};\n\nexport const toJSONAssetType = (type: AssetTypeModel): AssetTypeJSON => assertAssetTypeJSON(AssetTypeModel[type]);\n\nconst isAssetTypeJSON = (assetType: string): assetType is AssetTypeJSON =>\n  // tslint:disable-next-line strict-type-predicates no-any\n  AssetTypeModel[assetType as any] !== undefined;\n\nexport const assertAssetTypeJSON = (type: string): AssetTypeJSON => {\n  if (!isAssetTypeJSON(type)) {\n    throw new InvalidAssetTypeJSONError(type);\n  }\n\n  return type;\n};\n\nexport const toAssetType = (type: AssetTypeJSON): AssetTypeModel => AssetTypeModel[type];\n","import { assertVMState, VMState } from '@neo-one/client-common';\nimport { createDeserializeWire, DeserializeWireBaseOptions } from '../Serializable';\nimport { InvocationResultError } from './InvocationResultError';\nimport { InvocationResultSuccess } from './InvocationResultSuccess';\n\nexport type InvocationResult = InvocationResultSuccess | InvocationResultError;\n\nexport const deserializeInvocationResultWireBase = (options: DeserializeWireBaseOptions): InvocationResult => {\n  const { reader } = options;\n  const state = assertVMState(reader.clone().readUInt8());\n  switch (state) {\n    case VMState.Fault:\n      return InvocationResultError.deserializeWireBase(options);\n    case VMState.Halt:\n      return InvocationResultSuccess.deserializeWireBase(options);\n    default:\n      throw new Error('Invalid VM state');\n  }\n};\n\nexport const deserializeInvocationResultWire = createDeserializeWire(deserializeInvocationResultWireBase);\n","import { createDeserializeWire, DeserializeWireBaseOptions } from '../Serializable';\nimport { StorageChangeAdd } from './StorageChangeAdd';\nimport { StorageChangeDelete } from './StorageChangeDelete';\nimport { StorageChangeModify } from './StorageChangeModify';\nimport { assertStorageChangeType, StorageChangeType } from './StorageChangeType';\n\nexport type StorageChange = StorageChangeAdd | StorageChangeModify | StorageChangeDelete;\n\nexport const deserializeStorageChangeWireBase = (options: DeserializeWireBaseOptions): StorageChange => {\n  const { reader } = options;\n  const storageChangeType = assertStorageChangeType(reader.clone().readUInt8());\n  switch (storageChangeType) {\n    case StorageChangeType.Modify:\n      return StorageChangeModify.deserializeWireBase(options);\n    case StorageChangeType.Add:\n      return StorageChangeAdd.deserializeWireBase(options);\n    case StorageChangeType.Delete:\n      return StorageChangeDelete.deserializeWireBase(options);\n    default:\n      throw new Error('Invalid Storage Change Type');\n  }\n};\n\nexport const deserializeStorageChangeWire = createDeserializeWire(deserializeStorageChangeWireBase);\n","import { common, crypto, ECPoint, ScriptBuilder, UInt160, VMState } from '@neo-one/client-common';\nimport { nodeLogger } from '@neo-one/logger';\nimport {\n  Action,\n  Block,\n  Blockchain as BlockchainType,\n  CallReceipt,\n  ConsensusPayload,\n  Header,\n  Input,\n  InvocationTransaction,\n  LogAction,\n  NotificationAction,\n  NULL_ACTION,\n  Output,\n  OutputKey,\n  ScriptContainerType,\n  SerializableInvocationData,\n  Settings,\n  Storage,\n  Transaction,\n  TransactionData,\n  TriggerType,\n  utils,\n  Validator,\n  VerifyScriptOptions,\n  VerifyScriptResult,\n  VerifyTransactionResult,\n  VM,\n} from '@neo-one/node-core';\nimport { Labels, utils as commonUtils } from '@neo-one/utils';\nimport { AggregationType, globalStats, MeasureUnit } from '@neo-one/client-switch';\nimport { BN } from 'bn.js';\nimport PriorityQueue from 'js-priority-queue';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { toArray } from 'rxjs/operators';\nimport {\n  CoinClaimedError,\n  CoinUnspentError,\n  GenesisBlockNotRegisteredError,\n  InvalidClaimError,\n  UnknownVerifyError,\n  WitnessVerifyError,\n} from './errors';\nimport { getValidators } from './getValidators';\nimport { wrapExecuteScripts } from './wrapExecuteScripts';\nimport { WriteBatchBlockchain } from './WriteBatchBlockchain';\n\nconst logger = nodeLogger.child({ component: 'blockchain' });\n\nexport interface CreateBlockchainOptions {\n  readonly settings: Settings;\n  readonly storage: Storage;\n  readonly vm: VM;\n}\nexport interface BlockchainOptions extends CreateBlockchainOptions {\n  readonly currentBlock: BlockchainType['currentBlock'] | undefined;\n  readonly previousBlock: BlockchainType['previousBlock'] | undefined;\n  readonly currentHeader: BlockchainType['currentHeader'] | undefined;\n}\n\ninterface SpentCoin {\n  readonly output: Output;\n  readonly startHeight: number;\n  readonly endHeight: number;\n  readonly claimed: boolean;\n}\n\ninterface Entry {\n  readonly block: Block;\n  readonly resolve: () => void;\n  readonly reject: (error: Error) => void;\n  readonly unsafe: boolean;\n}\n\nconst blockFailures = globalStats.createMeasureInt64('persist/failures', MeasureUnit.UNIT);\nconst blockCurrent = globalStats.createMeasureInt64('persist/current', MeasureUnit.UNIT);\nconst blockProgress = globalStats.createMeasureInt64('persist/progress', MeasureUnit.UNIT);\n\nconst blockDurationMs = globalStats.createMeasureDouble(\n  'persist/duration',\n  MeasureUnit.MS,\n  'time to persist block in milliseconds',\n);\nconst blockLatencySec = globalStats.createMeasureDouble(\n  'persist/latency',\n  MeasureUnit.SEC,\n  \"'The latency from block timestamp to persist'\",\n);\n\nconst NEO_BLOCKCHAIN_PERSIST_BLOCK_DURATION_MS = globalStats.createView(\n  'neo_blockchain_persist_block_duration_ms',\n  blockDurationMs,\n  AggregationType.DISTRIBUTION,\n  [],\n  'distribution of the persist duration',\n  [5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],\n);\nglobalStats.registerView(NEO_BLOCKCHAIN_PERSIST_BLOCK_DURATION_MS);\n\nconst NEO_BLOCKCHAIN_PERSIST_BLOCK_FAILURES_TOTAL = globalStats.createView(\n  'neo_blockchain_persist_block_failures_total',\n  blockFailures,\n  AggregationType.COUNT,\n  [],\n  'total blockchain failures',\n);\nglobalStats.registerView(NEO_BLOCKCHAIN_PERSIST_BLOCK_FAILURES_TOTAL);\n\nconst NEO_BLOCKCHAIN_BLOCK_INDEX_GAUGE = globalStats.createView(\n  'neo_blockchain_block_index',\n  blockCurrent,\n  AggregationType.LAST_VALUE,\n  [],\n  'the current block index',\n);\nglobalStats.registerView(NEO_BLOCKCHAIN_BLOCK_INDEX_GAUGE);\n\nconst NEO_BLOCKCHAIN_PERSISTING_BLOCK_INDEX_GAUGE = globalStats.createView(\n  'neo_blockchain_persisting_block_index',\n  blockProgress,\n  AggregationType.LAST_VALUE,\n  [],\n  'The current in progress persist index',\n);\nglobalStats.registerView(NEO_BLOCKCHAIN_PERSISTING_BLOCK_INDEX_GAUGE);\n\nconst NEO_BLOCKCHAIN_PERSIST_BLOCK_LATENCY_SECONDS = globalStats.createView(\n  'neo_blockchain_persist_block_latency_seconds',\n  blockLatencySec,\n  AggregationType.DISTRIBUTION,\n  [],\n  'The latency from block timestamp to persist',\n  [1, 2, 5, 7.5, 10, 12.5, 15, 17.5, 20],\n);\nglobalStats.registerView(NEO_BLOCKCHAIN_PERSIST_BLOCK_LATENCY_SECONDS);\n\nexport class Blockchain {\n  public static async create({ settings, storage, vm }: CreateBlockchainOptions): Promise<BlockchainType> {\n    const [currentBlock, currentHeader] = await Promise.all([\n      storage.block.tryGetLatest(),\n      storage.header.tryGetLatest(),\n    ]);\n    let previousBlock;\n    if (currentBlock !== undefined) {\n      previousBlock = await storage.block.tryGet({ hashOrIndex: currentBlock.index - 1 });\n    }\n\n    const blockchain = new Blockchain({\n      currentBlock,\n      currentHeader,\n      previousBlock,\n      settings,\n      storage,\n      vm,\n    });\n\n    if (currentHeader === undefined) {\n      await blockchain.persistHeaders([settings.genesisBlock.header]);\n    }\n\n    if (currentBlock === undefined) {\n      await blockchain.persistBlock({ block: settings.genesisBlock });\n    }\n\n    return blockchain;\n  }\n\n  public readonly deserializeWireContext: BlockchainType['deserializeWireContext'];\n  public readonly serializeJSONContext: BlockchainType['serializeJSONContext'];\n  public readonly feeContext: BlockchainType['feeContext'];\n\n  private readonly settings$: BehaviorSubject<Settings>;\n  private readonly storage: Storage;\n  private mutableCurrentBlock: BlockchainType['currentBlock'] | undefined;\n  private mutablePreviousBlock: BlockchainType['currentBlock'] | undefined;\n  private mutableCurrentHeader: BlockchainType['currentHeader'] | undefined;\n  private mutablePersistingBlocks = false;\n  private mutableBlockQueue: PriorityQueue<Entry> = new PriorityQueue({\n    comparator: (a, b) => a.block.index - b.block.index,\n  });\n  private mutableInQueue: Set<string> = new Set();\n  private readonly vm: VM;\n  private mutableRunning = false;\n  private mutableDoneRunningResolve: (() => void) | undefined;\n  private mutableBlock$: Subject<Block> = new Subject();\n\n  public constructor(options: BlockchainOptions) {\n    this.storage = options.storage;\n    this.mutableCurrentBlock = options.currentBlock;\n    this.mutablePreviousBlock = options.previousBlock;\n    this.mutableCurrentHeader = options.currentHeader;\n    this.vm = options.vm;\n\n    this.settings$ = new BehaviorSubject(options.settings);\n\n    globalStats.record([\n      {\n        measure: blockProgress,\n        value: this.currentBlockIndex,\n      },\n      {\n        measure: blockCurrent,\n        value: this.currentBlockIndex,\n      },\n    ]);\n\n    // tslint:disable-next-line no-this-assignment\n    const self = this;\n    this.deserializeWireContext = {\n      get messageMagic() {\n        return self.settings.messageMagic;\n      },\n    };\n\n    this.feeContext = {\n      get getOutput() {\n        return self.output.get;\n      },\n      get governingToken() {\n        return self.settings.governingToken;\n      },\n      get utilityToken() {\n        return self.settings.utilityToken;\n      },\n      get fees() {\n        return self.settings.fees;\n      },\n      get registerValidatorFee() {\n        return self.settings.registerValidatorFee;\n      },\n    };\n\n    this.serializeJSONContext = {\n      get addressVersion() {\n        return self.settings.addressVersion;\n      },\n      get feeContext() {\n        return self.feeContext;\n      },\n      get tryGetInvocationData() {\n        return self.tryGetInvocationData;\n      },\n      get tryGetTransactionData() {\n        return self.tryGetTransactionData;\n      },\n      get getUnclaimed() {\n        return self.getUnclaimed;\n      },\n      get getUnspent() {\n        return self.getUnspent;\n      },\n    };\n\n    this.start();\n  }\n\n  public get settings(): Settings {\n    return this.settings$.getValue();\n  }\n\n  public get currentBlock(): Block {\n    if (this.mutableCurrentBlock === undefined) {\n      throw new GenesisBlockNotRegisteredError();\n    }\n\n    return this.mutableCurrentBlock;\n  }\n\n  public get previousBlock(): Block | undefined {\n    return this.mutablePreviousBlock;\n  }\n\n  public get currentHeader(): Header {\n    if (this.mutableCurrentHeader === undefined) {\n      throw new GenesisBlockNotRegisteredError();\n    }\n\n    return this.mutableCurrentHeader;\n  }\n\n  public get currentBlockIndex(): number {\n    return this.mutableCurrentBlock === undefined ? -1 : this.currentBlock.index;\n  }\n\n  public get block$(): Observable<Block> {\n    return this.mutableBlock$;\n  }\n\n  public get isPersistingBlock(): boolean {\n    return this.mutablePersistingBlocks;\n  }\n\n  public get account(): BlockchainType['account'] {\n    return this.storage.account;\n  }\n\n  public get accountUnclaimed(): BlockchainType['accountUnclaimed'] {\n    return this.storage.accountUnclaimed;\n  }\n\n  public get accountUnspent(): BlockchainType['accountUnspent'] {\n    return this.storage.accountUnspent;\n  }\n\n  public get action(): BlockchainType['action'] {\n    return this.storage.action;\n  }\n\n  public get asset(): BlockchainType['asset'] {\n    return this.storage.asset;\n  }\n\n  public get block(): BlockchainType['block'] {\n    return this.storage.block;\n  }\n\n  public get blockData(): BlockchainType['blockData'] {\n    return this.storage.blockData;\n  }\n\n  public get header(): BlockchainType['header'] {\n    return this.storage.header;\n  }\n\n  public get transaction(): BlockchainType['transaction'] {\n    return this.storage.transaction;\n  }\n\n  public get transactionData(): BlockchainType['transactionData'] {\n    return this.storage.transactionData;\n  }\n\n  public get output(): BlockchainType['output'] {\n    return this.storage.output;\n  }\n\n  public get contract(): BlockchainType['contract'] {\n    return this.storage.contract;\n  }\n\n  public get storageItem(): BlockchainType['storageItem'] {\n    return this.storage.storageItem;\n  }\n\n  public get validator(): BlockchainType['validator'] {\n    return this.storage.validator;\n  }\n\n  public get invocationData(): BlockchainType['invocationData'] {\n    return this.storage.invocationData;\n  }\n\n  public get validatorsCount(): BlockchainType['validatorsCount'] {\n    return this.storage.validatorsCount;\n  }\n\n  public async stop(): Promise<void> {\n    if (!this.mutableRunning) {\n      return;\n    }\n\n    if (this.mutablePersistingBlocks) {\n      // tslint:disable-next-line promise-must-complete\n      const doneRunningPromise = new Promise<void>((resolve) => {\n        this.mutableDoneRunningResolve = resolve;\n      });\n      this.mutableRunning = false;\n\n      await doneRunningPromise;\n      this.mutableDoneRunningResolve = undefined;\n    } else {\n      this.mutableRunning = false;\n    }\n\n    logger.info({ title: 'neo_blockchain_stop' }, 'NEO blockchain stopped.');\n  }\n\n  public updateSettings(settings: Settings): void {\n    this.settings$.next(settings);\n  }\n\n  public async persistBlock({\n    block,\n    unsafe = false,\n  }: {\n    readonly block: Block;\n    readonly unsafe?: boolean;\n  }): Promise<void> {\n    // tslint:disable-next-line promise-must-complete\n    return new Promise<void>((resolve, reject) => {\n      if (this.mutableInQueue.has(block.hashHex)) {\n        resolve();\n\n        return;\n      }\n      this.mutableInQueue.add(block.hashHex);\n\n      this.mutableBlockQueue.queue({\n        block,\n        resolve,\n        reject,\n        unsafe,\n      });\n\n      // tslint:disable-next-line no-floating-promises\n      this.persistBlocksAsync();\n    });\n  }\n\n  public async persistHeaders(_headers: readonly Header[]): Promise<void> {\n    // We don't ever just persist the headers.\n  }\n\n  public async verifyBlock(block: Block): Promise<void> {\n    await block.verify({\n      genesisBlock: this.settings.genesisBlock,\n      tryGetBlock: this.block.tryGet,\n      tryGetHeader: this.header.tryGet,\n      isSpent: this.isSpent,\n      getAsset: this.asset.get,\n      getOutput: this.output.get,\n      tryGetAccount: this.account.tryGet,\n      getValidators: this.getValidators,\n      standbyValidators: this.settings.standbyValidators,\n      getAllValidators: this.getAllValidators,\n      calculateClaimAmount: async (claims) => this.calculateClaimAmount(claims),\n      verifyScript: async (options) => this.verifyScript(options),\n      currentHeight: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n      governingToken: this.settings.governingToken,\n      utilityToken: this.settings.utilityToken,\n      fees: this.settings.fees,\n      registerValidatorFee: this.settings.registerValidatorFee,\n    });\n  }\n\n  public async verifyConsensusPayload(payload: ConsensusPayload): Promise<void> {\n    await payload.verify({\n      getValidators: async () => this.getValidators([]),\n      verifyScript: async (options) => this.verifyScript(options),\n      currentIndex: this.mutableCurrentBlock === undefined ? 0 : this.mutableCurrentBlock.index,\n      currentBlockHash: this.currentBlock.hash,\n    });\n  }\n\n  public async verifyTransaction({\n    transaction,\n    memPool,\n  }: {\n    readonly transaction: Transaction;\n    readonly memPool?: readonly Transaction[];\n  }): Promise<VerifyTransactionResult> {\n    try {\n      const verifications = await transaction.verify({\n        calculateClaimAmount: this.calculateClaimAmount,\n        isSpent: this.isSpent,\n        getAsset: this.asset.get,\n        getOutput: this.output.get,\n        tryGetAccount: this.account.tryGet,\n        standbyValidators: this.settings.standbyValidators,\n        getAllValidators: this.getAllValidators,\n        verifyScript: async (options) => this.verifyScript(options),\n        governingToken: this.settings.governingToken,\n        utilityToken: this.settings.utilityToken,\n        fees: this.settings.fees,\n        registerValidatorFee: this.settings.registerValidatorFee,\n        currentHeight: this.currentBlockIndex,\n        memPool,\n      });\n\n      return { verifications };\n    } catch (error) {\n      if (error.code === undefined || typeof error.code !== 'string' || !error.code.includes('VERIFY')) {\n        throw new UnknownVerifyError(error.message);\n      }\n\n      throw error;\n    }\n  }\n\n  public async invokeScript(script: Buffer): Promise<CallReceipt> {\n    const transaction = new InvocationTransaction({\n      script,\n      gas: common.ONE_HUNDRED_FIXED8,\n    });\n\n    return this.invokeTransaction(transaction);\n  }\n\n  public async invokeTransaction(transaction: InvocationTransaction): Promise<CallReceipt> {\n    const blockchain = this.createWriteBlockchain();\n\n    const mutableActions: Action[] = [];\n    let globalActionIndex = new BN(0);\n    const result = await wrapExecuteScripts(async () =>\n      this.vm.executeScripts({\n        scripts: [{ code: transaction.script }],\n        blockchain,\n        scriptContainer: {\n          type: ScriptContainerType.Transaction,\n          value: transaction,\n        },\n        listeners: {\n          onLog: ({ message, scriptHash }) => {\n            mutableActions.push(\n              new LogAction({\n                index: globalActionIndex,\n                scriptHash,\n                message,\n              }),\n            );\n\n            globalActionIndex = globalActionIndex.add(utils.ONE);\n          },\n          onNotify: ({ args, scriptHash }) => {\n            mutableActions.push(\n              new NotificationAction({\n                index: globalActionIndex,\n                scriptHash,\n                args,\n              }),\n            );\n\n            globalActionIndex = globalActionIndex.add(utils.ONE);\n          },\n        },\n\n        triggerType: TriggerType.Application,\n        action: NULL_ACTION,\n        gas: transaction.gas,\n        skipWitnessVerify: true,\n      }),\n    );\n\n    return {\n      result,\n      actions: mutableActions,\n    };\n  }\n\n  public async reset(): Promise<void> {\n    await this.stop();\n    await this.storage.reset();\n    this.mutableCurrentHeader = undefined;\n    this.mutableCurrentBlock = undefined;\n    this.mutablePreviousBlock = undefined;\n    this.start();\n    await this.persistHeaders([this.settings.genesisBlock.header]);\n    await this.persistBlock({ block: this.settings.genesisBlock });\n  }\n\n  public readonly getValidators = async (transactions: readonly Transaction[]): Promise<readonly ECPoint[]> => {\n    logger.debug({ title: 'neo_blockchain_get_validators' });\n\n    return getValidators(this, transactions);\n  };\n\n  public readonly calculateClaimAmount = async (claims: readonly Input[]): Promise<BN> => {\n    logger.debug({ title: 'neo_blockchain_calculate_claim_amount' });\n    const spentCoins = await Promise.all(claims.map(async (claim) => this.tryGetSpentCoin(claim)));\n\n    const filteredSpentCoinsIn = spentCoins.filter(commonUtils.notNull);\n    if (spentCoins.length !== filteredSpentCoinsIn.length) {\n      throw new CoinUnspentError(spentCoins.length - filteredSpentCoinsIn.length);\n    }\n\n    const filteredSpentCoins = filteredSpentCoinsIn.filter((spentCoin) => {\n      if (spentCoin.claimed) {\n        throw new CoinClaimedError(common.uInt256ToString(spentCoin.output.asset), spentCoin.output.value.toString(10));\n      }\n      if (!common.uInt256Equal(spentCoin.output.asset, this.settings.governingToken.hash)) {\n        throw new InvalidClaimError(\n          common.uInt256ToString(spentCoin.output.asset),\n          common.uInt256ToString(this.settings.governingToken.hash),\n        );\n      }\n\n      return true;\n    });\n\n    return utils.calculateClaimAmount({\n      coins: filteredSpentCoins.map((coin) => ({\n        value: coin.output.value,\n        startHeight: coin.startHeight,\n        endHeight: coin.endHeight,\n      })),\n\n      decrementInterval: this.settings.decrementInterval,\n      generationAmount: this.settings.generationAmount,\n      getSystemFee: async (index) => {\n        const header = await this.header.get({\n          hashOrIndex: index,\n        });\n\n        const blockData = await this.blockData.get({\n          hash: header.hash,\n        });\n\n        return blockData.systemFee;\n      },\n    });\n  };\n\n  private async persistBlocksAsync(): Promise<void> {\n    if (this.mutablePersistingBlocks || !this.mutableRunning) {\n      return;\n    }\n\n    this.mutablePersistingBlocks = true;\n    let entry: Entry | undefined;\n    try {\n      entry = this.cleanBlockQueue();\n\n      // tslint:disable-next-line no-loop-statement\n      while (this.mutableRunning && entry !== undefined && entry.block.index === this.currentBlockIndex + 1) {\n        const startTime = Date.now();\n\n        const entryNonNull = entry;\n        const logData = {\n          [Labels.NEO_BLOCK_INDEX]: entry.block.index,\n          title: 'neo_blockchain_persist_block_top_level',\n        };\n        try {\n          await this.persistBlockInternal(entryNonNull.block, entryNonNull.unsafe);\n          logger.debug(logData);\n          globalStats.record([\n            {\n              measure: blockDurationMs,\n              value: Date.now() - startTime,\n            },\n          ]);\n        } catch (error) {\n          logger.error({ error, ...logData });\n          globalStats.record([\n            {\n              measure: blockFailures,\n              value: 1,\n            },\n          ]);\n\n          throw error;\n        }\n\n        entry.resolve();\n        this.mutableBlock$.next(entry.block);\n        globalStats.record([\n          {\n            measure: blockCurrent,\n            value: entry.block.index,\n          },\n          {\n            measure: blockLatencySec,\n            value: Date.now() - entry.block.timestamp,\n          },\n        ]);\n\n        entry = this.cleanBlockQueue();\n      }\n\n      if (entry !== undefined) {\n        this.mutableBlockQueue.queue(entry);\n      }\n    } catch (error) {\n      if (entry !== undefined) {\n        entry.reject(error);\n      }\n    } finally {\n      this.mutablePersistingBlocks = false;\n      if (this.mutableDoneRunningResolve !== undefined) {\n        this.mutableDoneRunningResolve();\n        this.mutableDoneRunningResolve = undefined;\n      }\n    }\n  }\n\n  private cleanBlockQueue(): Entry | undefined {\n    let entry = this.dequeBlockQueue();\n    // tslint:disable-next-line no-loop-statement\n    while (entry !== undefined && entry.block.index <= this.currentBlockIndex) {\n      entry.resolve();\n      entry = this.dequeBlockQueue();\n    }\n\n    return entry;\n  }\n\n  private dequeBlockQueue(): Entry | undefined {\n    if (this.mutableBlockQueue.length > 0) {\n      return this.mutableBlockQueue.dequeue();\n    }\n\n    return undefined;\n  }\n\n  private readonly verifyScript = async ({\n    scriptContainer,\n    hash,\n    witness,\n  }: VerifyScriptOptions): Promise<VerifyScriptResult> => {\n    let { verification } = witness;\n    if (verification.length === 0) {\n      const builder = new ScriptBuilder();\n      builder.emitAppCallVerification(hash);\n      verification = builder.build();\n    } else if (!common.uInt160Equal(hash, crypto.toScriptHash(verification))) {\n      throw new WitnessVerifyError();\n    }\n\n    const blockchain = this.createWriteBlockchain();\n    const mutableActions: Action[] = [];\n    let globalActionIndex = new BN(0);\n    const executeResult = await this.vm.executeScripts({\n      scripts: [{ code: witness.invocation }, { code: verification }],\n      blockchain,\n      scriptContainer,\n      triggerType: TriggerType.Verification,\n      action: NULL_ACTION,\n      gas: utils.ONE_HUNDRED_MILLION,\n      listeners: {\n        onLog: ({ message, scriptHash }) => {\n          mutableActions.push(\n            new LogAction({\n              index: globalActionIndex,\n              scriptHash,\n              message,\n            }),\n          );\n\n          globalActionIndex = globalActionIndex.add(utils.ONE);\n        },\n        onNotify: ({ args, scriptHash }) => {\n          mutableActions.push(\n            new NotificationAction({\n              index: globalActionIndex,\n              scriptHash,\n              args,\n            }),\n          );\n\n          globalActionIndex = globalActionIndex.add(utils.ONE);\n        },\n      },\n    });\n    const result = { actions: mutableActions, hash, witness };\n\n    const { stack, state, errorMessage } = executeResult;\n    if (state === VMState.Fault) {\n      return {\n        ...result,\n        failureMessage: errorMessage === undefined ? 'Script execution ended in a FAULT state' : errorMessage,\n      };\n    }\n\n    if (stack.length !== 1) {\n      return {\n        ...result,\n        failureMessage:\n          `Verification did not return one result. This may be a bug in the ` +\n          `smart contract compiler or the smart contract itself. If you are using the NEO•ONE compiler please file an issue. Found ${stack.length} results.`,\n      };\n    }\n\n    const top = stack[0];\n    if (!top.asBoolean()) {\n      return { ...result, failureMessage: 'Verification did not succeed.' };\n    }\n\n    return result;\n  };\n\n  private readonly tryGetInvocationData = async (\n    transaction: InvocationTransaction,\n  ): Promise<SerializableInvocationData | undefined> => {\n    const data = await this.invocationData.tryGet({\n      hash: transaction.hash,\n    });\n\n    if (data === undefined) {\n      return undefined;\n    }\n\n    const [asset, contracts, actions] = await Promise.all([\n      data.assetHash === undefined ? Promise.resolve(undefined) : this.asset.get({ hash: data.assetHash }),\n      Promise.all(data.contractHashes.map(async (contractHash) => this.contract.tryGet({ hash: contractHash }))),\n      data.actionIndexStart.eq(data.actionIndexStop)\n        ? Promise.resolve([])\n        : this.action\n            .getAll$({\n              indexStart: data.actionIndexStart,\n              indexStop: data.actionIndexStop.sub(utils.ONE),\n            })\n            .pipe(toArray())\n            .toPromise(),\n    ]);\n\n    return {\n      asset,\n      contracts: contracts.filter(commonUtils.notNull),\n      deletedContractHashes: data.deletedContractHashes,\n      migratedContractHashes: data.migratedContractHashes,\n      voteUpdates: data.voteUpdates,\n      result: data.result,\n      actions,\n      storageChanges: data.storageChanges,\n    };\n  };\n  private readonly tryGetTransactionData = async (transaction: Transaction): Promise<TransactionData | undefined> =>\n    this.transactionData.tryGet({ hash: transaction.hash });\n  private readonly getUnclaimed = async (hash: UInt160): Promise<readonly Input[]> =>\n    this.accountUnclaimed\n      .getAll$({ hash })\n      .pipe(toArray())\n      .toPromise()\n      .then((values) => values.map((value) => value.input));\n  private readonly getUnspent = async (hash: UInt160): Promise<readonly Input[]> => {\n    const unspent = await this.accountUnspent\n      .getAll$({ hash })\n      .pipe(toArray())\n      .toPromise();\n\n    return unspent.map((value) => value.input);\n  };\n  private readonly getAllValidators = async (): Promise<readonly Validator[]> =>\n    this.validator.all$.pipe(toArray()).toPromise();\n  private readonly isSpent = async (input: OutputKey): Promise<boolean> => {\n    const transactionData = await this.transactionData.tryGet({\n      hash: input.hash,\n    });\n\n    return (\n      transactionData !== undefined && (transactionData.endHeights[input.index] as number | undefined) !== undefined\n    );\n  };\n  private readonly tryGetSpentCoin = async (input: Input): Promise<SpentCoin | undefined> => {\n    const [transactionData, output] = await Promise.all([\n      this.transactionData.tryGet({ hash: input.hash }),\n      this.output.get(input),\n    ]);\n\n    if (transactionData === undefined) {\n      return undefined;\n    }\n\n    const endHeight = transactionData.endHeights[input.index] as number | undefined;\n    if (endHeight === undefined) {\n      return undefined;\n    }\n\n    const claimed = transactionData.claimed[input.index];\n\n    return {\n      output,\n      startHeight: transactionData.startHeight,\n      endHeight,\n      claimed: !!claimed,\n    };\n  };\n\n  private start(): void {\n    this.mutableBlock$ = new Subject();\n    this.mutablePersistingBlocks = false;\n    this.mutableBlockQueue = new PriorityQueue({\n      comparator: (a, b) => a.block.index - b.block.index,\n    });\n\n    this.mutableInQueue = new Set();\n    this.mutableDoneRunningResolve = undefined;\n    this.mutableRunning = true;\n    logger.info({ title: 'neo_blockchain_start' }, 'NEO blockchain started.');\n  }\n\n  // private readonly getVotes = async (transactions: readonly Transaction[]): Promise<readonly Vote[]> => {\n  //   const inputs = await Promise.all(\n  //     transactions.map(async (transaction) =>\n  //       transaction.getReferences({\n  //         getOutput: this.output.get,\n  //       }),\n  //     ),\n  //   ).then((results) =>\n  //     results.reduce((acc, inputResults) => acc.concat(inputResults), []).map((output) => ({\n  //       address: output.address,\n  //       asset: output.asset,\n  //       value: output.value.neg(),\n  //     })),\n  //   );\n\n  //   const outputs = transactions\n  //     .reduce<readonly Output[]>((acc, transaction) => acc.concat(transaction.outputs), [])\n  //     .map((output) => ({\n  //       address: output.address,\n  //       asset: output.asset,\n  //       value: output.value,\n  //     }));\n\n  //   const changes = _.fromPairs(\n  //     Object.entries(\n  //       _.groupBy(\n  //         inputs\n  //           .concat(outputs)\n  //           .filter((output) => common.uInt256Equal(output.asset, this.settings.governingToken.hash)),\n\n  //         (output) => common.uInt160ToHex(output.address),\n  //       ),\n  //     ).map(([addressHex, addressOutputs]) => [\n  //       addressHex,\n  //       addressOutputs.reduce((acc, output) => acc.add(output.value), utils.ZERO),\n  //     ]),\n  //   );\n\n  //   const votes = await this.account.all$\n  //     .pipe(\n  //       filter((account) => account.votes.length > 0),\n  //       map((account) => {\n  //         let balance = account.balances[this.settings.governingToken.hashHex];\n  //         balance = balance === undefined ? utils.ZERO : balance;\n  //         const change = changes[account.hashHex];\n  //         balance = balance.add(change === undefined ? utils.ZERO : change);\n\n  //         return balance.lte(utils.ZERO)\n  //           ? undefined\n  //           : {\n  //               publicKeys: account.votes,\n  //               count: balance,\n  //             };\n  //       }),\n  //       toArray(),\n  //     )\n  //     .toPromise();\n  //   if (votes.length === 0) {\n  //     return [\n  //       {\n  //         publicKeys: this.settings.standbyValidators,\n  //         count: this.settings.governingToken.asset.amount,\n  //       },\n  //     ];\n  //   }\n\n  //   return votes.filter(commonUtils.notNull);\n  // };\n\n  private async persistBlockInternal(block: Block, unsafe?: boolean): Promise<void> {\n    globalStats.record([\n      {\n        measure: blockProgress,\n        value: block.index,\n      },\n    ]);\n\n    if (!unsafe) {\n      await this.verifyBlock(block);\n    }\n\n    const blockchain = this.createWriteBlockchain();\n\n    await blockchain.persistBlock(block);\n    await this.storage.commit(blockchain.getChangeSet());\n\n    this.mutablePreviousBlock = this.mutableCurrentBlock;\n    this.mutableCurrentBlock = block;\n    this.mutableCurrentHeader = block.header;\n  }\n\n  private createWriteBlockchain(): WriteBatchBlockchain {\n    return new WriteBatchBlockchain({\n      settings: this.settings,\n      currentBlock: this.mutableCurrentBlock,\n      currentHeader: this.mutableCurrentHeader,\n      storage: this.storage,\n      vm: this.vm,\n      getValidators: this.getValidators,\n    });\n  }\n}\n","// tslint:disable: match-default-export-name\nimport fs from 'fs-extra';\nimport nodePath from 'path';\nimport pino from 'pino';\nimport { getConfiguration } from './getConfiguration';\n\nconst config = getConfiguration();\nconst mutablePathRecord: Record<string, string | undefined> = {};\n\nconst getPinoDestination = (path: string, name: string) => {\n  const logPath = nodePath.resolve(path, name, `${name}.log`);\n  fs.ensureDirSync(nodePath.dirname(logPath));\n\n  return process.env.NODE_ENV === 'production' ? pino.extreme(logPath) : pino.destination(logPath);\n};\n\nconst createLogger = (name: keyof typeof config) => {\n  const { path, level } = config[name];\n  mutablePathRecord[name] = path;\n\n  return path === undefined\n    ? pino({ name, level, useLevelLabels: true })\n    : pino({ name, level, useLevelLabels: true }, getPinoDestination(path, name));\n};\n\nexport const editorLogger = createLogger('editor-server');\nexport const serverLogger = createLogger('server');\nexport const nodeLogger = createLogger('node');\nexport const cliLogger = createLogger('cli');\nexport const httpLogger = createLogger('http');\nexport const testLogger = createLogger('test');\n\nexport const getFinalLogger = (logger: pino.Logger) => pino.final(logger);\nexport const getLogPath = (name: keyof typeof config) => mutablePathRecord[name];\n","import { BlockBase, Header } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class HeaderStackItem extends EquatableKeyStackItem<Header> {\n  public asHeader(): Header {\n    return this.value;\n  }\n\n  public asBlockBase(): BlockBase {\n    return this.value;\n  }\n}\n","import { Block, BlockBase, Header } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class BlockStackItem extends EquatableKeyStackItem<Block> {\n  public asBlock(): Block {\n    return this.value;\n  }\n\n  public asHeader(): Header {\n    return this.value.header;\n  }\n\n  public asBlockBase(): BlockBase {\n    return this.value;\n  }\n}\n","import { Transaction } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class TransactionStackItem extends EquatableKeyStackItem<Transaction> {\n  public asTransaction(): Transaction {\n    return this.value;\n  }\n}\n","import { Account } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class AccountStackItem extends EquatableKeyStackItem<Account> {\n  public asAccount(): Account {\n    return this.value;\n  }\n}\n","import { InvalidContractParameterTypeError, InvalidContractParameterTypeJSONError } from '../errors';\nimport { ContractParameterTypeJSON } from './types';\n\nexport enum ContractParameterTypeModel {\n  Signature = 0x00,\n  Boolean = 0x01,\n  Integer = 0x02,\n  Hash160 = 0x03,\n  Hash256 = 0x04,\n  ByteArray = 0x05,\n  PublicKey = 0x06,\n  String = 0x07,\n  Array = 0x10,\n  Map = 0x12,\n  InteropInterface = 0xf0,\n  Void = 0xff,\n}\n\nexport const isContractParameterType = (value: number): value is ContractParameterTypeModel =>\n  // tslint:disable-next-line strict-type-predicates\n  ContractParameterTypeModel[value] !== undefined;\n\nexport const assertContractParameterType = (value: number): ContractParameterTypeModel => {\n  if (isContractParameterType(value)) {\n    return value;\n  }\n  throw new InvalidContractParameterTypeError(value);\n};\n\nexport const toJSONContractParameterType = (type: ContractParameterTypeModel): ContractParameterTypeJSON =>\n  assertContractParameterTypeJSON(ContractParameterTypeModel[type]);\n\nconst isContractParameterTypeJSON = (value: string): value is ContractParameterTypeJSON =>\n  // tslint:disable-next-line strict-type-predicates no-any\n  ContractParameterTypeModel[value as any] !== undefined;\n\nexport const assertContractParameterTypeJSON = (value: string): ContractParameterTypeJSON => {\n  if (isContractParameterTypeJSON(value)) {\n    return value;\n  }\n  throw new InvalidContractParameterTypeJSONError(value);\n};\n\nexport const toContractParameterType = (value: ContractParameterTypeJSON): ContractParameterTypeModel =>\n  assertContractParameterType(ContractParameterTypeModel[value]);\n","import { Asset } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class AssetStackItem extends EquatableKeyStackItem<Asset> {\n  public asAsset(): Asset {\n    return this.value;\n  }\n}\n","import { Contract } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class ContractStackItem extends EquatableKeyStackItem<Contract> {\n  public asContract(): Contract {\n    return this.value;\n  }\n}\n","import { ECPoint, UInt160, UInt256 } from '@neo-one/client-common';\nimport { Attribute, ContractParameter, ECPointAttribute, UInt160Attribute, UInt256Attribute } from '@neo-one/node-core';\nimport { BufferStackItem } from './BufferStackItem';\nimport { ECPointStackItem } from './ECPointStackItem';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\nimport { StackItem } from './StackItem';\nimport { StackItemBase } from './StackItemBase';\nimport { UInt160StackItem } from './UInt160StackItem';\nimport { UInt256StackItem } from './UInt256StackItem';\n\nexport class AttributeStackItem extends EquatableKeyStackItem<Attribute> {\n  public asAttribute(): Attribute {\n    return this.value;\n  }\n\n  public asUInt160(): UInt160 {\n    return this.toValueStackItem().asUInt160();\n  }\n\n  public asUInt256(): UInt256 {\n    return this.toValueStackItem().asUInt256();\n  }\n\n  public asECPoint(): ECPoint {\n    return this.toValueStackItem().asECPoint();\n  }\n\n  public asBuffer(): Buffer {\n    return this.toValueStackItem().asBuffer();\n  }\n\n  public toValueStackItem(): StackItem {\n    const { value } = this;\n    if (value instanceof ECPointAttribute) {\n      return new ECPointStackItem(value.value);\n    }\n\n    if (value instanceof UInt160Attribute) {\n      return new UInt160StackItem(value.value);\n    }\n\n    if (value instanceof UInt256Attribute) {\n      return new UInt256StackItem(value.value);\n    }\n\n    return new BufferStackItem(value.value);\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return this.toValueStackItem().toContractParameter();\n  }\n\n  public asAttributeStackItem(): AttributeStackItem {\n    return this;\n  }\n}\n","import { Input } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class InputStackItem extends EquatableKeyStackItem<Input> {\n  public asInput(): Input {\n    return this.value;\n  }\n}\n","import { Output } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class OutputStackItem extends EquatableKeyStackItem<Output> {\n  public asOutput(): Output {\n    return this.value;\n  }\n}\n","import { Witness } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class WitnessStackItem extends EquatableKeyStackItem<Witness> {\n  public asWitness(): Witness {\n    return this.value;\n  }\n}\n","import { EnumeratorStackItem } from './EnumeratorStackItem';\nimport { StackItemBase } from './StackItemBase';\nimport { StackItemIterator } from './StackItemIterator';\n\nexport class IteratorStackItem extends EnumeratorStackItem<\n  { readonly key: StackItemBase; readonly value: StackItemBase },\n  StackItemIterator\n> {\n  public asIterator(): StackItemIterator {\n    return this.value;\n  }\n}\n","/// <reference types=\"@reactivex/ix-es2015-cjs\" />\nimport { AsyncIterableX } from '@reactivex/ix-es2015-cjs/asynciterable/asynciterablex';\nimport { concat } from '@reactivex/ix-es2015-cjs/asynciterable/concat';\nimport { map } from '@reactivex/ix-es2015-cjs/asynciterable/pipe/map';\nimport { InvalidStorageStackItemIteratorError } from './errors';\nimport { StackItemBase } from './StackItemBase';\nimport { StackItemEnumerator } from './StackItemEnumerator';\n\ninterface Value {\n  readonly key: StackItemBase;\n  readonly value: StackItemBase;\n}\n\nexport class StackItemIterator extends StackItemEnumerator<Value> {\n  public key(): StackItemBase {\n    const { mutableCurrent } = this;\n    if (mutableCurrent === undefined) {\n      throw new InvalidStorageStackItemIteratorError();\n    }\n\n    return mutableCurrent.key;\n  }\n\n  public keys(): StackItemEnumerator {\n    const iterable = AsyncIterableX.from(this.enumerator as AsyncIterableIterator<Value>).pipe<{\n      value: StackItemBase;\n    }>(map(({ key }) => ({ value: key })));\n\n    return new StackItemEnumerator(iterable[Symbol.asyncIterator]());\n  }\n\n  public values(): StackItemEnumerator {\n    const iterable = AsyncIterableX.from(this.enumerator as AsyncIterableIterator<Value>).pipe<{\n      value: StackItemBase;\n    }>(map(({ value }) => ({ value })));\n\n    return new StackItemEnumerator(iterable[Symbol.asyncIterator]());\n  }\n\n  public concatIterator(other: StackItemIterator): StackItemIterator {\n    const iterable = concat(\n      AsyncIterableX.from(this.enumerator as AsyncIterableIterator<Value>),\n      AsyncIterableX.from(other.enumerator as AsyncIterableIterator<Value>),\n    );\n\n    return new StackItemIterator(iterable[Symbol.asyncIterator]());\n  }\n}\n","import { Validator } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class ValidatorStackItem extends EquatableKeyStackItem<Validator> {\n  public asValidator(): Validator {\n    return this.value;\n  }\n}\n","import { ConsensusPayload } from '@neo-one/node-core';\nimport { EquatableKeyStackItem } from './EquatableKeyStackItem';\n\nexport class ConsensusPayloadStackItem extends EquatableKeyStackItem<ConsensusPayload> {\n  public asConsensusPayload(): ConsensusPayload {\n    return this.value;\n  }\n}\n","import { InvalidStateDescriptorTypeError } from '../errors';\n\nexport enum StateDescriptorTypeModel {\n  Account = 0x40,\n  Validator = 0x48,\n}\n\nconst isStateDescriptorType = (value: number): value is StateDescriptorTypeModel =>\n  // tslint:disable-next-line strict-type-predicates\n  StateDescriptorTypeModel[value] !== undefined;\n\nexport const assertStateDescriptorType = (value: number): StateDescriptorTypeModel => {\n  if (isStateDescriptorType(value)) {\n    return value;\n  }\n  throw new InvalidStateDescriptorTypeError(value);\n};\n","import { common, crypto, UInt256Hex, utils } from '@neo-one/client-common';\nimport { nodeLogger } from '@neo-one/logger';\nimport { Consensus, ConsensusOptions } from '@neo-one/node-consensus';\nimport {\n  Block,\n  Blockchain,\n  ConnectedPeer,\n  ConsensusPayload,\n  createEndpoint,\n  CreateNetwork,\n  Endpoint,\n  getEndpointConfig,\n  Header,\n  MerkleTree,\n  NegotiateResult,\n  Network,\n  NetworkEventMessage,\n  Node as INode,\n  Peer,\n  RegisterTransaction,\n  RelayTransactionResult,\n  Transaction,\n  TransactionType,\n  VerifyTransactionResult,\n} from '@neo-one/node-core';\nimport { finalize, Labels, labelToTag, neverComplete, utils as commonUtils } from '@neo-one/utils';\nimport { AggregationType, globalStats, MeasureUnit } from '@neo-one/client-switch';\nimport { ScalingBloem } from 'bloem';\n// tslint:disable-next-line:match-default-export-name\nimport BloomFilter from 'bloom-filter';\nimport { BN } from 'bn.js';\nimport fetch from 'cross-fetch';\nimport { Address6 } from 'ip-address';\nimport _ from 'lodash';\nimport LRUCache from 'lru-cache';\nimport { combineLatest, defer, Observable, of as _of } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, take } from 'rxjs/operators';\nimport { Command } from './Command';\nimport { AlreadyConnectedError, NegotiationError } from './errors';\nimport { Message, MessageTransform, MessageValue } from './Message';\nimport {\n  AddrPayload,\n  FilterAddPayload,\n  FilterLoadPayload,\n  GetBlocksPayload,\n  HeadersPayload,\n  InventoryType,\n  InvPayload,\n  MerkleBlockPayload,\n  NetworkAddress,\n  SERVICES,\n  VersionPayload,\n} from './payload';\nimport { PeerData } from './PeerData';\n\nconst logger = nodeLogger.child({ component: 'node-protocol' });\n\nconst messageReceivedTag = labelToTag(Labels.COMMAND_NAME);\n\nconst messagesReceived = globalStats.createMeasureInt64('messages/received', MeasureUnit.UNIT);\nconst messagesFailed = globalStats.createMeasureInt64('messages/failed', MeasureUnit.UNIT);\nconst mempoolSize = globalStats.createMeasureInt64('mempool/size', MeasureUnit.UNIT);\n\nconst NEO_PROTOCOL_MESSAGES_RECEIVED_TOTAL = globalStats.createView(\n  'neo_protocol_messages_received_total',\n  messagesReceived,\n  AggregationType.COUNT,\n  [messageReceivedTag],\n  'number of messages received',\n);\nglobalStats.registerView(NEO_PROTOCOL_MESSAGES_RECEIVED_TOTAL);\n\nconst NEO_PROTOCOL_MESSAGES_FAILURES_TOTAL = globalStats.createView(\n  'neo_protocol_messages_failures_total',\n  messagesFailed,\n  AggregationType.COUNT,\n  [messageReceivedTag],\n  'number of message failures',\n);\nglobalStats.registerView(NEO_PROTOCOL_MESSAGES_FAILURES_TOTAL);\n\nconst NEO_PROTOCOL_MEMPOOL_SIZE = globalStats.createView(\n  'neo_protocol_mempool_size',\n  mempoolSize,\n  AggregationType.LAST_VALUE,\n  [],\n  'current mempool size',\n);\nglobalStats.registerView(NEO_PROTOCOL_MEMPOOL_SIZE);\n\nexport interface TransactionAndFee {\n  readonly transaction: Transaction;\n  readonly networkFee: BN;\n}\n\nexport interface Environment {\n  readonly externalPort?: number;\n}\nexport interface Options {\n  readonly consensus?: {\n    readonly enabled: boolean;\n    readonly options: ConsensusOptions;\n  };\n  readonly rpcURLs?: readonly string[];\n  readonly unhealthyPeerSeconds?: number;\n}\n\nconst createPeerBloomFilter = ({\n  filter,\n  k,\n  tweak,\n}: {\n  readonly filter: Buffer;\n  readonly k: number;\n  readonly tweak: number;\n}) =>\n  new BloomFilter({\n    vData: Buffer.from(filter),\n    nHashFuncs: k,\n    nTweak: tweak,\n  });\n\nconst createScalingBloomFilter = () =>\n  new ScalingBloem(0.05, {\n    initial_capacity: 100000,\n    scaling: 4,\n  });\n\nconst compareTransactionAndFees = (val1: TransactionAndFee, val2: TransactionAndFee) => {\n  const a = val1.networkFee.divn(val1.transaction.size);\n  const b = val2.networkFee.divn(val2.transaction.size);\n  if (a.lt(b)) {\n    return -1;\n  }\n  if (b.lt(a)) {\n    return 1;\n  }\n\n  return val1.transaction.hash.compare(val2.transaction.hash);\n};\n\nconst MEM_POOL_SIZE = 5000;\nconst GET_ADDR_PEER_COUNT = 200;\nconst GET_BLOCKS_COUNT = 500;\n// Assume that we get 500 back, but if not, at least request every 10 seconds\nconst GET_BLOCKS_BUFFER = GET_BLOCKS_COUNT / 3;\nconst GET_BLOCKS_TIME_MS = 10000;\nconst GET_BLOCKS_THROTTLE_MS = 1000;\nconst TRIM_MEMPOOL_THROTTLE = 5000;\nconst GET_BLOCKS_CLOSE_COUNT = 2;\nconst UNHEALTHY_PEER_SECONDS = 300;\nconst LOCAL_HOST_ADDRESSES = new Set(['', '0.0.0.0', 'localhost', '127.0.0.1', '::', '::1']);\n\ninterface PeerHealth {\n  readonly healthy: boolean;\n  readonly blockIndex: number | undefined;\n  readonly checkTimeSeconds: number;\n}\n\nexport class Node implements INode {\n  public get consensus(): Consensus | undefined {\n    return this.mutableConsensus;\n  }\n\n  public get connectedPeers(): readonly Endpoint[] {\n    return this.network.connectedPeers.map((peer) => peer.endpoint);\n  }\n\n  public get memPool(): { readonly [hash: string]: Transaction } {\n    return this.mutableMemPool;\n  }\n  public readonly blockchain: Blockchain;\n  // tslint:disable-next-line readonly-keyword\n  private mutableMemPool: { [hash: string]: Transaction };\n  private readonly network: Network<Message, PeerData>;\n  private readonly options$: Observable<Options>;\n  private readonly externalPort: number;\n  private readonly nonce: number;\n  private readonly userAgent: string;\n  private mutableKnownBlockHashes: ScalingBloem;\n  private readonly tempKnownBlockHashes: Set<UInt256Hex>;\n  private mutableKnownTransactionHashes: ScalingBloem;\n  private readonly tempKnownTransactionHashes: Set<UInt256Hex>;\n  private mutableKnownHeaderHashes: ScalingBloem;\n  private readonly tempKnownHeaderHashes: Set<UInt256Hex>;\n  private mutableGetBlocksRequestsIndex: number | undefined;\n  private mutableGetBlocksRequestTime: number | undefined;\n  private mutableGetBlocksRequestsCount: number;\n  private mutableBestPeer: ConnectedPeer<Message, PeerData> | undefined;\n  private mutableUnhealthyPeerSeconds = UNHEALTHY_PEER_SECONDS;\n  private readonly consensusCache: LRUCache<string, ConsensusPayload>;\n  // tslint:disable-next-line readonly-keyword\n  private mutableBlockIndex: { [endpoint: string]: number };\n  private mutableConsensus: Consensus | undefined;\n  private readonly requestBlocks = _.debounce(() => {\n    const peer = this.mutableBestPeer;\n    const previousBlock = this.blockchain.previousBlock;\n    const block = previousBlock === undefined ? this.blockchain.currentBlock : previousBlock;\n    if (peer !== undefined && block.index < peer.data.startHeight) {\n      if (this.mutableGetBlocksRequestsCount > GET_BLOCKS_CLOSE_COUNT) {\n        this.mutableBestPeer = this.findBestPeer(peer);\n        this.network.blacklistAndClose(peer);\n        this.mutableGetBlocksRequestsCount = 0;\n      } else if (this.shouldRequestBlocks()) {\n        if (this.mutableGetBlocksRequestsIndex === block.index) {\n          this.mutableGetBlocksRequestsCount += 1;\n        } else {\n          this.mutableGetBlocksRequestsCount = 1;\n          this.mutableGetBlocksRequestsIndex = block.index;\n        }\n        this.mutableGetBlocksRequestTime = Date.now();\n        this.sendMessage(\n          peer,\n          this.createMessage({\n            command: Command.getblocks,\n            payload: new GetBlocksPayload({\n              hashStart: [block.hash],\n            }),\n          }),\n        );\n      }\n\n      this.requestBlocks();\n    }\n  }, GET_BLOCKS_THROTTLE_MS);\n  private readonly onRequestEndpoints = _.throttle((): void => {\n    this.relay(this.createMessage({ command: Command.getaddr }));\n    // tslint:disable-next-line no-floating-promises\n    this.fetchEndpointsFromRPC();\n  }, 5000);\n\n  // tslint:disable-next-line no-unnecessary-type-annotation\n  private readonly trimMemPool = _.throttle(async (): Promise<void> => {\n    const memPool = Object.values(this.mutableMemPool);\n    if (memPool.length > MEM_POOL_SIZE) {\n      const transactionAndFees = await Promise.all(\n        memPool.map<Promise<TransactionAndFee>>(async (transaction) => {\n          const networkFee = await transaction.getNetworkFee({\n            getOutput: this.blockchain.output.get,\n            governingToken: this.blockchain.settings.governingToken,\n            utilityToken: this.blockchain.settings.utilityToken,\n            fees: this.blockchain.settings.fees,\n            registerValidatorFee: this.blockchain.settings.registerValidatorFee,\n          });\n\n          return { transaction, networkFee };\n        }),\n      );\n\n      const hashesToRemove = _.take<TransactionAndFee>(\n        // tslint:disable-next-line no-array-mutation\n        transactionAndFees.slice().sort(compareTransactionAndFees),\n        this.blockchain.settings.memPoolSize,\n      ).map((transactionAndFee) => transactionAndFee.transaction.hashHex);\n      hashesToRemove.forEach((hash) => {\n        // tslint:disable-next-line no-dynamic-delete\n        delete this.mutableMemPool[hash];\n      });\n      globalStats.record([\n        {\n          measure: mempoolSize,\n          value: Object.keys(this.mutableMemPool).length,\n        },\n      ]);\n    }\n  }, TRIM_MEMPOOL_THROTTLE);\n\n  public constructor({\n    blockchain,\n    createNetwork,\n    environment = {},\n    options$,\n  }: {\n    readonly blockchain: Blockchain;\n    readonly createNetwork: CreateNetwork;\n    readonly environment?: Environment;\n    readonly options$: Observable<Options>;\n  }) {\n    this.blockchain = blockchain;\n    this.network = createNetwork({\n      negotiate: this.negotiate,\n      checkPeerHealth: this.checkPeerHealth,\n      createMessageTransform: () => new MessageTransform(this.blockchain.deserializeWireContext),\n      onMessageReceived: (peer, message: Message) => {\n        this.onMessageReceived(peer, message);\n      },\n      onRequestEndpoints: this.onRequestEndpoints.bind(this),\n      onEvent: this.onEvent,\n    });\n\n    this.options$ = options$;\n\n    const { externalPort = 0 } = environment;\n    this.externalPort = externalPort;\n    this.nonce = Math.floor(Math.random() * utils.UINT_MAX_NUMBER);\n    this.userAgent = `NEO:neo-one-js:1.0.0-preview`;\n\n    this.mutableMemPool = {};\n    this.mutableKnownBlockHashes = createScalingBloomFilter();\n    this.tempKnownBlockHashes = new Set();\n    this.mutableKnownTransactionHashes = createScalingBloomFilter();\n    this.tempKnownTransactionHashes = new Set();\n    this.mutableKnownHeaderHashes = createScalingBloomFilter();\n    this.tempKnownHeaderHashes = new Set();\n    this.mutableGetBlocksRequestsCount = 1;\n    this.consensusCache = new LRUCache(10000);\n    this.mutableBlockIndex = {};\n  }\n\n  public async reset(): Promise<void> {\n    this.mutableMemPool = {};\n    this.mutableKnownBlockHashes = createScalingBloomFilter();\n    this.tempKnownBlockHashes.clear();\n    this.mutableKnownTransactionHashes = createScalingBloomFilter();\n    this.tempKnownTransactionHashes.clear();\n    this.mutableKnownHeaderHashes = createScalingBloomFilter();\n    this.tempKnownHeaderHashes.clear();\n    this.mutableGetBlocksRequestsCount = 1;\n    this.consensusCache.reset();\n    this.mutableBlockIndex = {};\n  }\n\n  // tslint:disable-next-line no-any\n  public start$(): Observable<any> {\n    const network$ = defer(async () => {\n      this.network.start();\n      logger.debug({ title: 'neo_protocol_start' }, 'Protocol started.');\n    }).pipe(\n      neverComplete(),\n      finalize(() => {\n        this.network.stop();\n        logger.debug({ title: 'neo_protocol_stop' }, 'Protocol stopped.');\n      }),\n    );\n\n    const defaultOptions = {\n      enabled: false,\n      options: { privateKey: 'unused', privateNet: false },\n    };\n\n    const consensus$ = this.options$.pipe(\n      map(({ consensus = defaultOptions }) => consensus.enabled),\n      distinctUntilChanged(),\n      switchMap((enabled) => {\n        if (enabled) {\n          const mutableConsensus = new Consensus({\n            options$: this.options$.pipe(\n              map(({ consensus = defaultOptions }) => consensus.options),\n              distinctUntilChanged(),\n            ),\n\n            node: this,\n          });\n\n          this.mutableConsensus = mutableConsensus;\n\n          return mutableConsensus.start$();\n        }\n\n        return _of(undefined);\n      }),\n    );\n\n    const options$ = this.options$.pipe(\n      map(({ unhealthyPeerSeconds = UNHEALTHY_PEER_SECONDS }) => {\n        this.mutableUnhealthyPeerSeconds = unhealthyPeerSeconds;\n      }),\n    );\n\n    return combineLatest([network$, consensus$, options$]);\n  }\n\n  public async relayTransaction(\n    transaction: Transaction,\n    {\n      throwVerifyError = false,\n      forceAdd = false,\n    }: { readonly throwVerifyError?: boolean; readonly forceAdd?: boolean } = {\n      throwVerifyError: false,\n      forceAdd: false,\n    },\n  ): Promise<RelayTransactionResult> {\n    const result = {};\n\n    if (\n      transaction.type === TransactionType.Miner ||\n      (this.mutableMemPool[transaction.hashHex] as Transaction | undefined) !== undefined ||\n      this.tempKnownTransactionHashes.has(transaction.hashHex)\n    ) {\n      return result;\n    }\n\n    if (!this.mutableKnownTransactionHashes.has(transaction.hash)) {\n      this.tempKnownTransactionHashes.add(transaction.hashHex);\n\n      try {\n        const memPool = Object.values(this.mutableMemPool);\n        if (memPool.length > MEM_POOL_SIZE / 2 && !forceAdd) {\n          this.mutableKnownTransactionHashes.add(transaction.hash);\n\n          return result;\n        }\n        // tslint:disable-next-line prefer-immediate-return\n        let logLabels: {} = { [Labels.NEO_TRANSACTION_HASH]: transaction.hashHex };\n        let finalResult: RelayTransactionResult;\n        try {\n          let foundTransaction;\n          try {\n            foundTransaction = await this.blockchain.transaction.tryGet({\n              hash: transaction.hash,\n            });\n          } finally {\n            logLabels = {\n              [Labels.NEO_TRANSACTION_FOUND]: foundTransaction !== undefined,\n              ...logLabels,\n            };\n          }\n          let verifyResult: VerifyTransactionResult | undefined;\n          if (foundTransaction === undefined) {\n            verifyResult = await this.blockchain.verifyTransaction({\n              transaction,\n              memPool: Object.values(this.mutableMemPool),\n            });\n            const verified = verifyResult.verifications.every(({ failureMessage }) => failureMessage === undefined);\n\n            if (verified) {\n              this.mutableMemPool[transaction.hashHex] = transaction;\n              globalStats.record([\n                {\n                  measure: mempoolSize,\n                  value: Object.keys(this.mutableMemPool).length,\n                },\n              ]);\n              if (this.mutableConsensus !== undefined) {\n                this.mutableConsensus.onTransactionReceived(transaction);\n              }\n              this.relayTransactionInternal(transaction);\n              await this.trimMemPool();\n            }\n          }\n\n          this.mutableKnownTransactionHashes.add(transaction.hash);\n\n          finalResult = { verifyResult };\n          logger.debug({ title: 'neo_relay_transaction', ...logLabels });\n        } catch (error) {\n          logger.error({ title: 'neo_relay_transaction', error, ...logLabels });\n          throw error;\n        }\n\n        return finalResult;\n      } catch (error) {\n        if (\n          error.code === undefined ||\n          typeof error.code !== 'string' ||\n          !error.code.includes('VERIFY') ||\n          throwVerifyError\n        ) {\n          throw error;\n        }\n      } finally {\n        this.tempKnownTransactionHashes.delete(transaction.hashHex);\n      }\n    }\n\n    return result;\n  }\n\n  public async relayBlock(block: Block): Promise<void> {\n    await this.persistBlock(block);\n  }\n\n  public relayConsensusPayload(payload: ConsensusPayload): void {\n    const message = this.createMessage({\n      command: Command.inv,\n      payload: new InvPayload({\n        type: InventoryType.Consensus,\n        hashes: [payload.hash],\n      }),\n    });\n\n    this.consensusCache.set(payload.hashHex, payload);\n    this.relay(message);\n  }\n\n  public syncMemPool(): void {\n    this.relay(this.createMessage({ command: Command.mempool }));\n  }\n\n  private relay(message: Message): void {\n    this.network.relay(message.serializeWire());\n  }\n\n  private relayTransactionInternal(transaction: Transaction): void {\n    const message = this.createMessage({\n      command: Command.inv,\n      payload: new InvPayload({\n        type: InventoryType.Transaction,\n        hashes: [transaction.hash],\n      }),\n    });\n\n    const messagePayload = message.serializeWire();\n    this.network.connectedPeers.forEach((peer) => {\n      if (peer.relay && this.testFilter(peer.data.mutableBloomFilter, transaction)) {\n        peer.write(messagePayload);\n      }\n    });\n  }\n\n  private sendMessage(peer: Peer<Message> | ConnectedPeer<Message, PeerData>, message: Message): void {\n    peer.write(message.serializeWire());\n  }\n  private readonly negotiate = async (peer: Peer<Message>): Promise<NegotiateResult<PeerData>> => {\n    this.sendMessage(\n      peer,\n      this.createMessage({\n        command: Command.version,\n        payload: new VersionPayload({\n          protocolVersion: 0,\n          services: SERVICES.NODE_NETWORK,\n          timestamp: Math.round(Date.now() / 1000),\n          port: this.externalPort,\n          nonce: this.nonce,\n          userAgent: this.userAgent,\n          startHeight: this.blockchain.currentBlockIndex,\n          relay: true,\n        }),\n      }),\n    );\n\n    const message = await peer.receiveMessage(30000);\n    let versionPayload;\n    if (message.value.command === Command.version) {\n      versionPayload = message.value.payload;\n    } else {\n      throw new NegotiationError(message);\n    }\n\n    this.checkVersion(peer, message, versionPayload);\n\n    const { host } = getEndpointConfig(peer.endpoint);\n    let address;\n    if (NetworkAddress.isValid(host)) {\n      address = new NetworkAddress({\n        host,\n        port: versionPayload.port,\n        timestamp: versionPayload.timestamp,\n        services: versionPayload.services,\n      });\n    }\n\n    this.sendMessage(peer, this.createMessage({ command: Command.verack }));\n\n    const nextMessage = await peer.receiveMessage(30000);\n    if (nextMessage.value.command !== Command.verack) {\n      throw new NegotiationError(nextMessage);\n    }\n\n    return {\n      data: {\n        nonce: versionPayload.nonce,\n        startHeight: versionPayload.startHeight,\n        mutableBloomFilter: undefined,\n        address,\n      },\n\n      relay: versionPayload.relay,\n    };\n  };\n  private readonly checkPeerHealth = (peer: ConnectedPeer<Message, PeerData>, prevHealth?: PeerHealth) => {\n    const checkTimeSeconds = commonUtils.nowSeconds();\n    const blockIndex = this.mutableBlockIndex[peer.endpoint] as number | undefined;\n\n    // If first check -> healthy\n    if (prevHealth === undefined) {\n      return { healthy: true, checkTimeSeconds, blockIndex };\n    }\n\n    // If seen new block -> healthy + update check time\n    if (prevHealth.blockIndex !== undefined && blockIndex !== undefined && prevHealth.blockIndex < blockIndex) {\n      return { healthy: true, checkTimeSeconds, blockIndex };\n    }\n\n    // If not seen a block or a new block BUT it has NOT been a long\n    // time -> healthy\n    if (\n      prevHealth.blockIndex === blockIndex &&\n      commonUtils.nowSeconds() - prevHealth.checkTimeSeconds < this.mutableUnhealthyPeerSeconds\n    ) {\n      return {\n        healthy: true,\n        checkTimeSeconds: prevHealth.checkTimeSeconds,\n        blockIndex: prevHealth.blockIndex,\n      };\n    }\n\n    return { healthy: false, checkTimeSeconds, blockIndex };\n  };\n  private readonly onEvent = (event: NetworkEventMessage<Message, PeerData>) => {\n    if (event.event === 'PEER_CONNECT_SUCCESS') {\n      const { connectedPeer } = event;\n      if (\n        this.mutableBestPeer === undefined ||\n        // Only change best peer at most every 100 blocks\n        this.mutableBestPeer.data.startHeight + 100 < connectedPeer.data.startHeight\n      ) {\n        this.mutableBestPeer = connectedPeer;\n        this.resetRequestBlocks();\n        this.requestBlocks();\n      }\n    } else if (\n      event.event === 'PEER_CLOSED' &&\n      this.mutableBestPeer !== undefined &&\n      this.mutableBestPeer.endpoint === event.peer.endpoint\n    ) {\n      this.mutableBestPeer = this.findBestPeer();\n      this.resetRequestBlocks();\n      this.requestBlocks();\n    }\n  };\n\n  private findBestPeer(bestPeer?: ConnectedPeer<Message, PeerData>): ConnectedPeer<Message, PeerData> | undefined {\n    let peers = this.network.connectedPeers;\n    if (bestPeer !== undefined) {\n      peers = peers.filter((peer) => peer.endpoint !== bestPeer.endpoint);\n    }\n    const result = _.maxBy(peers, (peer) => peer.data.startHeight);\n    if (result === undefined) {\n      return undefined;\n    }\n\n    return _.shuffle(peers.filter((peer) => peer.data.startHeight === result.data.startHeight))[0];\n  }\n\n  private resetRequestBlocks(): void {\n    this.mutableGetBlocksRequestsIndex = undefined;\n    this.mutableGetBlocksRequestsCount = 0;\n  }\n\n  private shouldRequestBlocks(): boolean {\n    const block = this.blockchain.currentBlock;\n    const getBlocksRequestTime = this.mutableGetBlocksRequestTime;\n\n    return (\n      this.mutableGetBlocksRequestsIndex === undefined ||\n      block.index - this.mutableGetBlocksRequestsIndex > GET_BLOCKS_BUFFER ||\n      getBlocksRequestTime === undefined ||\n      Date.now() - getBlocksRequestTime > GET_BLOCKS_TIME_MS\n    );\n  }\n\n  private checkVersion(peer: Peer<Message>, message: Message, version: VersionPayload): void {\n    if (version.nonce === this.nonce) {\n      this.network.permanentlyBlacklist(peer.endpoint);\n      throw new NegotiationError(message, 'Nonce equals my nonce.');\n    }\n\n    const connectedPeer = this.network.connectedPeers.find((otherPeer) => version.nonce === otherPeer.data.nonce);\n\n    if (connectedPeer !== undefined) {\n      throw new AlreadyConnectedError('Already connected to nonce.');\n    }\n  }\n\n  private ready(): boolean {\n    const peer = this.mutableBestPeer;\n    const block = this.blockchain.currentBlock;\n\n    return peer !== undefined && block.index >= peer.data.startHeight;\n  }\n\n  private async fetchEndpointsFromRPC(): Promise<void> {\n    try {\n      await this.doFetchEndpointsFromRPC();\n    } catch {\n      // ignore, logged deeper in the stack\n    }\n  }\n\n  private async doFetchEndpointsFromRPC(): Promise<void> {\n    const { rpcURLs = [] } = await this.options$.pipe(take(1)).toPromise();\n    await Promise.all(rpcURLs.map(async (rpcURL) => this.fetchEndpointsFromRPCURL(rpcURL)));\n  }\n\n  private async fetchEndpointsFromRPCURL(rpcURL: string): Promise<void> {\n    try {\n      const response = await fetch(rpcURL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: 'getpeers',\n          params: [],\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch peers from ${rpcURL}: ${response.status} ${response.statusText}`);\n      }\n\n      const result = await response.json();\n\n      if (\n        typeof result === 'object' &&\n        result.error !== undefined &&\n        typeof result.error === 'object' &&\n        typeof result.error.code === 'number' &&\n        typeof result.error.message === 'string'\n      ) {\n        throw new Error(result.error);\n      }\n\n      const connected: ReadonlyArray<{ readonly address: string; readonly port: number }> = result.result.connected;\n      connected\n        .map((peer) => {\n          const { address, port } = peer;\n\n          let canonicalForm = new Address6(address).canonicalForm() as string | undefined | null;\n\n          if (canonicalForm == undefined) {\n            canonicalForm = Address6.fromAddress4(address).canonicalForm() as string | undefined | null;\n          }\n\n          return { host: canonicalForm == undefined ? '' : canonicalForm, port };\n        })\n        .filter((endpoint) => !LOCAL_HOST_ADDRESSES.has(endpoint.host))\n        .map((endpoint) =>\n          createEndpoint({\n            type: 'tcp',\n            host: endpoint.host,\n            port: endpoint.port,\n          }),\n        )\n        .forEach((endpoint) => this.network.addEndpoint(endpoint));\n    } catch (error) {\n      logger.error(\n        { title: 'neo_protocol_fetch_endpoints_error', [Labels.HTTP_URL]: rpcURL, error },\n        `Failed to fetch endpoints from ${rpcURL}`,\n      );\n    }\n  }\n\n  private onMessageReceived(peer: ConnectedPeer<Message, PeerData>, message: Message): void {\n    try {\n      new Promise<void>(async (resolve) => {\n        switch (message.value.command) {\n          case Command.addr:\n            this.onAddrMessageReceived(message.value.payload);\n            break;\n          case Command.block:\n            await this.onBlockMessageReceived(peer, message.value.payload);\n\n            break;\n          case Command.consensus:\n            await this.onConsensusMessageReceived(message.value.payload);\n\n            break;\n          case Command.filteradd:\n            this.onFilterAddMessageReceived(peer, message.value.payload);\n\n            break;\n          case Command.filterclear:\n            this.onFilterClearMessageReceived(peer);\n            break;\n          case Command.filterload:\n            this.onFilterLoadMessageReceived(peer, message.value.payload);\n\n            break;\n          case Command.getaddr:\n            this.onGetAddrMessageReceived(peer);\n            break;\n          case Command.getblocks:\n            await this.onGetBlocksMessageReceived(peer, message.value.payload);\n\n            break;\n          case Command.getdata:\n            await this.onGetDataMessageReceived(peer, message.value.payload);\n\n            break;\n          case Command.getheaders:\n            await this.onGetHeadersMessageReceived(peer, message.value.payload);\n\n            break;\n          case Command.headers:\n            await this.onHeadersMessageReceived(peer, message.value.payload);\n\n            break;\n          case Command.inv:\n            this.onInvMessageReceived(peer, message.value.payload);\n            break;\n          case Command.mempool:\n            this.onMemPoolMessageReceived(peer);\n            break;\n          case Command.tx:\n            await this.onTransactionReceived(message.value.payload);\n            break;\n          case Command.verack:\n            this.onVerackMessageReceived(peer);\n            break;\n          case Command.version:\n            this.onVersionMessageReceived(peer);\n            break;\n          case Command.alert:\n            break;\n          case Command.merkleblock:\n            break;\n          case Command.notfound:\n            break;\n          case Command.ping:\n            break;\n          case Command.pong:\n            break;\n          case Command.reject:\n            break;\n          default:\n            commonUtils.assertNever(message.value);\n        }\n        resolve();\n      }).catch(() => {\n        // do nothing\n      });\n    } catch {\n      // do nothing\n    }\n  }\n\n  private onAddrMessageReceived(addr: AddrPayload): void {\n    addr.addresses\n      .filter((address) => !LOCAL_HOST_ADDRESSES.has(address.host))\n      .map((address) =>\n        createEndpoint({\n          type: 'tcp',\n          host: address.host,\n          port: address.port,\n        }),\n      )\n      .forEach((endpoint) => this.network.addEndpoint(endpoint));\n  }\n\n  private async onBlockMessageReceived(peer: ConnectedPeer<Message, PeerData>, block: Block): Promise<void> {\n    const blockIndex = this.mutableBlockIndex[peer.endpoint] as number | undefined;\n    this.mutableBlockIndex[peer.endpoint] = Math.max(block.index, blockIndex === undefined ? 0 : blockIndex);\n\n    await this.relayBlock(block);\n  }\n\n  private async persistBlock(block: Block): Promise<void> {\n    if (this.blockchain.currentBlockIndex > block.index || this.tempKnownBlockHashes.has(block.hashHex)) {\n      return;\n    }\n\n    if (!this.mutableKnownBlockHashes.has(block.hash)) {\n      this.tempKnownBlockHashes.add(block.hashHex);\n\n      try {\n        const foundBlock = await this.blockchain.block.tryGet({\n          hashOrIndex: block.hash,\n        });\n\n        if (foundBlock === undefined) {\n          try {\n            await this.blockchain.persistBlock({ block });\n            if (this.mutableConsensus !== undefined) {\n              this.mutableConsensus.onPersistBlock();\n            }\n\n            const peer = this.mutableBestPeer;\n            if (peer !== undefined && block.index > peer.data.startHeight) {\n              this.relay(\n                this.createMessage({\n                  command: Command.inv,\n                  payload: new InvPayload({\n                    type: InventoryType.Block,\n                    hashes: [block.hash],\n                  }),\n                }),\n              );\n            }\n            logger.info({ title: 'neo_relay_block', [Labels.NEO_BLOCK_INDEX]: block.index });\n          } catch (error) {\n            logger.error({ title: 'neo_relay_block', [Labels.NEO_BLOCK_INDEX]: block.index, error });\n            throw error;\n          }\n        }\n\n        this.mutableKnownBlockHashes.add(block.hash);\n        this.mutableKnownHeaderHashes.add(block.hash);\n        block.transactions.forEach((transaction) => {\n          // tslint:disable-next-line no-dynamic-delete\n          delete this.mutableMemPool[transaction.hashHex];\n          this.mutableKnownTransactionHashes.add(transaction.hash);\n        });\n        globalStats.record([\n          {\n            measure: mempoolSize,\n            value: Object.keys(this.mutableMemPool).length,\n          },\n        ]);\n      } finally {\n        this.tempKnownBlockHashes.delete(block.hashHex);\n      }\n    }\n  }\n\n  private async onConsensusMessageReceived(payload: ConsensusPayload): Promise<void> {\n    const { consensus } = this;\n    if (consensus !== undefined) {\n      await this.blockchain.verifyConsensusPayload(payload);\n      consensus.onConsensusPayloadReceived(payload);\n    }\n  }\n\n  private onFilterAddMessageReceived(peer: ConnectedPeer<Message, PeerData>, filterAdd: FilterAddPayload): void {\n    if (peer.data.mutableBloomFilter !== undefined) {\n      peer.data.mutableBloomFilter.insert(filterAdd.data);\n    }\n  }\n\n  private onFilterClearMessageReceived(peer: ConnectedPeer<Message, PeerData>): void {\n    // tslint:disable-next-line no-object-mutation\n    peer.data.mutableBloomFilter = undefined;\n  }\n\n  private onFilterLoadMessageReceived(peer: ConnectedPeer<Message, PeerData>, filterLoad: FilterLoadPayload): void {\n    // tslint:disable-next-line no-object-mutation\n    peer.data.mutableBloomFilter = createPeerBloomFilter(filterLoad);\n  }\n\n  private onGetAddrMessageReceived(peer: ConnectedPeer<Message, PeerData>): void {\n    const addresses = _.take(\n      _.shuffle(\n        this.network.connectedPeers.map((connectedPeer) => connectedPeer.data.address).filter(commonUtils.notNull),\n      ),\n      GET_ADDR_PEER_COUNT,\n    );\n\n    if (addresses.length > 0) {\n      this.sendMessage(\n        peer,\n        this.createMessage({\n          command: Command.addr,\n          payload: new AddrPayload({ addresses }),\n        }),\n      );\n    }\n  }\n\n  private async onGetBlocksMessageReceived(\n    peer: ConnectedPeer<Message, PeerData>,\n    getBlocks: GetBlocksPayload,\n  ): Promise<void> {\n    const headers = await this.getHeaders(getBlocks, this.blockchain.currentBlockIndex);\n\n    this.sendMessage(\n      peer,\n      this.createMessage({\n        command: Command.inv,\n        payload: new InvPayload({\n          type: InventoryType.Block,\n          hashes: headers.map((header) => header.hash),\n        }),\n      }),\n    );\n  }\n\n  private async onGetDataMessageReceived(peer: ConnectedPeer<Message, PeerData>, getData: InvPayload): Promise<void> {\n    switch (getData.type) {\n      case InventoryType.Transaction:\n        await Promise.all(\n          getData.hashes.map(async (hash) => {\n            let transaction = this.mutableMemPool[common.uInt256ToHex(hash)] as Transaction | undefined;\n            if (transaction === undefined) {\n              transaction = await this.blockchain.transaction.tryGet({ hash });\n            }\n\n            if (transaction !== undefined) {\n              this.sendMessage(\n                peer,\n                this.createMessage({\n                  command: Command.tx,\n                  payload: transaction,\n                }),\n              );\n            }\n          }),\n        );\n\n        break;\n      case InventoryType.Block: // Block\n        await Promise.all(\n          getData.hashes.map(async (hash) => {\n            const block = await this.blockchain.block.tryGet({\n              hashOrIndex: hash,\n            });\n\n            if (block !== undefined) {\n              if (peer.data.mutableBloomFilter === undefined) {\n                this.sendMessage(\n                  peer,\n                  this.createMessage({\n                    command: Command.block,\n                    payload: block,\n                  }),\n                );\n              } else {\n                this.sendMessage(\n                  peer,\n                  this.createMessage({\n                    command: Command.merkleblock,\n                    payload: this.createMerkleBlockPayload({\n                      block,\n                      flags: block.transactions.map((transaction) =>\n                        this.testFilter(peer.data.mutableBloomFilter, transaction),\n                      ),\n                    }),\n                  }),\n                );\n              }\n            }\n          }),\n        );\n\n        break;\n      case InventoryType.Consensus: // Consensus\n        getData.hashes.forEach((hash) => {\n          const payload = this.consensusCache.get(common.uInt256ToHex(hash));\n          if (payload !== undefined) {\n            this.sendMessage(\n              peer,\n              this.createMessage({\n                command: Command.consensus,\n                payload,\n              }),\n            );\n          }\n        });\n        break;\n      default:\n        commonUtils.assertNever(getData.type);\n    }\n  }\n\n  private async onGetHeadersMessageReceived(\n    peer: ConnectedPeer<Message, PeerData>,\n    getBlocks: GetBlocksPayload,\n  ): Promise<void> {\n    const headers = await this.getHeaders(getBlocks, this.blockchain.currentHeader.index);\n\n    this.sendMessage(\n      peer,\n      this.createMessage({\n        command: Command.headers,\n        payload: new HeadersPayload({ headers }),\n      }),\n    );\n  }\n\n  private async onHeadersMessageReceived(\n    peer: ConnectedPeer<Message, PeerData>,\n    headersPayload: HeadersPayload,\n  ): Promise<void> {\n    const headers = headersPayload.headers.filter(\n      (header) => !this.mutableKnownHeaderHashes.has(header.hash) && !this.tempKnownHeaderHashes.has(header.hashHex),\n    );\n\n    if (headers.length > 0) {\n      headers.forEach((header) => {\n        this.tempKnownHeaderHashes.add(header.hashHex);\n      });\n      try {\n        await this.blockchain.persistHeaders(headers);\n        headers.forEach((header) => {\n          this.mutableKnownHeaderHashes.add(header.hash);\n        });\n      } finally {\n        headers.forEach((header) => {\n          this.tempKnownHeaderHashes.delete(header.hashHex);\n        });\n      }\n    }\n\n    if (this.blockchain.currentHeader.index < peer.data.startHeight) {\n      this.sendMessage(\n        peer,\n        this.createMessage({\n          command: Command.getheaders,\n          payload: new GetBlocksPayload({\n            hashStart: [this.blockchain.currentHeader.hash],\n          }),\n        }),\n      );\n    }\n  }\n\n  private onInvMessageReceived(peer: ConnectedPeer<Message, PeerData>, inv: InvPayload): void {\n    let hashes;\n    switch (inv.type) {\n      case InventoryType.Transaction: // Transaction\n        hashes = inv.hashes.filter(\n          (hash) =>\n            !this.mutableKnownTransactionHashes.has(hash) &&\n            !this.tempKnownTransactionHashes.has(common.uInt256ToHex(hash)),\n        );\n\n        break;\n      case InventoryType.Block: // Block\n        hashes = inv.hashes.filter(\n          (hash) =>\n            !this.mutableKnownBlockHashes.has(hash) && !this.tempKnownBlockHashes.has(common.uInt256ToHex(hash)),\n        );\n\n        break;\n      case InventoryType.Consensus: // Consensus\n        hashes = inv.hashes;\n        break;\n      default:\n        commonUtils.assertNever(inv.type);\n        hashes = [];\n    }\n\n    if (hashes.length > 0) {\n      this.sendMessage(\n        peer,\n        this.createMessage({\n          command: Command.getdata,\n          payload: new InvPayload({ type: inv.type, hashes }),\n        }),\n      );\n    }\n  }\n\n  private onMemPoolMessageReceived(peer: ConnectedPeer<Message, PeerData>): void {\n    this.sendMessage(\n      peer,\n      this.createMessage({\n        command: Command.inv,\n        payload: new InvPayload({\n          type: InventoryType.Transaction,\n          hashes: Object.values(this.mutableMemPool).map((transaction) => transaction.hash),\n        }),\n      }),\n    );\n  }\n\n  private async onTransactionReceived(transaction: Transaction): Promise<void> {\n    if (this.ready()) {\n      if (transaction.type === TransactionType.Miner) {\n        if (this.mutableConsensus !== undefined) {\n          this.mutableConsensus.onTransactionReceived(transaction);\n        }\n      } else {\n        await this.relayTransaction(transaction);\n      }\n    }\n  }\n\n  private onVerackMessageReceived(peer: ConnectedPeer<Message, PeerData>): void {\n    peer.close();\n  }\n\n  private onVersionMessageReceived(peer: ConnectedPeer<Message, PeerData>): void {\n    peer.close();\n  }\n\n  private async getHeaders(getBlocks: GetBlocksPayload, maxHeight: number): Promise<readonly Header[]> {\n    let hashStopIndexPromise = Promise.resolve(maxHeight);\n    if (!getBlocks.hashStop.equals(common.ZERO_UINT256)) {\n      hashStopIndexPromise = this.blockchain.header\n        .tryGet({ hashOrIndex: getBlocks.hashStop })\n        .then((hashStopHeader) =>\n          hashStopHeader === undefined ? maxHeight : Math.min(hashStopHeader.index, maxHeight),\n        );\n    }\n    const [hashStartHeaders, hashEnd] = await Promise.all([\n      Promise.all(getBlocks.hashStart.map(async (hash) => this.blockchain.header.tryGet({ hashOrIndex: hash }))),\n\n      hashStopIndexPromise,\n    ]);\n\n    const hashStartHeader = _.head(_.orderBy(hashStartHeaders.filter(commonUtils.notNull), [(header) => header.index]));\n\n    if (hashStartHeader === undefined) {\n      return [];\n    }\n    const hashStart = hashStartHeader.index + 1;\n    if (hashStart > maxHeight) {\n      return [];\n    }\n\n    return Promise.all(\n      _.range(hashStart, Math.min(hashStart + GET_BLOCKS_COUNT, hashEnd)).map(async (index) =>\n        this.blockchain.header.get({ hashOrIndex: index }),\n      ),\n    );\n  }\n\n  private testFilter(bloomFilterIn: BloomFilter | undefined, transaction: Transaction): boolean {\n    const bloomFilter = bloomFilterIn;\n    if (bloomFilter === undefined) {\n      return true;\n    }\n\n    return (\n      bloomFilter.contains(transaction.hash) ||\n      transaction.outputs.some((output) => bloomFilter.contains(output.address)) ||\n      transaction.inputs.some((input) => bloomFilter.contains(input.serializeWire())) ||\n      transaction.scripts.some((script) => bloomFilter.contains(crypto.toScriptHash(script.verification))) ||\n      (transaction.type === TransactionType.Register &&\n        transaction instanceof RegisterTransaction &&\n        bloomFilter.contains(transaction.asset.admin))\n    );\n  }\n\n  private createMerkleBlockPayload({\n    block,\n    flags,\n  }: {\n    readonly block: Block;\n    readonly flags: readonly boolean[];\n  }): MerkleBlockPayload {\n    const tree = new MerkleTree(block.transactions.map((transaction) => transaction.hash)).trim(flags);\n\n    const mutableBuffer = Buffer.allocUnsafe(Math.floor((flags.length + 7) / 8));\n    // tslint:disable-next-line no-loop-statement\n    for (let i = 0; i < flags.length; i += 1) {\n      if (flags[i]) {\n        // tslint:disable-next-line no-bitwise\n        mutableBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n      }\n    }\n\n    return new MerkleBlockPayload({\n      version: block.version,\n      previousHash: block.previousHash,\n      merkleRoot: block.merkleRoot,\n      timestamp: block.timestamp,\n      index: block.index,\n      consensusData: block.consensusData,\n      nextConsensus: block.nextConsensus,\n      script: block.script,\n      transactionCount: block.transactions.length,\n      hashes: tree.toHashArray(),\n      flags: mutableBuffer,\n    });\n  }\n\n  private createMessage(value: MessageValue): Message {\n    return new Message({\n      magic: this.blockchain.settings.messageMagic,\n      value,\n    });\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  createSerializeWire,\n  SerializableWire,\n  SerializeWire,\n  UInt256,\n} from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions } from '@neo-one/node-core';\nexport interface GetBlocksPayloadAdd {\n  readonly hashStart: readonly UInt256[];\n  readonly hashStop?: UInt256;\n}\n\nexport class GetBlocksPayload implements SerializableWire<GetBlocksPayload> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): GetBlocksPayload {\n    const hashStart = reader.readArray(() => reader.readUInt256());\n    const hashStop = reader.readUInt256();\n\n    return new this({ hashStart, hashStop });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): GetBlocksPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hashStart: readonly UInt256[];\n  public readonly hashStop: UInt256;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ hashStart, hashStop = common.ZERO_UINT256 }: GetBlocksPayloadAdd) {\n    this.hashStart = hashStart;\n    this.hashStop = hashStop;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeArray(this.hashStart, (value) => {\n      writer.writeUInt256(value);\n    });\n    writer.writeUInt256(this.hashStop);\n  }\n}\n","import { BinaryWriter, createSerializeWire, SerializableWire, SerializeWire } from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\n\nexport const SERVICES = {\n  NODE_NETWORK: new BN(1),\n};\nexport interface VersionPayloadAdd {\n  readonly protocolVersion: number;\n  readonly services: BN;\n  readonly timestamp: number;\n  readonly port: number;\n  readonly nonce: number;\n  readonly userAgent: string;\n  readonly startHeight: number;\n  readonly relay: boolean;\n}\n\nexport class VersionPayload implements SerializableWire<VersionPayload> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): VersionPayload {\n    const protocolVersion = reader.readUInt32LE();\n    const services = reader.readUInt64LE();\n    const timestamp = reader.readUInt32LE();\n    const port = reader.readUInt16LE();\n    const nonce = reader.readUInt32LE();\n    const userAgent = reader.readVarString(1024);\n    const startHeight = reader.readUInt32LE();\n    const relay = reader.readBoolean();\n\n    return new this({\n      protocolVersion,\n      services,\n      timestamp,\n      port,\n      nonce,\n      userAgent,\n      startHeight,\n      relay,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): VersionPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly protocolVersion: number;\n  public readonly services: BN;\n  public readonly timestamp: number;\n  public readonly port: number;\n  public readonly nonce: number;\n  public readonly userAgent: string;\n  public readonly startHeight: number;\n  public readonly relay: boolean;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({\n    protocolVersion,\n    services,\n    timestamp,\n    port,\n    nonce,\n    userAgent,\n    startHeight,\n    relay,\n  }: VersionPayloadAdd) {\n    this.protocolVersion = protocolVersion;\n    this.services = services;\n    this.timestamp = timestamp;\n    this.port = port;\n    this.nonce = nonce;\n    this.userAgent = userAgent;\n    this.startHeight = startHeight;\n    this.relay = relay;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt32LE(this.protocolVersion);\n    writer.writeUInt64LE(this.services);\n    writer.writeUInt32LE(this.timestamp);\n    writer.writeUInt16LE(this.port);\n    writer.writeUInt32LE(this.nonce);\n    writer.writeVarString(this.userAgent);\n    writer.writeUInt32LE(this.startHeight);\n    writer.writeBoolean(this.relay);\n  }\n}\n","import { BinaryWriter, createSerializeWire, SerializableWire, SerializeWire } from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions } from '@neo-one/node-core';\nimport { NetworkAddress } from './NetworkAddress';\nexport interface AddrPayloadAdd {\n  readonly addresses: readonly NetworkAddress[];\n}\n\nexport class AddrPayload implements SerializableWire<AddrPayload> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): AddrPayload {\n    const { reader } = options;\n    const addresses = reader.readArray(() => NetworkAddress.deserializeWireBase(options));\n\n    return new this({ addresses });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): AddrPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly addresses: readonly NetworkAddress[];\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ addresses }: AddrPayloadAdd) {\n    this.addresses = addresses;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeArray(this.addresses, (address) => address.serializeWireBase(writer));\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  crypto,\n  ECPoint,\n  InvalidFormatError,\n  PrivateKey,\n  UInt256,\n  UInt256Hex,\n} from '@neo-one/client-common';\nimport { Equals, EquatableKey } from '../Equatable';\nimport { VerifyError } from '../errors';\nimport { ScriptContainerType } from '../ScriptContainer';\nimport { DeserializeWireBaseOptions, DeserializeWireOptions, SerializableWire } from '../Serializable';\nimport { BinaryReader, utils } from '../utils';\nimport { VerifyScript } from '../vm';\nimport { Witness } from '../Witness';\nimport { UnsignedConsensusPayload, UnsignedConsensusPayloadAdd } from './UnsignedConsensusPayload';\n\nexport interface ConsensusPayloadAdd extends UnsignedConsensusPayloadAdd {\n  readonly script: Witness;\n}\n\nexport interface ConsensusPayloadGetScriptHashesForVerifyingOptions {\n  readonly getValidators: () => Promise<readonly ECPoint[]>;\n  readonly currentBlockHash: UInt256;\n}\n\nexport interface ConsensusPayloadVerifyOptions extends ConsensusPayloadGetScriptHashesForVerifyingOptions {\n  readonly currentIndex: number;\n  readonly verifyScript: VerifyScript;\n}\n\nexport class ConsensusPayload extends UnsignedConsensusPayload\n  implements SerializableWire<ConsensusPayload>, EquatableKey {\n  public static sign(payload: UnsignedConsensusPayload, key: PrivateKey): ConsensusPayload {\n    return new ConsensusPayload({\n      version: payload.version,\n      previousHash: payload.previousHash,\n      blockIndex: payload.blockIndex,\n      validatorIndex: payload.validatorIndex,\n      timestamp: payload.timestamp,\n      consensusMessage: payload.consensusMessage,\n      script: crypto.createWitness(payload.serializeWire(), key, Witness),\n    });\n  }\n\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): ConsensusPayload {\n    const { reader } = options;\n    const {\n      version,\n      previousHash,\n      blockIndex,\n      validatorIndex,\n      timestamp,\n      consensusMessage,\n    } = super.deserializeUnsignedConsensusPayloadWireBase(options);\n    if (reader.readUInt8() !== 1) {\n      throw new InvalidFormatError(`Expected BinaryReader\\'s readUInt8(0) to be 1. Received: ${reader.readUInt8()}`);\n    }\n    const script = Witness.deserializeWireBase(options);\n\n    return new this({\n      version,\n      previousHash,\n      blockIndex,\n      validatorIndex,\n      timestamp,\n      consensusMessage,\n      script,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): ConsensusPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly script: Witness;\n  public readonly toKeyString = utils.toKeyString(this.constructor as typeof ConsensusPayload, () => this.hashHex);\n  public readonly equals: Equals = utils.equals(this.constructor as typeof ConsensusPayload, this, (other) =>\n    common.uInt256Equal(this.hash, other.hash),\n  );\n  public readonly getScriptHashesForVerifying = utils.lazyAsync(\n    async ({ getValidators, currentBlockHash }: ConsensusPayloadGetScriptHashesForVerifyingOptions) => {\n      if (!common.uInt256Equal(this.previousHash, currentBlockHash)) {\n        throw new VerifyError('Previous hash not equal to current block hash');\n      }\n      const validators = await getValidators();\n      if (validators.length <= this.validatorIndex) {\n        throw new VerifyError('Invalid validator index');\n      }\n\n      return new Set([common.uInt160ToHex(crypto.getVerificationScriptHash(validators[this.validatorIndex]))]);\n    },\n  );\n  private readonly hashInternal = utils.lazy(() => crypto.hash256(this.message));\n  private readonly hashHexInternal = utils.lazy(() => common.uInt256ToHex(this.hash));\n  private readonly messageInternal = utils.lazy(() => this.serializeUnsigned());\n\n  public constructor({\n    version,\n    previousHash,\n    blockIndex,\n    validatorIndex,\n    timestamp,\n    consensusMessage,\n    script,\n  }: ConsensusPayloadAdd) {\n    super({\n      version,\n      previousHash,\n      blockIndex,\n      validatorIndex,\n      timestamp,\n      consensusMessage,\n    });\n\n    this.script = script;\n  }\n\n  public get hash(): UInt256 {\n    return this.hashInternal();\n  }\n\n  public get hashHex(): UInt256Hex {\n    return this.hashHexInternal();\n  }\n\n  public get message(): Buffer {\n    return this.messageInternal();\n  }\n\n  public serializeUnsigned(): Buffer {\n    const writer = new BinaryWriter();\n    super.serializeWireBase(writer);\n\n    return writer.toBuffer();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt8(1);\n    this.script.serializeWireBase(writer);\n  }\n\n  public async verify({\n    verifyScript,\n    getValidators,\n    currentBlockHash,\n    currentIndex,\n  }: ConsensusPayloadVerifyOptions): Promise<void> {\n    if (this.blockIndex !== currentIndex + 1) {\n      throw new VerifyError('Invalid block index.');\n    }\n\n    const scriptHashes = await this.getScriptHashesForVerifying({\n      getValidators,\n      currentBlockHash,\n    });\n\n    const scriptContainer: {\n      type: ScriptContainerType.Consensus;\n      value: ConsensusPayload;\n    } = {\n      type: ScriptContainerType.Consensus,\n      value: this,\n    };\n\n    const results = await Promise.all(\n      [...scriptHashes].map(async (hash) =>\n        verifyScript({\n          scriptContainer,\n          hash: common.hexToUInt160(hash),\n          witness: this.script,\n        }),\n      ),\n    );\n\n    results.forEach(({ failureMessage }) => {\n      if (failureMessage !== undefined) {\n        throw new VerifyError(failureMessage);\n      }\n    });\n  }\n}\n","import { utils } from '@neo-one/utils';\nimport { createDeserializeWire, DeserializeWireBaseOptions } from '../../Serializable';\nimport { ChangeViewConsensusMessage } from './ChangeViewConsensusMessage';\nimport { assertConsensusMessageType, ConsensusMessageType } from './ConsensusMessageType';\nimport { PrepareRequestConsensusMessage } from './PrepareRequestConsensusMessage';\nimport { PrepareResponseConsensusMessage } from './PrepareResponseConsensusMessage';\n\nexport type ConsensusMessage =\n  | ChangeViewConsensusMessage\n  | PrepareRequestConsensusMessage\n  | PrepareResponseConsensusMessage;\n\nexport const deserializeConsensusMessageWireBase = (options: DeserializeWireBaseOptions): ConsensusMessage => {\n  const { reader } = options;\n  const type = assertConsensusMessageType(reader.clone().readUInt8());\n  switch (type) {\n    case ConsensusMessageType.ChangeView:\n      return ChangeViewConsensusMessage.deserializeWireBase(options);\n    case ConsensusMessageType.PrepareRequest:\n      return PrepareRequestConsensusMessage.deserializeWireBase(options);\n    case ConsensusMessageType.PrepareResponse:\n      return PrepareResponseConsensusMessage.deserializeWireBase(options);\n    default:\n      utils.assertNever(type);\n      throw new Error('For TS');\n  }\n};\n\nexport const deserializeConsensusMessageWire = createDeserializeWire(deserializeConsensusMessageWireBase);\n","import { BinaryWriter, createSerializeWire, SerializableWire, SerializeWire } from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions } from '@neo-one/node-core';\nexport interface FilterAddPayloadAdd {\n  readonly data: Buffer;\n}\n\nexport class FilterAddPayload implements SerializableWire<FilterAddPayload> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): FilterAddPayload {\n    const data = reader.readVarBytesLE(520);\n\n    return new this({ data });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): FilterAddPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly data: Buffer;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ data }: FilterAddPayloadAdd) {\n    this.data = data;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeVarBytesLE(this.data);\n  }\n}\n","import {\n  BinaryWriter,\n  createSerializeWire,\n  InvalidFormatError,\n  SerializableWire,\n  SerializeWire,\n} from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions } from '@neo-one/node-core';\nexport interface FilterLoadPayloadAdd {\n  readonly filter: Buffer;\n  readonly k: number;\n  readonly tweak: number;\n}\n\nexport class FilterLoadPayload implements SerializableWire<FilterLoadPayload> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): FilterLoadPayload {\n    const filter = reader.readVarBytesLE(36000);\n    const k = reader.readUInt8();\n    const tweak = reader.readUInt32LE();\n    if (k > 50) {\n      throw new InvalidFormatError(`Expected BinaryReader\\'s readUInt8(0) to be less than 50. Received: ${k}`);\n    }\n\n    return new this({ filter, k, tweak });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): FilterLoadPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly filter: Buffer;\n  public readonly k: number;\n  public readonly tweak: number;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ filter, k, tweak }: FilterLoadPayloadAdd) {\n    this.filter = filter;\n    this.k = k;\n    this.tweak = tweak;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeVarBytesLE(this.filter);\n    writer.writeUInt8(this.k);\n    writer.writeUInt32LE(this.tweak);\n  }\n}\n","import { BinaryWriter, createSerializeWire, SerializableWire, SerializeWire, UInt256 } from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions } from '@neo-one/node-core';\nimport { assertInventoryType, InventoryType } from './InventoryType';\nexport interface InvPayloadAdd {\n  readonly type: InventoryType;\n  readonly hashes: readonly UInt256[];\n}\n\nexport class InvPayload implements SerializableWire<InvPayload> {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): InvPayload {\n    const type = assertInventoryType(reader.readUInt8());\n    const hashes = reader.readArray(() => reader.readUInt256());\n\n    return new this({ type, hashes });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): InvPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly type: InventoryType;\n  public readonly hashes: readonly UInt256[];\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ type, hashes }: InvPayloadAdd) {\n    this.type = type;\n    this.hashes = hashes;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.type);\n    writer.writeArray(this.hashes, (value) => {\n      writer.writeUInt256(value);\n    });\n  }\n}\n","import { BinaryWriter, createSerializeWire, SerializableWire, SerializeWire } from '@neo-one/client-common';\nimport { BinaryReader, DeserializeWireBaseOptions, DeserializeWireOptions, Header } from '@neo-one/node-core';\nexport interface HeadersPayloadAdd {\n  readonly headers: readonly Header[];\n}\n\nexport class HeadersPayload implements SerializableWire<HeadersPayload> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): HeadersPayload {\n    const { reader } = options;\n    const headers = reader.readArray(() => Header.deserializeWireBase(options));\n\n    return new this({ headers });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): HeadersPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly headers: readonly Header[];\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ headers }: HeadersPayloadAdd) {\n    this.headers = headers;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeArray(this.headers, (header) => header.serializeWireBase(writer));\n  }\n}\n","import { InvalidStorageFlagsError, InvalidStorageFlagsJSONError } from '../errors';\nimport { StorageFlagsJSON } from './types';\n\nexport enum StorageFlagsModel {\n  None = 0,\n  Constant = 0x01,\n}\n\nexport const hasStorageFlag = (\n  assetType: StorageFlagsModel,\n  flag: StorageFlagsModel,\n  // tslint:disable-next-line\n): boolean => (assetType & flag) === flag;\n\nconst isStorageFlags = (storageFlags: number): storageFlags is StorageFlagsModel =>\n  // tslint:disable-next-line strict-type-predicates\n  StorageFlagsModel[storageFlags] !== undefined;\n\nexport const assertStorageFlags = (storageFlags: number): StorageFlagsModel => {\n  if (!isStorageFlags(storageFlags)) {\n    throw new InvalidStorageFlagsError(storageFlags);\n  }\n\n  return storageFlags;\n};\n\nexport const toJSONStorageFlags = (type: StorageFlagsModel): StorageFlagsJSON =>\n  assertStorageFlagsJSON(StorageFlagsModel[type]);\n\nconst isStorageFlagsJSON = (storageFlags: string): storageFlags is StorageFlagsJSON =>\n  // tslint:disable-next-line strict-type-predicates no-any\n  StorageFlagsModel[storageFlags as any] !== undefined;\n\nexport const assertStorageFlagsJSON = (type: string): StorageFlagsJSON => {\n  if (!isStorageFlagsJSON(type)) {\n    throw new InvalidStorageFlagsJSONError(type);\n  }\n\n  return type;\n};\n\nexport const toStorageFlags = (type: StorageFlagsJSON): StorageFlagsModel => StorageFlagsModel[type];\n","import { BinaryWriter, IOHelper, SerializableWire, UInt256 } from '@neo-one/client-common';\nimport {\n  BinaryReader,\n  BlockBase,\n  BlockBaseAdd,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  utils,\n} from '@neo-one/node-core';\nexport interface MerkleBlockPayloadAdd extends BlockBaseAdd {\n  readonly transactionCount: number;\n  readonly hashes: readonly UInt256[];\n  readonly flags: Buffer;\n}\n\nexport class MerkleBlockPayload extends BlockBase implements SerializableWire<MerkleBlockPayload> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): MerkleBlockPayload {\n    const { reader } = options;\n    const blockBase = super.deserializeBlockBaseWireBase(options);\n    const transactionCount = reader.readVarUIntLE(utils.INT_MAX_VALUE).toNumber();\n    const hashes = reader.readArray(() => reader.readUInt256());\n    const flags = reader.readVarBytesLE();\n\n    return new this({\n      version: blockBase.version,\n      previousHash: blockBase.previousHash,\n      merkleRoot: blockBase.merkleRoot,\n      timestamp: blockBase.timestamp,\n      index: blockBase.index,\n      consensusData: blockBase.consensusData,\n      nextConsensus: blockBase.nextConsensus,\n      script: blockBase.script,\n      transactionCount,\n      hashes,\n      flags,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): MerkleBlockPayload {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly transactionCount: number;\n  public readonly hashes: readonly UInt256[];\n  public readonly flags: Buffer;\n  private readonly merkleBlockPayloadSizeInternal: () => number;\n\n  public constructor({\n    version,\n    previousHash,\n    merkleRoot,\n    timestamp,\n    index,\n    consensusData,\n    nextConsensus,\n    script,\n    transactionCount,\n    hashes,\n    flags,\n  }: MerkleBlockPayloadAdd) {\n    super({\n      version,\n      previousHash,\n      merkleRoot,\n      timestamp,\n      index,\n      consensusData,\n      nextConsensus,\n      script,\n    });\n\n    this.transactionCount = transactionCount;\n    this.hashes = hashes;\n    this.flags = flags;\n\n    this.merkleBlockPayloadSizeInternal = utils.lazy(\n      () =>\n        super.size +\n        IOHelper.sizeOfUInt32LE +\n        IOHelper.sizeOfArray(this.hashes, () => IOHelper.sizeOfUInt256) +\n        IOHelper.sizeOfVarBytesLE(this.flags),\n    );\n  }\n\n  public get size(): number {\n    return this.merkleBlockPayloadSizeInternal();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarUIntLE(this.transactionCount);\n    writer.writeArray(this.hashes, (hash) => {\n      writer.writeUInt256(hash);\n    });\n    writer.writeVarBytesLE(this.flags);\n  }\n}\n","import { Observable, Observer } from 'rxjs';\n\nexport function neverComplete<T>(): (source$: Observable<T>) => Observable<T> {\n  return (source$) =>\n    new Observable((observer: Observer<T>) =>\n      source$.subscribe({\n        next: (value) => observer.next(value),\n        error: (error) => observer.error(error),\n        complete: () => {\n          // do nothing\n        },\n      }),\n    );\n}\n","/// <reference types=\"@reactivex/ix-es2015-cjs\" />\nimport { common, crypto, ECPoint, PrivateKey, UInt160 } from '@neo-one/client-common';\nimport { nodeLogger } from '@neo-one/logger';\nimport { ConsensusPayload, Node, Transaction } from '@neo-one/node-core';\nimport { finalize, mergeScanLatest, utils as commonUtils } from '@neo-one/utils';\nimport { AsyncIterableX } from '@reactivex/ix-es2015-cjs/asynciterable/asynciterablex';\nimport { scan } from '@reactivex/ix-es2015-cjs/asynciterable/pipe/scan';\nimport { Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\nimport { initializeNewConsensus } from './common';\nimport { ConsensusContext } from './ConsensusContext';\nimport { ConsensusQueue } from './ConsensusQueue';\nimport { Context } from './context';\nimport { handleConsensusPayload } from './handleConsensusPayload';\nimport { handlePersistBlock } from './handlePersistBlock';\nimport { handleTransactionReceived } from './handleTransactionReceived';\nimport { runConsensus } from './runConsensus';\nimport { Event, Result } from './types';\n\nconst logger = nodeLogger.child({ component: 'consensus' });\n\nexport interface Options {\n  readonly privateKey: string;\n  readonly privateNet: boolean;\n}\nexport interface InternalOptions {\n  readonly privateKey: PrivateKey;\n  readonly publicKey: ECPoint;\n  readonly feeAddress: UInt160;\n  readonly privateNet: boolean;\n}\n\nconst MS_IN_SECOND = 1000;\n\nexport class Consensus {\n  private mutableQueue: ConsensusQueue;\n  private mutableTimer: number | undefined;\n  private readonly options$: Observable<InternalOptions>;\n  private readonly node: Node;\n  private mutableConsensusContext: ConsensusContext;\n  private mutableStartPromise: Promise<void> | undefined;\n\n  public constructor({ options$, node }: { readonly options$: Observable<Options>; readonly node: Node }) {\n    this.mutableQueue = new ConsensusQueue();\n    this.options$ = options$.pipe(\n      map((options) => {\n        const privateKey = common.stringToPrivateKey(options.privateKey);\n        const publicKey = crypto.privateKeyToPublicKey(privateKey);\n        const feeAddress = crypto.publicKeyToScriptHash(publicKey);\n\n        return {\n          privateKey,\n          publicKey,\n          feeAddress,\n          privateNet: options.privateNet,\n        };\n      }),\n    );\n\n    this.node = node;\n    this.mutableConsensusContext = new ConsensusContext();\n  }\n\n  public start$(): Observable<void> {\n    return this.options$.pipe(\n      mergeScanLatest<InternalOptions, void>(async (_, options) => {\n        await this.pause();\n        this.doStart(options);\n      }),\n      finalize(async () => {\n        await this.pause();\n      }),\n    );\n  }\n\n  public onPersistBlock(): void {\n    this.mutableQueue.write({ type: 'handlePersistBlock' });\n  }\n\n  public onConsensusPayloadReceived(payload: ConsensusPayload): void {\n    this.mutableQueue.write({\n      type: 'handleConsensusPayload',\n      payload,\n    });\n  }\n\n  public onTransactionReceived(transaction: Transaction): void {\n    this.mutableQueue.write({\n      type: 'handleTransactionReceived',\n      transaction,\n    });\n  }\n\n  public async runConsensusNow(): Promise<void> {\n    const options = await this.options$.pipe(take(1)).toPromise();\n    if (options.privateNet) {\n      // tslint:disable-next-line promise-must-complete\n      await new Promise((resolve, reject) => {\n        this.mutableQueue.write({ type: 'timer', promise: { resolve, reject } });\n      });\n    } else {\n      throw new Error('Can only force consensus on a private network.');\n    }\n  }\n\n  public nowSeconds(): number {\n    return this.mutableConsensusContext.nowSeconds();\n  }\n\n  public async fastForwardOffset(seconds: number): Promise<void> {\n    const options = await this.options$.pipe(take(1)).toPromise();\n    if (options.privateNet) {\n      this.mutableConsensusContext.fastForwardOffset(seconds);\n    } else {\n      throw new Error('Can only fast forward on a private network.');\n    }\n  }\n\n  public async fastForwardToTime(seconds: number): Promise<void> {\n    const options = await this.options$.pipe(take(1)).toPromise();\n    if (options.privateNet) {\n      this.mutableConsensusContext.fastForwardToTime(seconds);\n    } else {\n      throw new Error('Can only fast forward on a private network.');\n    }\n  }\n\n  public async pause(): Promise<void> {\n    this.clearTimer();\n    this.mutableQueue.done();\n    this.mutableQueue = new ConsensusQueue();\n    if (this.mutableStartPromise !== undefined) {\n      await this.mutableStartPromise;\n    }\n  }\n\n  public async reset(): Promise<void> {\n    this.mutableConsensusContext = new ConsensusContext();\n  }\n\n  public async resume(): Promise<void> {\n    const options = await this.options$.pipe(take(1)).toPromise();\n    // tslint:disable-next-line no-floating-promises\n    this.doStart(options);\n  }\n\n  private doStart(options: InternalOptions): void {\n    let completed = false;\n    const mutableStartPromise = this.start(options).then(() => {\n      completed = true;\n      this.mutableStartPromise = undefined;\n    });\n    if (!completed) {\n      this.mutableStartPromise = mutableStartPromise;\n    }\n  }\n\n  private async start(options: InternalOptions): Promise<void> {\n    logger.debug({ title: 'neo_consensus_start' }, 'Consensus started.');\n\n    const initialResult = await initializeNewConsensus({\n      blockchain: this.node.blockchain,\n      publicKey: options.publicKey,\n      consensusContext: this.mutableConsensusContext,\n    });\n\n    await AsyncIterableX.from(this.mutableQueue)\n      .pipe(\n        scan(async (context: Context, event: Event) => {\n          let result;\n          switch (event.type) {\n            case 'handlePersistBlock':\n              result = await handlePersistBlock({\n                blockchain: this.node.blockchain,\n                publicKey: options.publicKey,\n                consensusContext: this.mutableConsensusContext,\n              });\n\n              break;\n            case 'handleConsensusPayload':\n              result = await handleConsensusPayload({\n                context,\n                node: this.node,\n                privateKey: options.privateKey,\n                payload: event.payload,\n                consensusContext: this.mutableConsensusContext,\n              });\n\n              break;\n            case 'handleTransactionReceived':\n              result = await handleTransactionReceived({\n                context,\n                node: this.node,\n                privateKey: options.privateKey,\n                transaction: event.transaction,\n                consensusContext: this.mutableConsensusContext,\n              });\n\n              break;\n            case 'timer':\n              result = await runConsensus({\n                context,\n                node: this.node,\n                options,\n                consensusContext: this.mutableConsensusContext,\n              }).catch((err) => {\n                if (event.promise !== undefined) {\n                  event.promise.reject(err);\n                }\n                throw err;\n              });\n              if (event.promise !== undefined) {\n                event.promise.resolve();\n              }\n              break;\n            default:\n              commonUtils.assertNever(event);\n              throw new Error('For TS');\n          }\n\n          return this.handleResult(result);\n        }, this.handleResult(initialResult)),\n      )\n      .forEach(() => {\n        // do nothing\n      });\n\n    logger.debug({ title: 'neo_consensus_stop' }, 'Consensus stopped.');\n  }\n\n  private handleResult(result: Result<Context>): Context {\n    if (result.timerSeconds !== undefined) {\n      this.handleTimer(result.timerSeconds);\n    }\n\n    return result.context;\n  }\n\n  private handleTimer(mutableTimerSeconds: number): void {\n    this.clearTimer();\n    this.mutableTimer = setTimeout(\n      () => this.mutableQueue.write({ type: 'timer' }),\n      mutableTimerSeconds * MS_IN_SECOND,\n      // tslint:disable-next-line no-any\n    ) as any;\n  }\n\n  private clearTimer(): void {\n    if (this.mutableTimer !== undefined) {\n      clearTimeout(this.mutableTimer);\n      this.mutableTimer = undefined;\n    }\n  }\n}\n","// tslint:disable readonly-keyword no-object-mutation\nimport { Observable, Subscriber, Subscription } from 'rxjs';\nimport { Operator } from 'rxjs/internal/Operator';\nimport { OuterSubscriber } from 'rxjs/internal/OuterSubscriber';\nimport { ObservableInput, OperatorFunction, TeardownLogic } from 'rxjs/internal/types';\nimport { subscribeToResult } from 'rxjs/internal/util/subscribeToResult';\n\ntype LastValue<R> = { type: 'value'; value: R } | { type: 'empty' };\n// tslint:disable-next-line no-any\nconst EMPTY_LAST_VALUE: LastValue<any> = { type: 'empty' };\n\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue = false;\n  private hasCompleted = false;\n  private lastValue: LastValue<T> = EMPTY_LAST_VALUE;\n  private active = false;\n  private index = 0;\n  private readonly accumulator: (acc: R | undefined, value: T) => ObservableInput<R>;\n  private acc: R | undefined;\n\n  public constructor(\n    destination: Subscriber<R>,\n    accumulator: (acc: R | undefined, value: T) => ObservableInput<R>,\n    acc: R | undefined,\n  ) {\n    super(destination);\n    this.accumulator = accumulator;\n    this.acc = acc;\n  }\n\n  public notifyNext(_outerValue: T, innerValue: R): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    if (destination.next !== undefined) {\n      destination.next(innerValue);\n    }\n  }\n\n  public notifyComplete(innerSub: Subscription): void {\n    const { lastValue } = this;\n    this.remove(innerSub);\n    this.active = false;\n    if (lastValue.type === 'value') {\n      this.lastValue = EMPTY_LAST_VALUE;\n      this.next(lastValue.value);\n    } else if (!this.active && this.hasCompleted) {\n      if (!this.hasValue && this.destination.next !== undefined) {\n        this.destination.next(this.acc);\n      }\n      if (this.destination.complete !== undefined) {\n        this.destination.complete();\n      }\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.active) {\n      const { index, destination } = this;\n      this.index += 1;\n      try {\n        const result = this.accumulator(this.acc, value);\n\n        this.active = true;\n        this._innerSub(result, value, index);\n      } catch (error) {\n        if (destination.error !== undefined) {\n          destination.error(error);\n        }\n      }\n    } else {\n      this.lastValue = { type: 'value', value };\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.active && this.lastValue.type === 'empty') {\n      if (!this.hasValue && this.destination.next !== undefined) {\n        this.destination.next(this.acc);\n      }\n      if (this.destination.complete !== undefined) {\n        this.destination.complete();\n      }\n    }\n  }\n\n  protected _innerSub(ish: {}, value: T, index: number): void {\n    this.add(subscribeToResult(this, ish, value, index));\n  }\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  public readonly accumulator: (acc: R | undefined, value: T) => ObservableInput<R>;\n  public readonly seed: R | undefined | undefined;\n  public constructor(accumulator: (acc: R | undefined, value: T) => ObservableInput<R>, seed?: R) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n  }\n\n  // tslint:disable-next-line\n  public call(subscriber: Subscriber<R>, source: any): TeardownLogic {\n    // tslint:disable-next-line\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed));\n  }\n}\n\nexport function mergeScanLatest<T, R = undefined | void>(\n  accumulator: (acc: R | undefined, value: T) => ObservableInput<R>,\n  seed?: R,\n): OperatorFunction<T, R> {\n  return (source$: Observable<T>) =>\n    (source$ as { lift: (value: Operator<T, R>) => Observable<R> }).lift(new MergeScanOperator(accumulator, seed));\n}\n","import { ECPoint, UInt256 } from '@neo-one/client-common';\nimport { Context } from './Context';\nimport { InitialContext } from './InitialContext';\nimport { Type } from './types';\n\nexport function cloneInitial(\n  context: Context,\n  {\n    type,\n    previousHash,\n    blockIndex,\n    viewNumber,\n    myIndex,\n    primaryIndex,\n    expectedView,\n    validators,\n    blockReceivedTimeSeconds,\n  }: {\n    readonly type: Type;\n    readonly previousHash?: UInt256;\n    readonly blockIndex?: number;\n    readonly viewNumber: number;\n    readonly myIndex?: number;\n    readonly primaryIndex: number;\n    readonly expectedView?: readonly number[];\n    readonly validators?: readonly ECPoint[];\n    readonly blockReceivedTimeSeconds?: number;\n  },\n): InitialContext {\n  return new InitialContext({\n    type,\n    previousHash: previousHash === undefined ? context.previousHash : previousHash,\n    blockIndex: blockIndex === undefined ? context.blockIndex : blockIndex,\n    viewNumber,\n    myIndex: myIndex === undefined ? context.myIndex : myIndex,\n    primaryIndex,\n    expectedView: expectedView === undefined ? context.expectedView : expectedView,\n    validators: validators === undefined ? context.validators : validators,\n    blockReceivedTimeSeconds:\n      blockReceivedTimeSeconds === undefined ? context.blockReceivedTimeSeconds : blockReceivedTimeSeconds,\n  });\n}\n","import { BlockSentContext } from './BlockSentContext';\nimport { Context } from './Context';\n\nexport function cloneBlockSent(context: Context): BlockSentContext {\n  return new BlockSentContext({\n    type: context.type,\n    previousHash: context.previousHash,\n    blockIndex: context.blockIndex,\n    viewNumber: context.viewNumber,\n    myIndex: context.myIndex,\n    primaryIndex: context.primaryIndex,\n    expectedView: context.expectedView,\n    validators: context.validators,\n    blockReceivedTimeSeconds: context.blockReceivedTimeSeconds,\n  });\n}\n","import { ECPoint, UInt160, UInt256, UInt256Hex } from '@neo-one/client-common';\nimport { Block } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport { HeaderContext } from './HeaderContext';\nimport { SignatureSentContext } from './SignatureSentContext';\nimport { Transactions } from './types';\nimport { ViewChangingContext } from './ViewChangingContext';\n\ninterface RequestReceivedContextAdd {\n  readonly viewNumber: number;\n  readonly myIndex: number;\n  readonly primaryIndex: number;\n  readonly expectedView: readonly number[];\n  readonly validators: readonly ECPoint[];\n  readonly blockReceivedTimeSeconds: number;\n  readonly transactions: Transactions;\n  readonly signatures: ReadonlyArray<Buffer | undefined>;\n  readonly header:\n    | {\n        readonly type: 'new';\n        readonly previousHash: UInt256;\n        readonly transactionHashes: readonly UInt256Hex[];\n        readonly blockIndex: number;\n        readonly nonce: BN;\n        readonly timestamp: number;\n        readonly nextConsensus: UInt160;\n      }\n    | {\n        readonly type: 'existing';\n        readonly block: Block;\n        readonly transactionHashes: readonly UInt256Hex[];\n      };\n}\n\nexport class RequestReceivedContext extends HeaderContext<RequestReceivedContext> {\n  public constructor({\n    viewNumber,\n    myIndex,\n    primaryIndex,\n    expectedView,\n    validators,\n    blockReceivedTimeSeconds,\n    transactions,\n    signatures,\n    header,\n  }: RequestReceivedContextAdd) {\n    super({\n      type: 'backup',\n      viewNumber,\n      myIndex,\n      primaryIndex,\n      expectedView,\n      validators,\n      blockReceivedTimeSeconds,\n      transactions,\n      signatures,\n      header,\n    });\n  }\n\n  public clone({ transactions }: { readonly transactions: Transactions }): RequestReceivedContext {\n    return new RequestReceivedContext({\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView: this.expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n\n      signatures: this.signatures,\n    });\n  }\n\n  public cloneViewChanging({ expectedView }: { readonly expectedView: readonly number[] }): ViewChangingContext {\n    return new ViewChangingContext({\n      previousHash: this.previousHash,\n      blockIndex: this.blockIndex,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n    });\n  }\n\n  public cloneSignatureSent({\n    signatures,\n  }: {\n    readonly signatures: ReadonlyArray<Buffer | undefined>;\n  }): SignatureSentContext {\n    return new SignatureSentContext({\n      type: this.type,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView: this.expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n\n      signatures,\n    });\n  }\n\n  public cloneExpectedView({ expectedView }: { readonly expectedView: readonly number[] }): RequestReceivedContext {\n    return new RequestReceivedContext({\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures: this.signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n\n  public cloneSignatures({\n    signatures,\n  }: {\n    readonly signatures: ReadonlyArray<Buffer | undefined>;\n  }): RequestReceivedContext {\n    return new RequestReceivedContext({\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView: this.expectedView,\n      validators: this.validators,\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n      transactions: this.transactions,\n      signatures,\n      header: {\n        type: 'existing',\n        block: this.header,\n        transactionHashes: this.transactionHashes,\n      },\n    });\n  }\n}\n","import { common, crypto, JSONHelper, RelayTransactionResultJSON, TransactionJSON, utils } from '@neo-one/client-common';\nimport { nodeLogger } from '@neo-one/logger';\nimport {\n  Account,\n  Blockchain,\n  deserializeTransactionWire,\n  getEndpointConfig,\n  Input,\n  InvocationTransaction,\n  Node,\n  RelayTransactionResult,\n  Transaction,\n  TransactionData,\n  TransactionType,\n} from '@neo-one/node-core';\nimport { Labels, labelToTag } from '@neo-one/utils';\nimport { AggregationType, globalStats, MeasureUnit, TagMap } from '@neo-one/client-switch';\nimport { filter, switchMap, take, timeout, toArray } from 'rxjs/operators';\n\nconst logger = nodeLogger.child({ component: 'rpc-handler' });\n\nexport type HandlerPrimitive = string | number | boolean;\nexport type HandlerResult =\n  | object\n  | undefined\n  | ReadonlyArray<object | HandlerPrimitive>\n  | undefined\n  | HandlerPrimitive\n  | undefined\n  | void;\n// tslint:disable-next-line no-any\nexport type Handler = (args: readonly any[]) => Promise<HandlerResult>;\n\ninterface Handlers {\n  readonly [method: string]: Handler;\n}\n\ninterface JSONRPCRequest {\n  readonly jsonrpc: '2.0';\n  readonly id?: number | undefined;\n  readonly method: string;\n  readonly params?: readonly object[] | object;\n}\n\nexport class JSONRPCError {\n  public readonly code: number;\n  public readonly message: string;\n\n  public constructor(code: number, message: string) {\n    this.code = code;\n    this.message = message;\n  }\n}\n\nconst RPC_METHODS: { readonly [key: string]: string } = {\n  getaccountstate: 'getaccountstate',\n  getassetstate: 'getassetstate',\n  getbestblockhash: 'getbestblockhash',\n  getblock: 'getblock',\n  getblockcount: 'getblockcount',\n  getblockhash: 'getblockhash',\n  getblocksysfee: 'getblocksysfee',\n  getconnectioncount: 'getconnectioncount',\n  getcontractstate: 'getcontractstate',\n  getrawmempool: 'getrawmempool',\n  getrawtransaction: 'getrawtransaction',\n  getstorage: 'getstorage',\n  gettxout: 'gettxout',\n  invoke: 'invoke',\n  invokefunction: 'invokefunction',\n  invokescript: 'invokescript',\n  sendrawtransaction: 'sendrawtransaction',\n  submitblock: 'submitblock',\n  validateaddress: 'validateaddress',\n  getpeers: 'getpeers',\n  relaytransaction: 'relaytransaction',\n  getoutput: 'getoutput',\n  getclaimamount: 'getclaimamount',\n  getallstorage: 'getallstorage',\n  testinvocation: 'testinvocation',\n  gettransactionreceipt: 'gettransactionreceipt',\n  getinvocationdata: 'getinvocationdata',\n  getvalidators: 'getvalidators',\n  getnetworksettings: 'getnetworksettings',\n  runconsensusnow: 'runconsensusnow',\n  updatesettings: 'updatesettings',\n  getsettings: 'getsettings',\n  fastforwardoffset: 'fastforwardoffset',\n  fastforwardtotime: 'fastforwardtotime',\n  reset: 'reset',\n  UNKNOWN: 'UNKNOWN',\n  INVALID: 'INVALID',\n};\n\nconst rpcTag = labelToTag(Labels.RPC_METHOD);\n\nconst requestDurations = globalStats.createMeasureDouble('request/duration', MeasureUnit.MS);\nconst requestErrors = globalStats.createMeasureInt64('request/failures', MeasureUnit.UNIT);\n\nconst SINGLE_REQUESTS_HISTOGRAM = globalStats.createView(\n  'jsonrpc_server_single_request_duration_ms',\n  requestDurations,\n  AggregationType.DISTRIBUTION,\n  [rpcTag],\n  'distribution of request durations',\n  [5, 10, 25, 50, 100, 250, 500, 1000, 2500, 5000, 10000],\n);\nglobalStats.registerView(SINGLE_REQUESTS_HISTOGRAM);\n\nconst SINGLE_REQUEST_ERRORS_COUNTER = globalStats.createView(\n  'jsonrpc_server_single_request_failures_total',\n  requestErrors,\n  AggregationType.COUNT,\n  [rpcTag],\n  'total number of request errors',\n);\nglobalStats.registerView(SINGLE_REQUEST_ERRORS_COUNTER);\n\nconst createJSONRPCHandler = (handlers: Handlers) => {\n  // tslint:disable-next-line no-any\n  const validateRequest = (request: any): JSONRPCRequest => {\n    if (\n      request !== undefined &&\n      typeof request === 'object' &&\n      request.jsonrpc === '2.0' &&\n      request.method !== undefined &&\n      typeof request.method === 'string' &&\n      (request.params === undefined || Array.isArray(request.params) || typeof request.params === 'object') &&\n      (request.id === undefined || typeof request.id === 'string' || typeof request.id === 'number')\n    ) {\n      return request;\n    }\n\n    throw new JSONRPCError(-32600, 'Invalid Request');\n  };\n\n  // tslint:disable-next-line no-any\n  const handleSingleRequest = async (requestIn: any) => {\n    const startTime = Date.now();\n    let labels = {};\n    let method = RPC_METHODS.UNKNOWN;\n    try {\n      let request;\n      try {\n        request = validateRequest(requestIn);\n      } finally {\n        if (request !== undefined) {\n          ({ method } = request);\n        } else if (typeof requestIn === 'object') {\n          ({ method } = requestIn);\n        }\n\n        if ((RPC_METHODS[method] as string | undefined) === undefined) {\n          method = RPC_METHODS.INVALID;\n        }\n\n        labels = { [Labels.RPC_METHOD]: method };\n      }\n      const handler = handlers[request.method] as Handler | undefined;\n      if (handler === undefined) {\n        throw new JSONRPCError(-32601, 'Method not found');\n      }\n\n      const { params } = request;\n      let handlerParams: readonly object[];\n      if (params === undefined) {\n        handlerParams = [];\n      } else if (Array.isArray(params)) {\n        handlerParams = params;\n      } else {\n        handlerParams = [params];\n      }\n\n      const result = await handler(handlerParams);\n      logger.debug({ title: 'jsonrpc_server_single_request', ...labels });\n\n      globalStats.record([\n        {\n          measure: requestDurations,\n          value: Date.now() - startTime,\n        },\n      ]);\n\n      return {\n        jsonrpc: '2.0',\n        result,\n        id: request.id === undefined ? undefined : request.id,\n      };\n    } catch (error) {\n      logger.error({ title: 'jsonrpc_server_single_request', ...labels, error: error.message });\n      const tags = new TagMap();\n      tags.set(rpcTag, { value: method });\n      globalStats.record(\n        [\n          {\n            measure: requestErrors,\n            value: 1,\n          },\n        ],\n        tags,\n      );\n\n      throw error;\n    }\n  };\n\n  const handleRequest = async (request: unknown) => {\n    if (Array.isArray(request)) {\n      return Promise.all(request.map(async (batchRequest) => handleSingleRequest(batchRequest)));\n    }\n\n    return handleSingleRequest(request);\n  };\n\n  const handleRequestSafe = async (\n    labels: Record<string, string>,\n    request: unknown,\n  ): Promise<object | readonly object[]> => {\n    try {\n      // tslint:disable-next-line: no-any\n      let result: any;\n      try {\n        result = await handleRequest(request);\n        logger.debug({ title: 'jsonrpc_server_request', ...labels });\n      } catch (error) {\n        logger.error({ title: 'jsonrpc_server_request', ...labels, error });\n        throw error;\n      }\n\n      return result;\n    } catch (error) {\n      let errorResponse = {\n        code: -32603,\n        message: error.message === undefined ? 'Internal error' : error.message,\n      };\n\n      if (\n        error.code !== undefined &&\n        error.message !== undefined &&\n        typeof error.code === 'number' &&\n        typeof error.message === 'string'\n      ) {\n        errorResponse = { code: error.code, message: error.message };\n      }\n\n      return {\n        jsonrpc: '2.0',\n        error: errorResponse,\n        id: undefined,\n      };\n    }\n  };\n\n  return async (request: unknown) => handleRequestSafe({ [Labels.RPC_TYPE]: 'jsonrpc' }, request);\n};\n\nconst getTransactionReceipt = (value: TransactionData) => ({\n  blockIndex: value.startHeight,\n  blockHash: JSONHelper.writeUInt256(value.blockHash),\n  transactionIndex: value.index,\n  globalIndex: JSONHelper.writeUInt64(value.globalIndex),\n});\n\n// tslint:disable-next-line no-any\nexport type RPCHandler = (request: unknown) => Promise<any>;\n\nexport const createHandler = ({\n  blockchain,\n  node,\n}: {\n  readonly blockchain: Blockchain;\n  readonly node: Node;\n}): RPCHandler => {\n  const checkHeight = (height: number) => {\n    if (height < 0 || height > blockchain.currentBlockIndex) {\n      throw new JSONRPCError(-100, 'Invalid Height');\n    }\n  };\n\n  const handlers: Handlers = {\n    [RPC_METHODS.getaccountstate]: async (args) => {\n      const hash = crypto.addressToScriptHash({\n        addressVersion: blockchain.settings.addressVersion,\n        address: args[0],\n      });\n\n      let account = await blockchain.account.tryGet({ hash });\n      if (account === undefined) {\n        account = new Account({ hash });\n      }\n\n      return account.serializeJSON(blockchain.serializeJSONContext);\n    },\n    [RPC_METHODS.getassetstate]: async (args) => {\n      const asset = await blockchain.asset.tryGet({\n        hash: JSONHelper.readUInt256(args[0]),\n      });\n\n      if (asset === undefined) {\n        throw new JSONRPCError(-100, 'Unknown asset');\n      }\n\n      return asset.serializeJSON(blockchain.serializeJSONContext);\n    },\n    [RPC_METHODS.getbestblockhash]: async () => JSONHelper.writeUInt256(blockchain.currentBlock.hash),\n    [RPC_METHODS.getblock]: async (args) => {\n      let hashOrIndex = args[0];\n      if (typeof args[0] === 'string') {\n        hashOrIndex = JSONHelper.readUInt256(args[0]);\n      }\n\n      let watchTimeoutMS;\n      if (args[1] !== undefined && typeof args[1] === 'number' && args[1] !== 1) {\n        // eslint-disable-next-line\n        watchTimeoutMS = args[1];\n      } else if (args[2] !== undefined && typeof args[2] === 'number') {\n        // eslint-disable-next-line\n        watchTimeoutMS = args[2];\n      }\n\n      let block = await blockchain.block.tryGet({ hashOrIndex });\n      if (block === undefined) {\n        if (watchTimeoutMS === undefined) {\n          throw new JSONRPCError(-100, 'Unknown block');\n        }\n        try {\n          block = await blockchain.block$\n            .pipe(\n              filter((value) => value.hashHex === args[0] || value.index === args[0]),\n\n              take(1),\n              timeout(new Date(Date.now() + watchTimeoutMS)),\n            )\n            .toPromise();\n        } catch {\n          throw new JSONRPCError(-100, 'Unknown block');\n        }\n      }\n\n      if (args[1] === true || args[1] === 1) {\n        return block.serializeJSON(blockchain.serializeJSONContext);\n      }\n\n      return block.serializeWire().toString('hex');\n    },\n    [RPC_METHODS.getblockcount]: async () => blockchain.currentBlockIndex + 1,\n    [RPC_METHODS.getblockhash]: async (args) => {\n      const height = args[0];\n      checkHeight(height);\n      const block = await blockchain.block.get({ hashOrIndex: height });\n\n      return JSONHelper.writeUInt256(block.hash);\n    },\n    [RPC_METHODS.getblocksysfee]: async (args) => {\n      const height = args[0];\n      checkHeight(height);\n      const header = await blockchain.header.get({ hashOrIndex: height });\n      const blockData = await blockchain.blockData.get({\n        hash: header.hash,\n      });\n\n      return blockData.systemFee.toString(10);\n    },\n    [RPC_METHODS.getconnectioncount]: async () => node.connectedPeers.length,\n    [RPC_METHODS.getcontractstate]: async (args) => {\n      const hash = JSONHelper.readUInt160(args[0]);\n      const contract = await blockchain.contract.tryGet({ hash });\n      if (contract === undefined) {\n        throw new JSONRPCError(-100, 'Unknown contract');\n      }\n\n      return contract.serializeJSON(blockchain.serializeJSONContext);\n    },\n    [RPC_METHODS.getrawmempool]: async () =>\n      Object.values(node.memPool).map((transaction) => JSONHelper.writeUInt256(transaction.hash)),\n    [RPC_METHODS.getrawtransaction]: async (args) => {\n      const hash = JSONHelper.readUInt256(args[0]);\n\n      let transaction = node.memPool[common.uInt256ToHex(hash)] as Transaction | undefined;\n      if (transaction === undefined) {\n        transaction = await blockchain.transaction.tryGet({ hash });\n      }\n      if (transaction === undefined) {\n        throw new JSONRPCError(-100, 'Unknown transaction');\n      }\n\n      if (args[1] === true || args[1] === 1) {\n        return transaction.serializeJSON(blockchain.serializeJSONContext);\n      }\n\n      return transaction.serializeWire().toString('hex');\n    },\n    [RPC_METHODS.getstorage]: async (args) => {\n      const hash = JSONHelper.readUInt160(args[0]);\n      const key = Buffer.from(args[1], 'hex');\n      const item = await blockchain.storageItem.tryGet({ hash, key });\n\n      return item === undefined ? undefined : item.value.toString('hex');\n    },\n    [RPC_METHODS.gettxout]: async (args) => {\n      const hash = JSONHelper.readUInt256(args[0]);\n      const index = args[1];\n      const [output, spentCoins] = await Promise.all([\n        blockchain.output.tryGet({ hash, index }),\n        blockchain.transactionData.tryGet({ hash }),\n      ]);\n\n      if (spentCoins !== undefined && (spentCoins.endHeights[index] as number | undefined) !== undefined) {\n        return undefined;\n      }\n\n      return output === undefined ? undefined : output.serializeJSON(blockchain.serializeJSONContext, index);\n    },\n    [RPC_METHODS.invoke]: async () => {\n      throw new JSONRPCError(-101, 'Not implemented');\n    },\n    [RPC_METHODS.invokefunction]: async () => {\n      throw new JSONRPCError(-101, 'Not implemented');\n    },\n    [RPC_METHODS.invokescript]: async (args) => {\n      const script = JSONHelper.readBuffer(args[0]);\n      const receipt = await blockchain.invokeScript(script);\n\n      return {\n        result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n        actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n      };\n    },\n    [RPC_METHODS.sendrawtransaction]: async (args) => {\n      const transaction = deserializeTransactionWire({\n        context: blockchain.deserializeWireContext,\n        buffer: JSONHelper.readBuffer(args[0]),\n      });\n\n      try {\n        await node.relayTransaction(transaction, { throwVerifyError: true, forceAdd: true });\n\n        return true;\n      } catch {\n        return false;\n      }\n    },\n    [RPC_METHODS.submitblock]: async () => {\n      throw new JSONRPCError(-101, 'Not implemented');\n    },\n    [RPC_METHODS.validateaddress]: async (args) => {\n      let scriptHash;\n      try {\n        scriptHash = crypto.addressToScriptHash({\n          addressVersion: blockchain.settings.addressVersion,\n          address: args[0],\n        });\n      } catch {\n        // Ignore errors\n      }\n\n      return { address: args[0], isvalid: scriptHash !== undefined };\n    },\n    [RPC_METHODS.getpeers]: async () => ({\n      connected: node.connectedPeers.map((endpoint) => {\n        const { host, port } = getEndpointConfig(endpoint);\n\n        return { address: host, port };\n      }),\n    }),\n\n    // Extended\n    [RPC_METHODS.relaytransaction]: async (args): Promise<RelayTransactionResultJSON> => {\n      const transaction = deserializeTransactionWire({\n        context: blockchain.deserializeWireContext,\n        buffer: JSONHelper.readBuffer(args[0]),\n      });\n\n      try {\n        const [transactionJSON, result] = await Promise.all<TransactionJSON, RelayTransactionResult>([\n          transaction.serializeJSON(blockchain.serializeJSONContext),\n          node.relayTransaction(transaction, { forceAdd: true, throwVerifyError: true }),\n        ]);\n        const resultJSON =\n          result.verifyResult === undefined\n            ? {}\n            : {\n                verifyResult: {\n                  verifications: result.verifyResult.verifications.map((verification) => ({\n                    hash: JSONHelper.writeUInt160(verification.hash),\n                    witness: verification.witness.serializeJSON(blockchain.serializeJSONContext),\n                    actions: verification.actions.map((action) =>\n                      action.serializeJSON(blockchain.serializeJSONContext),\n                    ),\n                    failureMessage: verification.failureMessage,\n                  })),\n                },\n              };\n\n        return {\n          ...resultJSON,\n          transaction: transactionJSON,\n        };\n      } catch (error) {\n        throw new JSONRPCError(-110, `Relay transaction failed: ${error.message}`);\n      }\n    },\n    [RPC_METHODS.getoutput]: async (args) => {\n      const hash = JSONHelper.readUInt256(args[0]);\n      const index = args[1];\n      const output = await blockchain.output.tryGet({ hash, index });\n      if (output === undefined) {\n        throw new JSONRPCError(-100, 'Unknown output');\n      }\n\n      return output.serializeJSON(blockchain.serializeJSONContext, index);\n    },\n    [RPC_METHODS.getclaimamount]: async (args) => {\n      const hash = JSONHelper.readUInt256(args[0]);\n      const index = args[1];\n      try {\n        const value = await blockchain.calculateClaimAmount([\n          new Input({\n            hash,\n            index,\n          }),\n        ]);\n\n        return common.fixed8ToDecimal(value).toString();\n      } catch (error) {\n        throw new JSONRPCError(-102, error.message);\n      }\n    },\n    [RPC_METHODS.getallstorage]: async (args) => {\n      const hash = JSONHelper.readUInt160(args[0]);\n      const items = await blockchain.storageItem\n        .getAll$({ hash })\n        .pipe(toArray())\n        .toPromise();\n\n      return items.map((item) => item.serializeJSON(blockchain.serializeJSONContext));\n    },\n    [RPC_METHODS.testinvocation]: async (args) => {\n      const transaction = deserializeTransactionWire({\n        context: blockchain.deserializeWireContext,\n        buffer: JSONHelper.readBuffer(args[0]),\n      });\n\n      if (transaction instanceof InvocationTransaction) {\n        const receipt = await blockchain.invokeTransaction(transaction);\n\n        return {\n          result: receipt.result.serializeJSON(blockchain.serializeJSONContext),\n          actions: receipt.actions.map((action) => action.serializeJSON(blockchain.serializeJSONContext)),\n        };\n      }\n\n      throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n    },\n    [RPC_METHODS.gettransactionreceipt]: async (args) => {\n      const transactionData = await blockchain.transactionData.tryGet({\n        hash: JSONHelper.readUInt256(args[0]),\n      });\n\n      let watchTimeoutMS;\n      if (args[1] !== undefined && typeof args[1] === 'number') {\n        // eslint-disable-next-line\n        watchTimeoutMS = args[1];\n      }\n\n      let result;\n      if (transactionData === undefined) {\n        if (watchTimeoutMS === undefined) {\n          throw new JSONRPCError(-100, 'Unknown transaction');\n        }\n\n        try {\n          result = await blockchain.block$\n            .pipe(\n              switchMap(async () => {\n                const data = await blockchain.transactionData.tryGet({\n                  hash: JSONHelper.readUInt256(args[0]),\n                });\n\n                return data === undefined ? undefined : getTransactionReceipt(data);\n              }),\n              filter((receipt) => receipt !== undefined),\n              take(1),\n              timeout(new Date(Date.now() + watchTimeoutMS)),\n            )\n            .toPromise();\n        } catch (error) {\n          throw new JSONRPCError(-100, 'Unknown transaction');\n        }\n      } else {\n        result = getTransactionReceipt(transactionData);\n      }\n\n      return result;\n    },\n    [RPC_METHODS.getinvocationdata]: async (args) => {\n      const transaction = await blockchain.transaction.get({\n        hash: JSONHelper.readUInt256(args[0]),\n      });\n\n      const result = await transaction.serializeJSON(blockchain.serializeJSONContext);\n\n      if (result.type !== 'InvocationTransaction' || result.invocationData === undefined) {\n        throw new JSONRPCError(-103, 'Invalid InvocationTransaction');\n      }\n\n      return result.invocationData;\n    },\n    [RPC_METHODS.getvalidators]: async () => {\n      const validators = await blockchain.validator.all$.pipe(toArray()).toPromise();\n\n      return validators.map((validator) => validator.serializeJSON(blockchain.serializeJSONContext));\n    },\n    [RPC_METHODS.getnetworksettings]: async () => {\n      const fee = blockchain.settings.fees[TransactionType.Issue];\n      const issueGASFee = common.fixed8ToDecimal(fee === undefined ? utils.ZERO : fee);\n\n      return {\n        issueGASFee: issueGASFee.toString(),\n      };\n    },\n    [RPC_METHODS.runconsensusnow]: async () => {\n      if (node.consensus) {\n        await node.consensus.runConsensusNow();\n      } else {\n        throw new Error('This node does not support triggering consensus.');\n      }\n\n      return true;\n    },\n    [RPC_METHODS.updatesettings]: async (args) => {\n      const { settings } = blockchain;\n      const newSettings = {\n        ...settings,\n        secondsPerBlock: args[0].secondsPerBlock,\n      };\n\n      blockchain.updateSettings(newSettings);\n\n      return true;\n    },\n    [RPC_METHODS.getsettings]: async () => ({\n      secondsPerBlock: blockchain.settings.secondsPerBlock,\n    }),\n    [RPC_METHODS.fastforwardoffset]: async (args) => {\n      if (node.consensus) {\n        await node.consensus.fastForwardOffset(args[0]);\n      } else {\n        throw new Error('This node does not support fast forwarding.');\n      }\n\n      return true;\n    },\n    [RPC_METHODS.fastforwardtotime]: async (args) => {\n      if (node.consensus !== undefined) {\n        await node.consensus.fastForwardToTime(args[0]);\n      } else {\n        throw new Error('This node does not support fast forwarding.');\n      }\n\n      return true;\n    },\n    [RPC_METHODS.reset]: async () => {\n      if (node.consensus !== undefined) {\n        await node.consensus.pause();\n        await node.consensus.reset();\n      }\n      await node.reset();\n      await blockchain.reset();\n      if (node.consensus !== undefined) {\n        await node.consensus.resume();\n      }\n\n      return true;\n    },\n  };\n\n  return createJSONRPCHandler(handlers);\n};\n","import { BinaryWriter } from '../../../BinaryWriter';\nimport { AttributeBaseModel } from './AttributeBaseModel';\nimport { AttributeUsageModel } from './AttributeUsageModel';\n\nexport type BufferAttributeUsageModel =\n  | 0x81\n  | 0x90\n  | 0xf0\n  | 0xf1\n  | 0xf2\n  | 0xf3\n  | 0xf4\n  | 0xf5\n  | 0xf6\n  | 0xf7\n  | 0xf8\n  | 0xf9\n  | 0xfa\n  | 0xfb\n  | 0xfc\n  | 0xfd\n  | 0xfe\n  | 0xff;\n\nexport interface BufferAttributeModelAdd {\n  readonly usage: BufferAttributeUsageModel;\n  readonly value: Buffer;\n}\n\nexport class BufferAttributeModel extends AttributeBaseModel<BufferAttributeUsageModel, Buffer> {\n  public readonly usage: BufferAttributeUsageModel;\n  public readonly value: Buffer;\n\n  public constructor({ usage, value }: BufferAttributeModelAdd) {\n    super();\n    this.usage = usage;\n    this.value = value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    if (this.usage === AttributeUsageModel.DescriptionUrl) {\n      writer.writeUInt8(this.value.length);\n      writer.writeBytes(this.value);\n    } else {\n      writer.writeVarBytesLE(this.value);\n    }\n  }\n}\n","import { BinaryWriter } from '../../../BinaryWriter';\nimport { common, ECPoint } from '../../../common';\nimport { AttributeBaseModel } from './AttributeBaseModel';\n\nexport type ECPointAttributeUsageModel = 0x02 | 0x03;\n\nexport interface ECPointAttributeModelAdd {\n  readonly usage: ECPointAttributeUsageModel;\n  readonly value: ECPoint;\n}\n\nexport class ECPointAttributeModel extends AttributeBaseModel<ECPointAttributeUsageModel, ECPoint> {\n  public readonly usage: ECPointAttributeUsageModel;\n  public readonly value: ECPoint;\n\n  public constructor({ usage, value }: ECPointAttributeModelAdd) {\n    super();\n    this.usage = usage;\n    this.value = value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeBytes(common.ecPointToBuffer(this.value).slice(1));\n  }\n}\n","import { BinaryWriter } from '../../../BinaryWriter';\nimport { UInt160 } from '../../../common';\nimport { AttributeBaseModel } from './AttributeBaseModel';\n\nexport type UInt160AttributeUsageModel = 0x20;\n\nexport interface UInt160AttributeModelAdd {\n  readonly usage: UInt160AttributeUsageModel;\n  readonly value: UInt160;\n}\n\nexport class UInt160AttributeModel extends AttributeBaseModel<UInt160AttributeUsageModel, UInt160> {\n  public readonly usage: UInt160AttributeUsageModel;\n  public readonly value: UInt160;\n\n  public constructor({ usage, value }: UInt160AttributeModelAdd) {\n    super();\n    this.usage = usage;\n    this.value = value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt160(this.value);\n  }\n}\n","import { BinaryWriter } from '../../../BinaryWriter';\nimport { UInt256 } from '../../../common';\nimport { AttributeBaseModel } from './AttributeBaseModel';\n\nexport type UInt256AttributeUsageModel =\n  | 0x00\n  | 0x30\n  | 0xa1\n  | 0xa2\n  | 0xa3\n  | 0xa4\n  | 0xa5\n  | 0xa6\n  | 0xa7\n  | 0xa8\n  | 0xa9\n  | 0xaa\n  | 0xab\n  | 0xac\n  | 0xad\n  | 0xae\n  | 0xaf;\n\nexport interface UInt256AttributeModelAdd {\n  readonly usage: UInt256AttributeUsageModel;\n  readonly value: UInt256;\n}\n\nexport class UInt256AttributeModel extends AttributeBaseModel<UInt256AttributeUsageModel, UInt256> {\n  public readonly usage: UInt256AttributeUsageModel;\n  public readonly value: UInt256;\n\n  public constructor({ usage, value }: UInt256AttributeModelAdd) {\n    super();\n    this.usage = usage;\n    this.value = value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt256(this.value);\n  }\n}\n","import { BinaryWriter } from '../../BinaryWriter';\nimport { InvalidFormatError } from '../../common';\nimport { WitnessModel } from '../WitnessModel';\nimport { AttributeModel } from './attribute';\nimport { InputModel } from './InputModel';\nimport { OutputModel } from './OutputModel';\nimport { TransactionBaseModel, TransactionBaseModelAdd } from './TransactionBaseModel';\nimport { TransactionTypeModel } from './TransactionTypeModel';\n\nexport interface ClaimTransactionModelAdd<\n  TAttribute extends AttributeModel = AttributeModel,\n  TInput extends InputModel = InputModel,\n  TOutput extends OutputModel = OutputModel,\n  TWitness extends WitnessModel = WitnessModel\n> extends TransactionBaseModelAdd<TAttribute, TInput, TOutput, TWitness> {\n  readonly claims: readonly TInput[];\n}\n\nexport class ClaimTransactionModel<\n  TAttribute extends AttributeModel = AttributeModel,\n  TInput extends InputModel = InputModel,\n  TOutput extends OutputModel = OutputModel,\n  TWitness extends WitnessModel = WitnessModel\n> extends TransactionBaseModel<TransactionTypeModel.Claim, TAttribute, TInput, TOutput, TWitness> {\n  public readonly claims: readonly InputModel[];\n  public constructor({\n    version,\n    attributes,\n    inputs,\n    outputs,\n    scripts,\n    hash,\n    claims,\n  }: ClaimTransactionModelAdd<TAttribute, TInput, TOutput, TWitness>) {\n    super({\n      version,\n      type: TransactionTypeModel.Claim,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    this.claims = claims;\n\n    if (this.version !== 0) {\n      throw new InvalidFormatError(`expected version 0, found: ${this.version}`);\n    }\n\n    if (this.claims.length === 0) {\n      throw new InvalidFormatError('expected claims, found none.');\n    }\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly WitnessModel[];\n    readonly attributes?: readonly AttributeModel[];\n    readonly inputs?: readonly InputModel[];\n    readonly outputs?: readonly OutputModel[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      claims: this.claims,\n    });\n  }\n\n  public serializeExclusiveBase(writer: BinaryWriter): void {\n    writer.writeArray(this.claims, (claim) => {\n      claim.serializeWireBase(writer);\n    });\n  }\n}\n","import { BinaryWriter } from '../../BinaryWriter';\nimport { common, UInt256 } from '../../common';\nimport { IOHelper } from '../../IOHelper';\nimport { createSerializeWire, SerializableWire, SerializeWire } from '../Serializable';\n\nexport interface InputModelAdd {\n  readonly hash: UInt256;\n  readonly index: number;\n}\n\nconst SIZE = IOHelper.sizeOfUInt256 + IOHelper.sizeOfUInt16LE;\nexport class InputModel implements SerializableWire<InputModel> {\n  public static readonly size: number = SIZE;\n  public readonly hash: UInt256;\n  public readonly hashHex: string;\n  public readonly index: number;\n  public readonly size: number = SIZE;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ hash, index }: InputModelAdd) {\n    this.hash = hash;\n    this.hashHex = common.uInt256ToHex(hash);\n    this.index = index;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt256(this.hash);\n    writer.writeUInt16LE(this.index);\n  }\n}\n","import { BN } from 'bn.js';\nimport { BinaryWriter } from '../../BinaryWriter';\nimport { InvalidFormatError } from '../../common';\nimport { utils } from '../../utils';\nimport { WitnessModel } from '../WitnessModel';\nimport { AttributeModel } from './attribute';\nimport { InputModel } from './InputModel';\nimport { OutputModel } from './OutputModel';\nimport { TransactionBaseModel, TransactionBaseModelAdd } from './TransactionBaseModel';\nimport { TransactionTypeModel } from './TransactionTypeModel';\n\nexport interface InvocationTransactionModelAdd<\n  TAttribute extends AttributeModel = AttributeModel,\n  TInput extends InputModel = InputModel,\n  TOutput extends OutputModel = OutputModel,\n  TWitness extends WitnessModel = WitnessModel\n> extends TransactionBaseModelAdd<TAttribute, TInput, TOutput, TWitness> {\n  readonly gas: BN;\n  readonly script: Buffer;\n}\n\nexport class InvocationTransactionModel<\n  TAttribute extends AttributeModel = AttributeModel,\n  TInput extends InputModel = InputModel,\n  TOutput extends OutputModel = OutputModel,\n  TWitness extends WitnessModel = WitnessModel\n> extends TransactionBaseModel<TransactionTypeModel.Invocation, TAttribute, TInput, TOutput, TWitness> {\n  public static readonly VERSION = 1;\n  public readonly gas: BN;\n  public readonly script: Buffer;\n\n  public constructor({\n    version,\n    attributes,\n    inputs,\n    outputs,\n    scripts,\n    hash,\n    gas,\n    script,\n  }: InvocationTransactionModelAdd<TAttribute, TInput, TOutput, TWitness>) {\n    super({\n      version,\n      type: TransactionTypeModel.Invocation,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    this.gas = gas;\n    this.script = script;\n\n    if (this.version > 1) {\n      throw new InvalidFormatError(`expected version <= 1, found: ${this.version}`);\n    }\n\n    if (this.script.length === 0) {\n      throw new InvalidFormatError('expected script');\n    }\n\n    if (this.gas.lt(utils.ZERO)) {\n      throw new InvalidFormatError(`expected valid gas, found: ${this.gas.toString()}`);\n    }\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly WitnessModel[];\n    readonly attributes?: readonly AttributeModel[];\n    readonly inputs?: readonly InputModel[];\n    readonly outputs?: readonly OutputModel[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      gas: this.gas,\n      script: this.script,\n    });\n  }\n\n  public serializeExclusiveBase(writer: BinaryWriter): void {\n    writer.writeVarBytesLE(this.script);\n    if (this.version >= 1) {\n      writer.writeFixed8(this.gas);\n    }\n  }\n}\n","import { BN } from 'bn.js';\nimport { BinaryWriter } from '../../BinaryWriter';\nimport { UInt160, UInt256 } from '../../common';\nimport { IOHelper } from '../../IOHelper';\nimport { createSerializeWire, SerializableWire, SerializeWire } from '../Serializable';\n\nexport interface OutputModelKey {\n  readonly hash: UInt256;\n  readonly index: number;\n}\n\nexport interface OutputModelAdd {\n  readonly asset: UInt256;\n  readonly value: BN;\n  readonly address: UInt160;\n}\n\nconst SIZE = IOHelper.sizeOfUInt256 + IOHelper.sizeOfFixed8 + IOHelper.sizeOfUInt160;\nexport class OutputModel implements SerializableWire<OutputModel> {\n  public static readonly size: number = SIZE;\n  public readonly asset: UInt256;\n  public readonly value: BN;\n  public readonly address: UInt160;\n  public readonly size: number = SIZE;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ asset, value, address }: OutputModelAdd) {\n    this.asset = asset;\n    this.value = value;\n    this.address = address;\n  }\n\n  public clone({ value = this.value }: { readonly value?: BN }): OutputModel {\n    return new OutputModel({\n      asset: this.asset,\n      value,\n      address: this.address,\n    });\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt256(this.asset);\n    writer.writeFixed8(this.value);\n    writer.writeUInt160(this.address);\n  }\n}\n","import { ArrayLikeStackItem } from './ArrayLikeStackItem';\nimport { getNextID } from './referenceCounter';\nimport { StackItemType } from './StackItemType';\n\nexport class ArrayStackItem extends ArrayLikeStackItem {\n  public static readonly type = StackItemType.Array;\n  private readonly referenceID = getNextID();\n\n  public toStructuralKey(): string {\n    return `${this.referenceID}`;\n  }\n  // tslint:disable-next-line no-any\n  public equals(other: any): boolean {\n    return this === other;\n  }\n}\n","// tslint:disable readonly-array\nimport { BinaryWriter } from '@neo-one/client-common';\nimport { ArrayContractParameter, ContractParameter } from '@neo-one/node-core';\nimport { CircularReferenceError, InvalidValueBufferError } from './errors';\nimport { StackItem } from './StackItem';\nimport { StackItemBase } from './StackItemBase';\nimport { StackItemType } from './StackItemType';\n\nexport class ArrayLikeStackItem extends StackItemBase {\n  public static readonly type: StackItemType;\n  public readonly value: StackItem[];\n\n  public constructor(value: StackItem[]) {\n    super();\n    this.value = value;\n  }\n\n  public isArray(): boolean {\n    return true;\n  }\n\n  public asArray(): StackItem[] {\n    return this.value;\n  }\n\n  public asBoolean(): boolean {\n    return true;\n  }\n\n  public asBuffer(): Buffer {\n    throw new InvalidValueBufferError();\n  }\n\n  public toContractParameter(seen: Set<StackItemBase> = new Set()): ContractParameter {\n    if (seen.has(this)) {\n      throw new CircularReferenceError();\n    }\n    const newSeen = new Set([...seen]);\n    newSeen.add(this);\n\n    return new ArrayContractParameter(this.value.map((val) => val.toContractParameter(newSeen)));\n  }\n\n  public get size(): number {\n    return this.value.length;\n  }\n\n  protected incrementInternal(seen: Set<StackItemBase>): number {\n    return this.incrementInternalArray(this.value, seen);\n  }\n\n  protected decrementInternal(seen: Set<StackItemBase>): number {\n    return this.decrementInternalArray(this.value, seen);\n  }\n\n  // tslint:disable-next-line no-any\n  protected convertJSONInternal(seen: Set<StackItemBase>): any {\n    return this.value.map((val) => val.convertJSON(seen));\n  }\n\n  protected serializeInternal(seen: Set<StackItemBase>): Buffer {\n    const writer = new BinaryWriter();\n    writer.writeUInt8((this.constructor as typeof ArrayLikeStackItem).type);\n    writer.writeVarUIntLE(this.value.length);\n    this.value.forEach((item) => {\n      writer.writeBytes(item.serialize(seen));\n    });\n\n    return writer.toBuffer();\n  }\n}\n","// tslint:disable no-any\nimport { JSONRPCError, UnknownBlockError } from '../errors';\n\n/**\n * jsonrpc request object.\n */\nexport interface JSONRPCRequest {\n  /**\n   * Method to be invoked.\n   */\n  readonly method: string;\n  /**\n   * Invocation params.\n   */\n  readonly params?: any;\n  /**\n   * How long to leave the request open (i.e. long-polling) to wait for a result for given `method` and `params`.\n   */\n  readonly watchTimeoutMS?: number;\n}\n\n/**\n * jsonrpc response object.\n */\nexport type JSONRPCResponse = any;\n\n/**\n * Enables browser clients. See comlink and WorkerManager.\n */\nexport interface JSONRPCProviderManager {\n  // tslint:disable no-method-signature unified-signatures\n  getInstance(): Promise<JSONRPCProvider>;\n  // tslint:enable no-method-signature unified-signatures\n}\n\n/**\n * Base interface for handling `JSONRPCRequest`s and returning `JSONRPCResponse`s.\n */\nexport abstract class JSONRPCProvider {\n  public abstract request(req: JSONRPCRequest): Promise<JSONRPCResponse>;\n\n  protected readonly handleResponse = (responseJSON: any): any => {\n    if (responseJSON.error !== undefined) {\n      if (responseJSON.error.code === -100 && responseJSON.error.message === 'Unknown block') {\n        throw new UnknownBlockError();\n      }\n      throw new JSONRPCError(responseJSON.error);\n    }\n\n    return responseJSON.result;\n  };\n}\n","import {\n  assertTransactionType,\n  common,\n  ECPoint,\n  hasFlag,\n  IOHelper,\n  JSONHelper,\n  MAX_TRANSACTION_ATTRIBUTES,\n  TransactionBaseJSON,\n  TransactionBaseModel,\n  TransactionBaseModelAdd,\n  TransactionBaseModelAddWithType,\n  UInt160,\n  UInt160Hex,\n} from '@neo-one/client-common';\nimport { Constructor, utils as commonUtils } from '@neo-one/utils';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\nimport { Account, AccountKey } from '../Account';\nimport { Asset, AssetKey } from '../Asset';\nimport { AssetType } from '../AssetType';\nimport { MAX_TRANSACTION_SIZE } from '../constants';\nimport { Equals, EquatableKey } from '../Equatable';\nimport { VerifyError } from '../errors';\nimport { ScriptContainerType } from '../ScriptContainer';\nimport {\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializeJSONContext,\n} from '../Serializable';\nimport { BinaryReader, utils } from '../utils';\nimport { Validator } from '../Validator';\nimport { VerifyScript, VerifyScriptResult } from '../vm';\nimport { Witness } from '../Witness';\nimport { Attribute, AttributeUsage, deserializeAttributeWireBase, UInt160Attribute } from './attribute';\nimport { hasDuplicateInputs, hasIntersectingInputs } from './common';\nimport { Input } from './Input';\nimport { Output, OutputKey } from './Output';\nimport { RegisterTransaction } from './RegisterTransaction';\nimport { Transaction } from './Transaction';\nimport { TransactionType } from './TransactionType';\n\nexport interface TransactionBaseAdd extends TransactionBaseModelAdd<Attribute, Input, Output, Witness> {}\nexport interface TransactionBaseAddWithType<Type extends TransactionType>\n  extends TransactionBaseModelAddWithType<Type, Attribute, Input, Output, Witness> {}\n\nconst getUtilityValue = ({\n  outputs,\n  utilityToken,\n}: {\n  readonly outputs: readonly Output[];\n  readonly utilityToken: RegisterTransaction;\n}) =>\n  outputs\n    .filter((output) => common.uInt256Equal(output.asset, utilityToken.hash))\n    .reduce((acc, output) => acc.add(output.value), utils.ZERO);\n\nexport interface FeeContext {\n  readonly getOutput: (input: Input) => Promise<Output>;\n  readonly governingToken: RegisterTransaction;\n  readonly utilityToken: RegisterTransaction;\n  readonly fees: { [K in TransactionType]?: BN };\n  readonly registerValidatorFee: BN;\n}\n\nexport interface TransactionGetScriptHashesForVerifyingOptions {\n  readonly getOutput: (key: OutputKey) => Promise<Output>;\n  readonly getAsset: (key: AssetKey) => Promise<Asset>;\n}\n\nexport interface GetReferencesOptions {\n  readonly getOutput: (key: OutputKey) => Promise<Output>;\n}\n\nexport interface GetTransactionResultsOptions {\n  readonly getOutput: (key: OutputKey) => Promise<Output>;\n}\n\nexport interface TransactionVerifyOptions {\n  readonly calculateClaimAmount: (inputs: readonly Input[]) => Promise<BN>;\n  readonly isSpent: (key: OutputKey) => Promise<boolean>;\n  readonly getAsset: (key: AssetKey) => Promise<Asset>;\n  readonly getOutput: (key: OutputKey) => Promise<Output>;\n  readonly tryGetAccount: (key: AccountKey) => Promise<Account | undefined>;\n  readonly standbyValidators: readonly ECPoint[];\n  readonly getAllValidators: () => Promise<readonly Validator[]>;\n  readonly verifyScript: VerifyScript;\n  readonly currentHeight: number;\n  readonly governingToken: RegisterTransaction;\n  readonly utilityToken: RegisterTransaction;\n  readonly fees: { [K in TransactionType]?: BN };\n  readonly registerValidatorFee: BN;\n  readonly memPool?: readonly Transaction[];\n}\n\n/** @internal */\nexport function TransactionBase<\n  Type extends TransactionType,\n  TransactionJSON,\n  TBase extends Constructor<TransactionBaseModel<Type, Attribute, Input, Output, Witness>>\n>(Base: TBase) {\n  abstract class TransactionBaseClass extends Base implements EquatableKey, SerializableJSON<TransactionJSON> {\n    public static deserializeTransactionBaseStartWireBase({\n      reader,\n    }: DeserializeWireBaseOptions): { readonly type: TransactionType; readonly version: number } {\n      const type = assertTransactionType(reader.readUInt8());\n      const version = reader.readUInt8();\n\n      return { type, version };\n    }\n\n    public static deserializeTransactionBaseEndWireBase(\n      options: DeserializeWireBaseOptions,\n    ): {\n      readonly attributes: readonly Attribute[];\n      readonly inputs: readonly Input[];\n      readonly outputs: readonly Output[];\n      readonly scripts: readonly Witness[];\n    } {\n      const { reader } = options;\n      const attributes = reader.readArray(() => deserializeAttributeWireBase(options), MAX_TRANSACTION_ATTRIBUTES);\n\n      const inputs = reader.readArray(() => Input.deserializeWireBase(options));\n      const outputs = reader.readArray(() => Output.deserializeWireBase(options), utils.USHORT_MAX_NUMBER + 1);\n\n      const scripts = reader.readArray(() => Witness.deserializeWireBase(options));\n\n      return { attributes, inputs, outputs, scripts };\n    }\n\n    // tslint:disable-next-line no-any\n    public static deserializeWireBase(_options: DeserializeWireBaseOptions): any {\n      throw new Error('Not Implemented');\n    }\n\n    // tslint:disable-next-line no-any\n    public static deserializeWire(options: DeserializeWireOptions): any {\n      return this.deserializeWireBase({\n        context: options.context,\n        reader: new BinaryReader(options.buffer),\n      });\n    }\n\n    protected static readonly WitnessConstructor: Constructor<Witness> = Witness;\n\n    public readonly equals: Equals = utils.equals(\n      // tslint:disable-next-line no-any\n      this.constructor as any,\n      this,\n      (other: TransactionBaseClass) => common.uInt256Equal(this.hash, other.hash),\n    );\n    public readonly toKeyString = utils.toKeyString(TransactionBase, () => this.hashHex);\n    public readonly getSortedScriptHashesForVerifying = utils.lazyAsync(\n      async (options: TransactionGetScriptHashesForVerifyingOptions) => {\n        const hashes = await this.getScriptHashesForVerifying(options);\n\n        // tslint:disable-next-line no-array-mutation\n        return [...hashes].sort();\n      },\n    );\n    private readonly sizeInternal = utils.lazy(\n      () =>\n        IOHelper.sizeOfUInt8 +\n        IOHelper.sizeOfArray(this.attributes, (attribute) => attribute.size) +\n        IOHelper.sizeOfArray(this.inputs, (input) => input.size) +\n        IOHelper.sizeOfArray(this.outputs, (output) => output.size) +\n        IOHelper.sizeOfArray(this.scripts, (script) => script.size) +\n        this.sizeExclusive(),\n    );\n    private readonly networkFee = utils.lazyAsync(\n      async (context: FeeContext): Promise<BN> => {\n        const { getOutput, utilityToken } = context;\n\n        const outputsForInputs = await Promise.all(this.inputs.map(getOutput));\n\n        const inputValue = getUtilityValue({\n          outputs: outputsForInputs,\n          utilityToken,\n        });\n\n        const outputValue = getUtilityValue({\n          outputs: this.outputs,\n          utilityToken,\n        });\n\n        const result = inputValue.sub(outputValue).sub(this.getSystemFee(context));\n\n        return result.lt(utils.ZERO) ? utils.ZERO : result;\n      },\n    );\n    private readonly getReferencesInternal = utils.lazyAsync(async ({ getOutput }: GetReferencesOptions) =>\n      Promise.all(this.inputs.map(async (input) => getOutput(input))),\n    );\n    private readonly getTransactionResultsInternal = utils.lazyAsync(\n      async ({ getOutput }: GetTransactionResultsOptions): Promise<{ readonly [K in string]?: BN }> => {\n        const inputOutputs = await this.getReferences({ getOutput });\n        const mutableResults: { [K in string]?: BN } = {};\n        const addOutputs = (outputs: readonly Output[], negative?: boolean) => {\n          outputs.forEach((output) => {\n            const key = common.uInt256ToHex(output.asset);\n            let result = mutableResults[key];\n            if (result === undefined) {\n              mutableResults[key] = result = utils.ZERO;\n            }\n\n            mutableResults[key] = result.add(negative === true ? output.value.neg() : output.value);\n          });\n        };\n        addOutputs(inputOutputs);\n        addOutputs(this.outputs, true);\n\n        return _.pickBy(mutableResults, (value) => value !== undefined && !value.eq(utils.ZERO));\n      },\n    );\n    private readonly baseGetScriptHashesForVerifyingInternal = utils.lazyAsync(\n      async ({ getOutput, getAsset }: TransactionGetScriptHashesForVerifyingOptions) => {\n        const [inputHashes, outputHashes] = await Promise.all([\n          Promise.all(\n            this.inputs.map(async (input) => {\n              const output = await getOutput(input);\n\n              return common.uInt160ToHex(output.address);\n            }),\n          ),\n\n          Promise.all(\n            this.outputs.map(async (output) => {\n              const asset = await getAsset({ hash: output.asset });\n              if (hasFlag(asset.type, AssetType.DutyFlag)) {\n                return common.uInt160ToHex(output.address);\n              }\n\n              return undefined;\n            }),\n          ).then((hashes) => hashes.filter(commonUtils.notNull)),\n        ]);\n\n        const attributeHashes = this.attributes\n          .map((attribute) =>\n            attribute instanceof UInt160Attribute && attribute.usage === AttributeUsage.Script\n              ? common.uInt160ToHex(attribute.value)\n              : undefined,\n          )\n          .filter(commonUtils.notNull);\n\n        return new Set([...inputHashes, ...outputHashes, ...attributeHashes]);\n      },\n    );\n\n    public get size(): number {\n      return this.sizeInternal();\n    }\n\n    public async serializeTransactionBaseJSON(context: SerializeJSONContext): Promise<TransactionBaseJSON> {\n      const [networkFee, transactionData] = await Promise.all([\n        this.getNetworkFee(context.feeContext),\n        // tslint:disable-next-line no-any\n        context.tryGetTransactionData(this as any),\n      ]);\n\n      return {\n        txid: common.uInt256ToString(this.hashHex),\n        size: this.size,\n        version: this.version,\n        attributes: this.attributes.map((attribute) => attribute.serializeJSON(context)),\n\n        vin: this.inputs.map((input) => input.serializeJSON(context)),\n        vout: this.outputs.map((output, index) => output.serializeJSON(context, index)),\n\n        scripts: this.scripts.map((script) => script.serializeJSON(context)),\n        sys_fee: JSONHelper.writeFixed8(this.getSystemFee(context.feeContext)),\n        net_fee: JSONHelper.writeFixed8(networkFee),\n        data:\n          transactionData === undefined\n            ? undefined\n            : {\n                blockHash: common.uInt256ToString(transactionData.blockHash),\n                blockIndex: transactionData.startHeight,\n                transactionIndex: transactionData.index,\n                globalIndex: JSONHelper.writeUInt64(transactionData.globalIndex),\n              },\n      };\n    }\n\n    public async serializeJSON(_context: SerializeJSONContext): Promise<TransactionJSON> {\n      throw new Error('Not Implemented');\n    }\n\n    public async getNetworkFee(context: FeeContext): Promise<BN> {\n      return this.networkFee(context);\n    }\n\n    public getSystemFee({ fees }: FeeContext): BN {\n      const fee: BN | undefined = fees[this.type];\n\n      return fee === undefined ? utils.ZERO : fee;\n    }\n\n    public async getReferences(options: GetReferencesOptions): Promise<readonly Output[]> {\n      return this.getReferencesInternal(options);\n    }\n\n    public async getTransactionResults(options: GetTransactionResultsOptions): Promise<{ readonly [key: string]: BN }> {\n      return this.getTransactionResultsInternal(options) as Promise<{ readonly [key: string]: BN }>;\n    }\n\n    public async getScriptHashesForVerifying(\n      options: TransactionGetScriptHashesForVerifyingOptions,\n    ): Promise<Set<UInt160Hex>> {\n      return this.baseGetScriptHashesForVerifyingInternal(options);\n    }\n\n    public async verify(options: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n      if (this.size > MAX_TRANSACTION_SIZE) {\n        throw new VerifyError('Transaction too large.');\n      }\n\n      const { memPool = [] } = options;\n      if (hasDuplicateInputs(this.inputs)) {\n        throw new VerifyError('Duplicate inputs');\n      }\n\n      if (memPool.some((tx) => !tx.equals(this) && hasIntersectingInputs(tx.inputs, this.inputs))) {\n        throw new VerifyError('Input already exists in mempool');\n      }\n\n      if (\n        this.attributes.filter(\n          (attribute) => attribute.usage === AttributeUsage.ECDH02 || attribute.usage === AttributeUsage.ECDH03,\n        ).length > 1\n      ) {\n        throw new VerifyError('Too many ECDH attributes.');\n      }\n\n      const [results] = await Promise.all([\n        this.verifyScripts(options),\n        this.verifyDoubleSpend(options),\n        this.verifyOutputs(options),\n        this.verifyTransactionResults(options),\n      ]);\n\n      return results;\n    }\n\n    protected readonly sizeExclusive: () => number = () => 0;\n\n    private async verifyDoubleSpend({ isSpent }: TransactionVerifyOptions): Promise<void> {\n      const isDoubleSpend = await Promise.all(this.inputs.map(isSpent));\n\n      if (isDoubleSpend.some((value) => value)) {\n        throw new VerifyError('Transaction is a double spend');\n      }\n    }\n\n    private async verifyOutputs({ getAsset, currentHeight }: TransactionVerifyOptions): Promise<void> {\n      const outputsGrouped = Object.entries(_.groupBy(this.outputs, (output) => common.uInt256ToHex(output.asset)));\n\n      const hasInvalidOutputs = await Promise.all(\n        outputsGrouped.map(async ([assetHex, outputs]) => {\n          const asset = await getAsset({ hash: common.hexToUInt256(assetHex) });\n          if (\n            asset.expiration <= currentHeight + 1 &&\n            asset.type !== AssetType.GoverningToken &&\n            asset.type !== AssetType.UtilityToken\n          ) {\n            return true;\n          }\n\n          return outputs.some(\n            (output) => !output.value.mod(utils.TEN.pow(utils.EIGHT.subn(asset.precision))).eq(utils.ZERO),\n          );\n        }),\n      );\n\n      if (hasInvalidOutputs.some((value) => value)) {\n        throw new VerifyError('Transaction has invalid output');\n      }\n    }\n\n    private async verifyTransactionResults({\n      getOutput,\n      utilityToken,\n      governingToken,\n      fees,\n      registerValidatorFee,\n    }: TransactionVerifyOptions): Promise<void> {\n      const results = await this.getTransactionResults({ getOutput });\n      const resultsDestroy = Object.entries(results).filter(\n        // tslint:disable-next-line no-unused\n        ([_key, value]) => value.gt(utils.ZERO),\n      );\n\n      if (\n        resultsDestroy.length > 1 ||\n        (resultsDestroy.length === 1 &&\n          !common.uInt256Equal(common.hexToUInt256(resultsDestroy[0][0]), utilityToken.hash))\n      ) {\n        throw new VerifyError('Invalid destroyed output.');\n      }\n\n      const feeContext = {\n        getOutput,\n        governingToken,\n        utilityToken,\n        fees,\n        registerValidatorFee,\n      };\n\n      const systemFee = this.getSystemFee(feeContext);\n      if (systemFee.gt(utils.ZERO) && (resultsDestroy.length === 0 || resultsDestroy[0][1].lt(systemFee))) {\n        throw new VerifyError('Not enough output value for system fee.');\n      }\n\n      // tslint:disable-next-line no-unused\n      const resultsIssue = Object.entries(results).filter(([__, value]) => value.lt(utils.ZERO));\n\n      switch (this.type) {\n        case TransactionType.Miner:\n        case TransactionType.Claim:\n          if (\n            resultsIssue.some(([assetHex]) => !common.uInt256Equal(common.hexToUInt256(assetHex), utilityToken.hash))\n          ) {\n            throw new VerifyError('Invalid miner/claim result');\n          }\n          break;\n        case TransactionType.Issue:\n          if (\n            // tslint:disable-next-line no-unused\n            resultsIssue.some(([assetHex, __]) => common.uInt256Equal(common.hexToUInt256(assetHex), utilityToken.hash))\n          ) {\n            throw new VerifyError('Invalid issue result');\n          }\n          break;\n        default:\n          if (resultsIssue.length > 0) {\n            throw new VerifyError('Invalid results.');\n          }\n      }\n    }\n\n    private async verifyScripts({\n      getAsset,\n      getOutput,\n      verifyScript,\n    }: TransactionVerifyOptions): Promise<readonly VerifyScriptResult[]> {\n      const hashesArr = await this.getSortedScriptHashesForVerifying({\n        getAsset,\n        getOutput,\n      });\n\n      if (hashesArr.length !== this.scripts.length) {\n        throw new VerifyError(\n          `Invalid witnesses. Found ${hashesArr.length} hashes and ${this.scripts.length} scripts.`,\n        );\n      }\n\n      const hashes = hashesArr.map((value) => common.hexToUInt160(value));\n\n      return Promise.all(\n        _.zip(hashes, this.scripts).map(async ([hash, witness]) =>\n          verifyScript({\n            scriptContainer: {\n              type: ScriptContainerType.Transaction,\n              // tslint:disable-next-line no-any\n              value: this as any,\n            },\n            hash: hash as UInt160,\n            witness: witness as Witness,\n          }),\n        ),\n      );\n    }\n  }\n\n  return TransactionBaseClass;\n}\n","import { ByteArrayContractParameter, ContractParameter } from '@neo-one/node-core';\nimport { StackItemBase } from './StackItemBase';\n\nexport class BufferStackItem extends StackItemBase {\n  public readonly value: Buffer;\n\n  public constructor(value: Buffer) {\n    super();\n    this.value = value;\n  }\n\n  public asBuffer(): Buffer {\n    return this.value;\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new ByteArrayContractParameter(this.value);\n  }\n}\n","import { sha256 } from 'hash.js';\n\n// tslint:disable-next-line export-name\nexport const p256 = {\n  type: 'short',\n  // tslint:disable-next-line no-null-keyword\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296',\n    '4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5',\n    {\n      doubles: {\n        step: 4,\n        points: [\n          [\n            '76a94d138a6b41858b821c629836315fcd28392eff6ca038a5eb4787e1277c6e',\n            'a985fe61341f260e6cb0a1b5e11e87208599a0040fc78baa0e9ddd724b8c5110',\n          ],\n          [\n            '34a2d4a3b009165987ffd1528603ed61190d0b710d6a564c2db2e35f12d0441b',\n            'beaaed6a53a1e3c22bca71046e777fc0e7d766b9deddd81db424e7845e93b146',\n          ],\n          [\n            'e716aed2cf069e4d997789672e6d6bd2508676f2f4fd0a64f077e8daa245573f',\n            '353663e694fc72ab5912b06687b9a851d13d0df2fa07c9b3505fc26b469218d1',\n          ],\n          [\n            'a018366f4e91e90d8e5c643340e586b4714ab749c9052a0503e8465c6eade3c4',\n            'e2bbec1714110b167c6ce578349d8369d5f7284e44614f37f45c42026b26e8d0',\n          ],\n          [\n            'ec73885141fe54ffef6a0b570cd98d530e431c1aad5fcfe8f7dcecb7d96dff1',\n            'd6224f4e87ae875d91acc4ef580652511d5264ce87ed78aa9ec841ac7c7b552c',\n          ],\n          [\n            'f8f5dccf4c6a93d7a4a54daafaa3449aa87a8069875405d43725c5dce392d805',\n            'e58176cf66d63054389d3e336461327351f3da64a52143ba026619516cda02fa',\n          ],\n          [\n            '6d28b6bffd4daf313f85eaad8e4d71b91ca631161f99218f984a23176f922dbd',\n            'af39d905141dd2fa40fbe1a61ccb4a1c4c24e9f0b84da29944abff02a0ef3cff',\n          ],\n          [\n            '7fe36b40af22af8921656b32262c71da1ab919365c65dfb63a5a9e22185a5943',\n            'e697d45825b636249f09f40407dca6f174b3d5867b8af212d50d152c699ca101',\n          ],\n          [\n            '6965b6384d7061e685371fe7ff26519e76bba9dda2aea7817aff4fe1fdde3445',\n            'd1bcdae39c482511325e496638732dbef47ce6051a5f99d97cc4389e18855113',\n          ],\n          [\n            'fbc341c8c669d7632ca9f0d41bc43dc1efe47b273b95775258fca6c4d9aefbd',\n            'bd8022632f360e3fe4014b1d4957d3d3950b069e200a9ff1ed3b6ea9d3e71ca0',\n          ],\n          [\n            '6608c243773c85dcbc666b9ba97323b234a8bfe70a2e3338c6e3197aa3fe67b2',\n            'a1a916bec521c168846f640da746e03fc22b159f40c543081923fe5ce5b47a28',\n          ],\n          [\n            'd8de765227b7873763de93c34d8b561cf73a835fbb8e9c71c2ebaf8017e55104',\n            '2fd29465be13f2d15c4c628ad1dcf924c2f73fce1940db1b2a02ef80e52e08cd',\n          ],\n          [\n            '54ccc9415026d73f20a845b72a58e5b18bd27f198542a0beeea6bc92071e5c83',\n            '1c433f45b45145323a8f8715dad2bf22929e0bcc5d8ee496cfd08ef7140916a1',\n          ],\n          [\n            'c5440c597814a47d9f6cc7d1513d7f38e40cd02e32847f01c30fb77122d32936',\n            'd27ee9ba383e1fa72edc1e1d23ecf4acd8a6d28631e41e5d9a42fa3747cabfd4',\n          ],\n          [\n            '241c567a4227f1c506c79b97a6badca61c37101cb8971583bf9f4172b066fd48',\n            '40a62d93d4302d4b9363817c043203a48ea87138aea366057f7d2c6792857b08',\n          ],\n          [\n            'fa822bc2811aaa58492592e326e25de29493baaad651f7e90e75cb48e14db63',\n            'bff44ae8f5dba80d6f4ad4bcb3df188b34b1a65050fe82f5e41124545f462ee7',\n          ],\n          [\n            '54bc18d7a99899547ddc6988d7ee1b3f2b481ab443da43ff68f41305b76a6987',\n            '4b2c8c1211e6eaf37391b851ba73e2fd52eb8ed4bb73b119fe457cd05b9aae49',\n          ],\n          [\n            '1d35c9699761e3f285f248239267756f5194b85279f96b7c60aafad170aae231',\n            'c7226cb62df608231d660ab622ebf810edf58aa4729a66f15867063accd6ac71',\n          ],\n          [\n            '55d9a959844b5aef388ff0f7aa02f29acbf5ca9aa567e0e65572aea8750e4f5f',\n            '69cb7f9aa5dad203766d574fbcc8ec524c9810c633ad1b15c858eb76bca97db0',\n          ],\n          [\n            '6e29f959be28c47fae5abca185755c08346924376f5412c1d4d3d2de4351964c',\n            '34565d9f500f32f65052ec6cc184246def640c527a0bfb63118824bd563fd88f',\n          ],\n          [\n            'ff046a9eb2bfeed9c00f2ef0796f458ec141c259a845631128a7d4110cb71280',\n            '432f55acc0953a170a01eddbdd4cfcc9012b6e6ebd28487a7ec3271f5ec33919',\n          ],\n          [\n            'e486c7dffeabb058c1f9aa2349ee7eff8b2c7e63cf570cc5c7d0b24cc5852e50',\n            '51fd75ed5606a12e9ee88a5c9f51e05a694463d63392ebd866ba3cadaecf107d',\n          ],\n          [\n            'f41d7f4bb5e50430cfe08cf8b5e2ee0ab63b9998a43d1fc584b6b8ec2b519178',\n            'e6a669bebd9af8d6f1046de3faa82347ab49acc36919e1f9a7a1665dca6a3551',\n          ],\n          [\n            '4a5b506612a677a657880b3a18a2e902e9a521b074ca0141a84aa9397512218e',\n            'eb13461ceac089f1c42604fbe1627d40626db15419e26d9d0beada7a4c4f3840',\n          ],\n          [\n            '2eb3910bde2ab995012c29df8bbe0f5032c3b2574328e5f76628d837008e2df0',\n            '3f29c02337474b3a77d37d348da4999f9540d120ecf65f490910cc4ed274eaae',\n          ],\n          [\n            '7ef2ee3c5c792a0c0fef6335224d9428a7d2c98f6743333ec739a5ea3ecca7e0',\n            'afb6862730acc011a4f67f51d5e609db81b21450dfbd3d20302b22dd552ac094',\n          ],\n          [\n            'e51416421640aeb57802554eb5fa77aa9cb53529975e04a6701f090ec49e853',\n            'cf331cea65905469278eb4a53a91030df568394190c9ee36336e3d1376405cb2',\n          ],\n          [\n            '224a02299eecc99a0634a786f116445779c3bb5b5501d267f0699bf9e2f2b734',\n            'fa41a8d29b6d22b4149a08ad871d7fff07b704b673c7afd0840f585491ec7fdf',\n          ],\n          [\n            '4a89a61457374b4ccdb5d111b56493fe167d5ee4d1041ce2ea6065ad7789b84d',\n            '45b04e87ed480d5c08c2ea979fe677e6a72e280634711999ef9b7d7f018e3ea8',\n          ],\n          [\n            'e5e892363a31885cedc2f995f36d1f90ba82337d0b1fc80d3438c84a72bd05a0',\n            '77439de4da1b87d21301eb01e79b5c3eca73995b9cd099aec936de2be1a69f5d',\n          ],\n          [\n            'e4107e431e221f5071e7474104fa90a45312f0c21fb084de21579992fab5c2cf',\n            '1e5f11e6cf701c9a3948c668741c2b323c7892dcff7b2410d028403f2b955c2b',\n          ],\n          [\n            '447d739beedb5e67fb982fd588c6766efc35ff7dc297eac357c84fc9d789bd85',\n            '2d4825ab834131eee12e9d953a4aaff73d349b95a7fae5000c7e33c972e25b32',\n          ],\n          [\n            '9022e314949ccf3e8937542b8cdec18ea2f8d5618688ce241ebd8bac137de736',\n            '2fae5e4f2904a39466d0bb045226ce087f49366c44ea7657f4ef5c0844c42ecc',\n          ],\n          [\n            '73baff0419eda72389386cf2b5156deddc34c10619515eb5741145c144cd3397',\n            '1e97de634977ac5f6a00d1e8c18f825e779ef92cf826134941ef2a139adcb8e4',\n          ],\n          [\n            '9cf646b91a4c25bbc974446c2976fb982683bec78b098cb30e2e5fb31fa4e33c',\n            '37b0624dc1f65a891e408e258b821f319e205827ebc1603219c45e060e0d4563',\n          ],\n          [\n            'f81f5be38b8ca534e8a5c7938d18df9e0d238966f74e1a6b826fadc0523b716d',\n            'dc7f49329c1f06df1d56d29d380e0328660758503a878330464002f512632401',\n          ],\n          [\n            '85685474d77e08482397f463e53cde1d022eca56c3915c978ed9c7e787354b7a',\n            '20b50eb50bf587b6eebc913b2a6f728706a891dc1fd6fdbd8954402bd16e04c6',\n          ],\n          [\n            '1136b759c12b3b11b319e52d6bf9597d9e3607554615622addc6dc1b12378c16',\n            '7dec0fcf45168fdd09f0abc60fe9ecb29614aa28e751cce379f59bd0b3488127',\n          ],\n          [\n            'd2bf28ba7c2a51a90f573a82589f18e07e50ab01786df709c762ef1943e832a',\n            'cac3f4313bd00ac7087a10a94b4e7ed27ec9db96055144648263af15b20d37c',\n          ],\n          [\n            '8a535f566ec73617f5622df4373713269e4c35874afdf43aaee9c75df7f82f2a',\n            '455c08468b08bd737e02819085a92bfcde533864c8c7669c5f9a0ac223094b7',\n          ],\n          [\n            'ad6090dfdcb41a019af7cd273da8a366b7a3030e99e53d5e9c837f4fe476c81d',\n            '77b5d1dd48f4c91eaccd75c2cc5bd8a8393fdc364f3048df818abc84ee6705dd',\n          ],\n          [\n            'b6e06c516305bbc4e466557075b929fcde1adf89f510a848a52f2c3693c4a205',\n            'bdb4277c21b323f5c5e1f126e79ed73b63f99419a82a9f87537f4d865db36d05',\n          ],\n          [\n            '45a511c97f608bf76dbc4189d991ece618c452b1b42a627f3cd5f4e4a9aa52df',\n            '73be0ec773ea9b6d3fe3337fcb625ad25a919b27d22955ce7b52bd12125ec16c',\n          ],\n          [\n            '20e118564880c79cb927e3501cf2a53f030b86e3cecac60728cf1ab99076f57b',\n            'ff67b352ac437ef731bdc3e3fb6de9979fe0dc9b40e1b71e8583bedbada7afe6',\n          ],\n          [\n            '5c9cc4f8723a027b0318ec7fdfd7dac93fdd478e694fd54add1452e899273a8f',\n            '84efe07a1dfed259a827589d3708af964f003675a11acab5addaca695ce80d6e',\n          ],\n          [\n            'baffd4ebf8a8b5ab46ac18444f3dcde3351a3a75556c6c4ae7dd9ab328523eb3',\n            'fa93dc5dbc95e83003a8eb3795ac09c24511ccfbf48b6ee1978300cd5acf387',\n          ],\n          [\n            '6ad2a098fced766ed22a34d257e4c96479f0b1a76db3c5f835208d8ba111101',\n            '2d5b8b1c58f85e3559a4c01bb9eb62a0de429d82b70e89aec1a7ba9d5fb37ef4',\n          ],\n          [\n            'a6d39677a78492762736ff8344315fc596439591a3c6b94a6cf20ffb313728be',\n            '674f84749b0b881666b8babd2d27ecdf824a920c2284059bf2bab833c357f5f4',\n          ],\n          [\n            'ac25da80089cf4e033d4db5710ff5936fd683b4d0dab013e6eef62ff4514c6fd',\n            'ebc69d985cb44c7b883da9312a1b338c810983e8243bf37a60b5397705830541',\n          ],\n          [\n            '285250edc3bcfcd9027bba12176d343a26035672d5b4a81155d4e37a2fd20bae',\n            '7866c086f4ad7ea83f7284ad1046c1716e9b1a2cf1eff323f9de455a54e0ab97',\n          ],\n          [\n            'c472c1062ed0366f818debc07ef8890e1fc5147dd0dc267c171f3a2a3e07e4f1',\n            '41820e01945f70e96432ab5a84d667d885f3b7b1e22b5d8a571c683d86b0daa9',\n          ],\n          [\n            '55d5398d1666432b557582c99ad534580101fb06a050e62c320f09c3839bb85f',\n            '576e229049ff8e2d059c6a9e8ebaa72ad90d6a7f1833d9e1f7f631184fed936f',\n          ],\n          [\n            '884286463ca0872694febab24bfc3383cc268940efec85ecc62dbc9c32513926',\n            'f778429c01c2dd5a69660db365d81207ce0eb122ebdbc15a0ee4282aafb8a54d',\n          ],\n          [\n            'b4958c4e21de21d47fb60c55edb925559eaa8520a5ed115e3e0b5d5ad4441fbb',\n            'fcd6e7bf996640efe5c041fbc38cb7e12db9f6132d4638414c7e3c9f4add7118',\n          ],\n          [\n            'd0e0919688e932b64134bf13b346027cd8a7fd0b7d761d04ac24e6436e12e1df',\n            '69c9a59fe7d1452b4eb60b691dbf867544cc4bd9846b8df6a6544db9fd28fbe',\n          ],\n          [\n            '68f6b8542783dfeeeb5b06e70ce08ffefd75f3fa01876bd86a703f10e895df07',\n            'cbe1feba92e40ce6fbc8044dfda45028cf5293d2f310bf7f90c76f8a78712655',\n          ],\n          [\n            '7f9460a23d474b66c3b41d1793b353d6646bd35404739e0dd34dab1767ea1f34',\n            'd0d516778fb0618769f1f2bf8f076661c6ff815124e34ffc58bec2cacd9063ec',\n          ],\n          [\n            '9c39cb60a33d563d2958f49f1b6ee94582f2d7a846967f0dcec9b4d78e6d8483',\n            'f097bf1ee493e51003d196b7bca16546bbade52f3dbe436894b3356f6b2c50fb',\n          ],\n          [\n            '3d9285261122993897566e7430181e25e2fd65f1b1b173747dda97c55c38d4e4',\n            'd32ca0a5d468eab53ff057035c2869eacc0ab138197abc7f6faaef00c0ccf0d3',\n          ],\n          [\n            'f50b99b7468810b73a5a7dcf08bd17915c08966a2ecc1e07606304b1a44e8de3',\n            'e2b5061e55f18f0c8789973a2dedcebbe975f18d21721e854a3f3ba6db7f3588',\n          ],\n          [\n            '42531823ff5ed0b0d77f4880da0b0e07400f246c3cdaa859e1994056037cfb4',\n            'c90e8bccfae00f7e628ca4d0c8661faceea3e4f534ec5dd400b7325ed8775d23',\n          ],\n          [\n            '9bbf06dad9ab5905e05471ce16d5222c89c2caa39f26267ac0747129885fbd44',\n            '1bcc7fa84de120a36755daf30a6f47e8c0d4bddc15036ed2a3447dfa7a1d3e88',\n          ],\n          [\n            'b12fadf52943dfa54943fccb3b7893e796357686c10319e31ead3233444c0448',\n            '2e2459599b0f4ace96f8f6677b2a6a71d05e70332fc4df296575e76b369de57',\n          ],\n          [\n            'b197a2e1e67a44b5afb62de48adde6400b60867487cab5739912513c420924a',\n            'a4a03b30f39453e2566f385d67c641fc0f5f54efb8bfb340b9e53b38d1045a5f',\n          ],\n          [\n            'b6ae3ad5f980c4f9242de74738d53742a8c2aee4e9f3212be86c8ab8842fde52',\n            'dd2dde44b184d7940e029053a745a90b5a7daef354da5c2aefca03b203b98f33',\n          ],\n        ],\n      },\n      naf: {\n        wnd: 8,\n        points: [\n          [\n            '5ecbe4d1a6330a44c8f7ef951d4bf165e6c6b721efada985fb41661bc6e7fd6c',\n            '8734640c4998ff7e374b06ce1a64a2ecd82ab036384fb83d9a79b127a27d5032',\n          ],\n          [\n            '51590b7a515140d2d784c85608668fdfef8c82fd1f5be52421554a0dc3d033ed',\n            'e0c17da8904a727d8ae1bf36bf8a79260d012f00d4d80888d1d0bb44fda16da4',\n          ],\n          [\n            '8e533b6fa0bf7b4625bb30667c01fb607ef9f8b8a80fef5b300628703187b2a3',\n            '73eb1dbde03318366d069f83a6f5900053c73633cb041b21c55e1a86c1f400b4',\n          ],\n          [\n            'ea68d7b6fedf0b71878938d51d71f8729e0acb8c2c6df8b3d79e8a4b90949ee0',\n            '2a2744c972c9fce787014a964a8ea0c84d714feaa4de823fe85a224a4dd048fa',\n          ],\n          [\n            '3ed113b7883b4c590638379db0c21cda16742ed0255048bf433391d374bc21d1',\n            '9099209accc4c8a224c843afa4f4c68a090d04da5e9889dae2f8eefce82a3740',\n          ],\n          [\n            '177c837ae0ac495a61805df2d85ee2fc792e284b65ead58a98e15d9d46072c01',\n            '63bb58cd4ebea558a24091adb40f4e7226ee14c3a1fb4df39c43bbe2efc7bfd8',\n          ],\n          [\n            'f0454dc6971abae7adfb378999888265ae03af92de3a0ef163668c63e59b9d5f',\n            'b5b93ee3592e2d1f4e6594e51f9643e62a3b21ce75b5fa3f47e59cde0d034f36',\n          ],\n          [\n            '47776904c0f1cc3a9c0984b66f75301a5fa68678f0d64af8ba1abce34738a73e',\n            'aa005ee6b5b957286231856577648e8381b2804428d5733f32f787ff71f1fcdc',\n          ],\n          [\n            'cb6d2861102c0c25ce39b7c17108c507782c452257884895c1fc7b74ab03ed83',\n            '58d7614b24d9ef515c35e7100d6d6ce4a496716e30fa3e03e39150752bcecdaa',\n          ],\n          [\n            '3250fcf686637c7b2e4ac86eb473bca53a582139f42b1523fd76364e67399e83',\n            '42e7c342667d359397b3090d1d7eb88c897cd3c33b566a8215de24a071d48c09',\n          ],\n          [\n            'e91c7239c2640d7d28a3e39d4583fa63c0bc0a5df64a4fe672e573045ca7896',\n            '5df65c3b550dba221a22733bb8e0bd6d7e68833575e7a5ae138046543140ad55',\n          ],\n          [\n            '3a67e2554b0c0bb685f4f52d8c07fa8441652fc5b76f1b2484a4dc45f200d687',\n            '27d0f1872f1fcf4326daf267163afb0d8c188af735a7618aa9ed16b302f79324',\n          ],\n          [\n            '184ffa5819d80d51deba2fac4611f378576355bd683e54abf2e201173b0883d1',\n            'c0a66e276688f359a4c6d90826cb999545bdeccc63f0491620d242c260906e6f',\n          ],\n          [\n            'd6d33adefa195b07a7c36da090853b8cfd8cd1c688b58a41dedd693d1c784def',\n            '84aaba16ee195d7e3f78245f558a5dcb09a166ab4b95eded550c124593d1bca6',\n          ],\n          [\n            '301d9e502dc7e05da85da026a7ae9aa0fac9db7d52a95b3e3e3f9aa0a1b45b8b',\n            '6551b6f6b3061223e0d23c026b017d72298d9ae46887ca61d58db6aea17ee267',\n          ],\n          [\n            '9807d699fcd81356fa9aa25b89d9d34ea03b0a533aa872fd65c100f3cb2cd793',\n            'c2a59cdccab11bf286a01a4d1d091b2fffe630b96c5878532f6bf92479634af4',\n          ],\n          [\n            'd58d4a589ed27d168ffa3ad7326c48ca94e8e1fe92af9700a12d389033bb291a',\n            'd45514d102726b8576ea92632dc7fef667271c163b034979a5b0c9c6f586b9d5',\n          ],\n          [\n            '419a6a646ddb817dd6b0978611a826aae0d21379246bfd4473a92894502b3348',\n            '332544cf1102f584545c9fb1954c2fd513c6d072f3dee1e2db1d6c81b09214b2',\n          ],\n          [\n            '22a682f7c3996d4d42014976a179046e547b942dd2d138d4a0c199ddfb2776c4',\n            '4f4606b0102223eeb918c9835a54356c979dcc310265b0685347f649cbaa285d',\n          ],\n          [\n            '67a6bec240dee0651cf258d2e6cfe8aa6067c5c3d4175a593a7de694995d2fa2',\n            'de692b7022d131586c249b49464d44991542c7ee209aca6c49c24ce1441feed5',\n          ],\n          [\n            '986ae2506f1ff104d04230861d8f4b498f4bc4c6d009b30f7544dc129b82d28d',\n            '3cccc0a6460e0ae328a4d97d3c7b61d86fc6289c189f2525110c441bb07e97',\n          ],\n          [\n            'a891d06670bde99b3ecd0f5ddff0672e0f5f609edd29d6d979c78080fae0ba03',\n            'b596cd922cbfa1c1419a88c4033c1ce71c6b38f0feb0f2ccefc3edc8166934ae',\n          ],\n          [\n            '42c315cc48958708595361ea83071bbcdd5b31583e19066d51d689227b1c0d7c',\n            '649a61ce571b95852914d1dfbb7a799074f1a1e1eb87f164d6c4a72bb2f9b1b9',\n          ],\n          [\n            'f785b0e098068875bb22b146866e6c0528fb7ea9758fd4fd7d228ce6a5674455',\n            '73fdb0bf6080da6ee15c767f0d9f5b414b04b6fd5f3aa60ae7bc490c10d62408',\n          ],\n          [\n            '672c4a514d9de43eaadee6863c1d68bc95f7eb56e81008ff044360f0018e22b1',\n            '548c7e9196a25bfe611de5a4ace203f7136246589704d9419935399191f37104',\n          ],\n          [\n            '6f01bd49c9d952455a47802254b88039982b1ca78de9b983f126ec9f7449d036',\n            '1562080ff1d5deab11a0f21a608776cea78551bfc3749b08360233dd989e17db',\n          ],\n          [\n            '79dba7ba068c9267571a109fe7fea2cc2a595b762c1eadadec1dff7df6e60a0',\n            'dc1e19b743d4d1811d223f9d2a9588ab83eb2df35751a397fb0da5aeb4824dea',\n          ],\n          [\n            'c116e30ebb4d2865126d45a8ea907f86289d406e2d6c6bd88abd97b1d0f56077',\n            'e9478823c35b30c2b8b16d9bb13b87657d5bd5e89e59c8c5313fd7fda410c206',\n          ],\n          [\n            '665f1a6ffe0c6437765b2784fca9bdf7e50941119e8dc8eca2b6ea0e0faa4b45',\n            '490e2ca49ffd18c26e8cca29f7eac37f7dede5bf81e215bc6e25a6602b7f4ccf',\n          ],\n          [\n            '59ccb19edd3da9a2d3a6b3d8d9900013e7910a08b724fd55939ac380d32af0e',\n            'bb6ad7eccad49159da65281b9345638e1621f7a33956cecd928e1e3c97fe91d1',\n          ],\n          [\n            '6a9501d85bf5dc802a1f28a08acc7d8fdf53c8af01a7cd3832a290825d8bdac1',\n            'ca640ad19347374381c6c6e44a3c56a3f8461b5c697a6f3530aff53d5f1ef1a3',\n          ],\n          [\n            '34325dcb458d8e5b343d0535537dd5e09c7046afcbf39f6611aa2ec254ea3410',\n            '8568d1dc5029554796cd238c49676718794deb3ead76feb86f3b1601f3c869c9',\n          ],\n          [\n            '2d27033cb622fa8ceaef897b52466883a46a6529ce596ff8d916cd0b10a6483c',\n            'ea177493148e92a4d0123f6d098326882a05d594ab147bf9599a4bf4edc331b2',\n          ],\n          [\n            '52910a011565810be90d03a299cb55851bab33236b7459b21db82b9f5c1874fe',\n            'e3d03339f660528d511c2b1865bcdfd105490ffc4c597233dd2b2504ca42a562',\n          ],\n          [\n            '6e4b20574af29f6aaa5d897cf601dc0a9fae27b0bff2a1da8b49bb9d9260e969',\n            '61d496eea86c4f2646d7eaad0896b1d23e937c54efd04659c0ac3c58afa16213',\n          ],\n          [\n            '392c4bba3e6106244457d51dbb46a198d62b953bef294a1336920e63cc4940cd',\n            'e50c821ad6af849db3c3d7bf6b594c91fcfd8679568822095fded58287146bd2',\n          ],\n          [\n            '8d435a0fdd81431f3e1cd4eed443240561a043cd71bbd4fc6cd5ed29e021934b',\n            'bcd8433681b32c85532912cb2a67107608f9ce9475feeb9b968f1ceceaa1d1ac',\n          ],\n          [\n            '5821b002dba277251a9d18eb72d5c720f4efe021b38029c017d871340893be7b',\n            '23ec12d67a538534df9b62f63fff5866869c04f125ded1c31bbe9540e59f2363',\n          ],\n          [\n            'dbd2f3d34beebf77121ef296d3aea625624289e1dcb58b8bd4dbc74df0222957',\n            '94a16bbe7e5762d0eb3e890abc26ed34587e52133edb809e3e344b3b3838fb9f',\n          ],\n          [\n            'd829ab2d2eed358c8464c3093dc72e911e2a1b96700bb9b12cdcf0c2a8a3b072',\n            '3ec1bbe459cae899e1f6c7be2a598059166273e2d406aaf7cf3bc0b0b543775e',\n          ],\n          [\n            '8ff01da682fdda5761e3fe0285630a57631e6eddfe1aa0bd28b945c867e045e8',\n            '3be3b91ef709bc92645291e2e58038b472565cec7b0f557f5e039b1b1b7d52d8',\n          ],\n          [\n            '84d067191caffc0e3fbea9cf65bdd242a942f1f95dab91751f97fea1c9f64e8b',\n            'd8c9d818f5b6ea38c68bfd91caf3f8b361304a7c351ef683c46fbcd4b30900d9',\n          ],\n          [\n            'd2b3ef863cbff9c5f49d996faee486879433543b9d296f1c672fc426889334fc',\n            '566d7e001025a8ee5b046629035cf83c921ba797f1b1baebd4511c8e8e2f4f0e',\n          ],\n          [\n            'fc8b9e62fd84b49a3e70b728e31a34fa21b5fa95141f580fc96a49751f461042',\n            'd5b4287a2a5816f78bfc86cb0b63b6086da77b7c5a014ab0f51db6524f3d820d',\n          ],\n          [\n            '7a1e7e2c7de6ba130c619436dd3f71ef240907ebc70710189c4cc1d387738ca',\n            '9cfc4945aa3fd5ffb2828204cb47806d03123fe158e45dd241a8d7714d3c7049',\n          ],\n          [\n            'd73fc6300614a355414994e1dc29a3c6e55acd833679e294291d9c0ab90a4a9d',\n            '3ed6f0e2cd69c0db1b71c30ce01e631c0d43d8000c8879231dd941178e83eb1',\n          ],\n          [\n            'dabd62029b4d0d1329f9e1eba1a2b0c0edf5380bdd4388c88aa17c957d462774',\n            '9ac784cdc8ad3fcd31cb988965424681cc263496d577e42eed0cc412a77ea93f',\n          ],\n          [\n            '20668209714547d0b6bd8a416b9faa62b067b13cd17fe6d3bf1949e634bf9a19',\n            '113ca8c80168fe5dde5738a8930de06da1fd67f8aa682fbd076a4965a9d1fd83',\n          ],\n          [\n            '21508b35b4afe0f01ad0857e7e1dbcc749688dc911e3a74c8a0e83174c8c609c',\n            'e2f8f5d3f58be2cd83681e414ad64ae98ccd53fc446fe12d9408df4140f7fcb5',\n          ],\n          [\n            'cfc746589e4a140785b3bf94c7269ad1b17ad259fbe717c276ae0b0e749833af',\n            '9ee25d020b5be979be4f9367e271322ce8a1006aef0e41f611e7bb1930978ef8',\n          ],\n          [\n            '99f888ff112b3f5d6033c6114f7232d6f379987131d5ed297f3fb1c1fc2aabf6',\n            '5d6cb14380271b234f3531d93f8b3a2de4bfa2b0706ac282fc983789dfce6f67',\n          ],\n          [\n            'd4cf299b52904a6770a8313e6db1fe12fff59bdc9abbc3aa496bbc6162ab6cc2',\n            'fc494ce7a52a4c83e4d8a1135f292428ffed4546c22d751ef9346544e51769f9',\n          ],\n          [\n            'f9c1c90b9aac1fc3e77a915d28dedac2d897e7a5fc7d75bbd4ea99cfe649ce7f',\n            '7c7deb67a844cd3842429ee2ef2f1a7f144bec235d38d3dcab113c2dfa54a06b',\n          ],\n          [\n            '5949c0407257fa172399f899019993b5700d21eb9a176240432191239585f43',\n            'bdf1d7ea1dc3975645dff17312db17599bf0d4e8dc71f1d907401e7bf7233606',\n          ],\n          [\n            '3fc424067a1f679b0fe2c0ae1093724f6233002be8063cb1cad2cccdb85b089e',\n            '5bb243009e581be52aedbb47eda98d26cf9fc800f7934c9466aaaef8c6629ecf',\n          ],\n          [\n            '95e3476b96a9454d467d26bf88c13fd78e4100d7f5b4bfe1a73c1a3004d85e13',\n            '4676645ea10f7550a88dcbf9f340e0ec4043f9d4c830228e9bfd92a132b7bcca',\n          ],\n          [\n            '49efa5f0a3978fe38f6e6637ecb67bba03cbb8d52209b18df4bc4671406b50e4',\n            '8551c53605e934529148ff2bac153b350bd2e06acb555371b7210c6a6deef872',\n          ],\n          [\n            'f9d9f00c0c3d104845bd77200497c5b072850383b2b91283a697ef313de16f2d',\n            'ddee1f404154e79473f886a537b8fcd4d99ef6db92b6cba85f8e9d1a4c34e09',\n          ],\n          [\n            '50f1973f020476859f33217266fa0af41af2eae2ba4b223d19c9b1d4d5a20c5',\n            'e3a723ef8d64df2ad1fea9a5a272feaf13d0e0a9b6b540aeb02b3a1092e16df0',\n          ],\n          [\n            'e78e6b2aff0e7073d9aa4cfc8af6741bbec04e4db26cd86eada7e96300cb7a69',\n            '14442eb0e6c87bde9e36a299addaeea8c3042b42b0496b7d3b68ea73311638c8',\n          ],\n          [\n            '811a6c2bd2a547d0dd84747297fec47719e7c3f9b0024f027c2b237be99aac39',\n            'a9230acbd163d0cb1524a0f5ea4bfed6058cec6f18368f72a12aa0c4d083ff64',\n          ],\n          [\n            '8ac7e1b94ed385ded83b1b497c1538c6e827db6eec05db6dec9b2d3732248956',\n            '2bc15c273913ccb57067cfd8e2448a486444f1bfc89743d801754c4aadb1e63c',\n          ],\n          [\n            '534d45db6baca8e2d2a5d0a765f16013a8d4eb58c6aaad3567cebdfac42d623c',\n            'fad669c89a2a54e44154357f992ccec8eef093e0f23a631d17fdf664419e500c',\n          ],\n          [\n            'fdc2915e626931b17b6bffc90fa47257dfabf0fb6beb8ddcc529a23391a2a4d4',\n            '69875848075da770bab37fc34f539c5a80a0e5f98f01182fbe3fb01680399178',\n          ],\n          [\n            '7e0cfeda14e8b9707e5f375fa07dbc3cb8ba4d0d1790aedede7797c8fc9b7887',\n            '5b7dde8cfa56c66423eb43d634b21950cb9b812a276eb8005a268f1e216620b8',\n          ],\n          [\n            '29ee3680c3c5ce19c7eca26dda1062fab3b1d0476a62272fbc972f0641b22527',\n            'b8dad1a3eed7c275b810a4ae830f0454a44da4c5782a4a18029c6401ef0090d1',\n          ],\n          [\n            '2023686920fefc109d95e34a75e878fda4d46b1f5497f89a9e609f5bff4fbbb2',\n            '5baefda0e85eb74998853a2959f7ff9c9464f775af1207489efc13e5cf9d135e',\n          ],\n          [\n            '39daf267869de081f789324098661a15bb89d0874dde29ddba88c0c08a6329d2',\n            '9933f25abc0170dff9e7544c57f59ff0599b8653163ea8dcac923a1c5b00759d',\n          ],\n          [\n            '7abc32442d5aa6a9a79118d04c517a43eae0e6f483a434972a92100feb43969b',\n            '8bcdc69779391e2eae3278106155192d6a159e69660f09a33dc8681a4073e799',\n          ],\n          [\n            'f7757a5c2b39a294eec055714a2dc218e0b2c192f21151d550bd7cbbf8b24a38',\n            '32bc6817f54c0999ce0e7a9b4f7583fbc4ac7e2e59f2540a71f5b899beaca052',\n          ],\n          [\n            '4dc9b2c29cf6728b86b93a5c8c6d6607960d267f03d3ba5b3934e6230be3606d',\n            'd15bde1925796247478dfd16228446ee272c319b856d4281ac1a58225ea13453',\n          ],\n          [\n            'abab69bf2ebe50004d7872aea45872b1efda21434ff5f61c15f40602f8fc8120',\n            'dfe1e05fe426e0ee018b6f6801f925e30f3e6c399b681755a12df4146163cdaf',\n          ],\n          [\n            '4a35ceb32f4216444af6ae386dc39ca14e43378baebf48004e26152aa34b81bf',\n            '7fd18e766ec74e3ebfa0bca551778d8140806a48f82ef1b8fb91d4cd47af6056',\n          ],\n          [\n            'ea99361bd54af4ba49f817be75e9c516f1828ceef3e486474b8eb97cf2e65389',\n            '517a964b7058f85636e883ec00d36b2674253ab5f3447f70fd87a97750e2e296',\n          ],\n          [\n            'c694838789835cffffca3a007dbff6f342f233210d16668fc3445660878d8b13',\n            '23d4752d1130f10135faa62387e2c84d64fd341810eff9c05dc14904098c2daa',\n          ],\n          [\n            '5aec2275d0429ad4262437934d269e3aa387bf05cb1dfc0718edc1feafd8479e',\n            'f3fb88720eda74b204760ab21e9d309bcdfefce13037d3899da37e8e374f87c1',\n          ],\n          [\n            '43ef1232fad346c280d297baa16f0ed4d953686b095d0bfd007a3666d908d16f',\n            'b6e3a1bbe2a64c290a1bbad1cc984bbfb91c146cc3f83c012929092e8376fd3d',\n          ],\n          [\n            '5432c277580eb3cc101496fdb5d1544ef535cf725fbe8733b83809b055d2d396',\n            '50230a8108329bede4db187b4ba8d35bb73d25b7659ec7fa1f1a8477d4083055',\n          ],\n          [\n            '59d24eed2de01fb147b5a0ba1aea605b9ce5edde383a825b2588bb28f34c5a52',\n            'f4701fe20340384ce5034f0b3bc5af8ae9cf94b51e29120aa2f531243ac629a9',\n          ],\n          [\n            '33722147e2b1ac751bcda5630b9799c3323a5d85dfe902183bce4640e52ae125',\n            '3d7566a889ae6b64bcebd5e74c61458ce9cd27a640e4fc7df67cbacfb5eebf4',\n          ],\n          [\n            'a772dc29ae49985bf0452405ab30905fd55f684ca272d90dcad07416aa79ea48',\n            '73f8dc82f0838a53524e16c05ec267f6b7ebcfbfa229203cf588bfdfd66f7fb7',\n          ],\n          [\n            '370073d2888a1e92d7822a04e1a0d263fe7465db62674feda800f64c64a737b',\n            'e33c943f3159c4fb0066acd9c0fe773eac621a01a39ab066b91308948d7c58a3',\n          ],\n          [\n            '2b093ee1533ded6d1a704c9852304402f733afc4c731f04d498aa25174da7342',\n            '524bd3b4859dff8fca1e1e2e65f4cf7f0bb55520d228960bcafd7adbb600224d',\n          ],\n          [\n            'a7a6b9102398b4e38dd5e471062c976fbcc5f9e520feb5e98aa75663b7a231ca',\n            '389216e456ed70c689ae461ff48ff2f657a0d42ab2330814fe587520b205271',\n          ],\n          [\n            'c68816f3869f7772f30718001ae4e73711e3713aae558097f6ec84aea3c040ff',\n            '383d9e85d9a72b778c1cad16a51f8ab6796d97f06dbee21d8f89fd215bbd194c',\n          ],\n          [\n            '7e5c1f020a8b9ff2ffda0ff12f91ab2ce7c4e993a254d0b4fae4dc0299cfcc03',\n            '2606beb61e2181b15d958422ac91e4bbabf472ad28036ff96baf36ed532641e1',\n          ],\n          [\n            '391b95a861772b39fd494e652cb5c90ef97718eda666d1f320caca80066df09b',\n            'ad00d332bcc3a0b86a800e91b2a5e650372a734d32a2739a0f71414c694fe844',\n          ],\n          [\n            '83f93d3c7f8b2e78496afe16772e8d54dcecbdd3502313f0f33630dac9406eca',\n            '9fcdc295adb190199aa606f9059d75ad57776cf89f80aeef6ea67c71f562d4c6',\n          ],\n          [\n            'e004562ae423e396098d1361fbd9756a6d0d4a9ab5f7c7b8e137b472f6c30a5a',\n            '390d4929f8e54009f295ed86e9fa88eb0526e8a9cf9e699493d222c70a6e8876',\n          ],\n          [\n            'e2353719b5fa306eeb2cb325a51023dc1b2e6a19ce943db99ef6b1f8b27ca270',\n            '2cb05dc35cf21e3ce0f2e84868ee0d6ae0b7968e2cbbfcc4b038cbb31549af0b',\n          ],\n          [\n            '30133afec328d71b3dc3ad671ca9434dc3b7f34e4f11cd841953da5d88041f86',\n            'b341b402446ff46d4d46c5bf86c6014d85c0065224f264324174a26df8e8f5e6',\n          ],\n          [\n            '442e86e7085a748ca6cf4dd3d381c7b1b2bdd9b135f4aff12e404075f726882b',\n            '152cf994536d82bac4e526321e5bab11a4c2edb03d8cbfb51b5c59218812d56d',\n          ],\n          [\n            '6ab19199df4cf0af4a7cb71bd71d900db22e4b3fcd1bdf4f6a5496f27ebba613',\n            '1442a8079326d05159b9eb9ce27aee73fcca77d36d4a47a1587b7ca1f5cd346b',\n          ],\n          [\n            '9df0841a8e8e10c6d6ed3442ee20ae2a8f8377f2ee835159481d47e7c5b195fd',\n            '765799dce45f150b658fc9513cef0c860fc7fc44197aff60a3943eb2ad1db29a',\n          ],\n          [\n            'd6683d044a03ab980d640236e8d001c110ff5ba35d7c8ac2d6d5ba069e2067f0',\n            'd3d3f62958358a79d1167cc4fa4e1f96dd98211c4cc978193f483c215991b32b',\n          ],\n          [\n            '84ca3a785aba0643c465bc70a3022832703d9318ddd9413b7c96108d1bf8054c',\n            'cdef3a6f1c28f8419f19c2f99e1c4515af47a2692e65d9ca1b5d9db100caebab',\n          ],\n          [\n            '6bd7fc66a64d87e3885a97e8e0e267ede294686fbadbe82c659a678cc78c45b0',\n            '7104d23d245aa0ce230738d56c8fd588d195f3492827ceacdcec47e09517bd2d',\n          ],\n          [\n            '82eb86d2c4f2334abbfb341a12c80fdd53203ff529185476d352cf280d824288',\n            '5407cca0d34d7545db1823059f53890d44354128e1323061b13a2466f04ca03f',\n          ],\n          [\n            'c24112a8951da8625edd78cb9c72818df76ac8bb712094e8069d2240a17e714a',\n            'ed78a62ebf7310e54109f6f10f95ed5b455726bfdc28b7409d98de88b2ddfb05',\n          ],\n          [\n            'f7120a01ae3d274253718f6f38336046965793cbea40661f7bbfa0421cd4c0c7',\n            'bfb7e83e496595804f07b0985bc52625f4dd90e654efde43c4454d3a2b176ba6',\n          ],\n          [\n            '6488ea04dd82064b5bbb0f1357d880f4b89b2d6cb7fd1be777f78c99e3707f11',\n            '1181cdc08848aadb7419ebf823b444e11a5957701a7cad964fc743d6f102e467',\n          ],\n          [\n            'ba93530c9525681ab96329dfcb8fcd5dccaaa53c207c6b3c58a920407989120c',\n            '3153f325ab69a9f3cdb791403d35ac018ddfdfd6575ff60af023aa232cdfb49f',\n          ],\n          [\n            '94c444b1bd21d51f4ee0f427b8255b1124354489ca6ee7f40c7937d682c38318',\n            '36186a57c187c054f3bf924a53f6fbba506693eb46b6ca36e6533dd9f99a51e5',\n          ],\n          [\n            '45c2ee3dd988a86efc603698a3f4f171ce81b6ccb2b6a4117e5746dde4d1a5d5',\n            '98c52a60673237d8ec84c4ec48e00e908e3e43ae864e6d2cfed57b3a075eb4d2',\n          ],\n          [\n            'ed075c81ea7bc42e78260ccb5e70d0686ce15d168d1ad45ceed04b2ee3fdb85a',\n            '14f38433f3c4c0da5c5f415364a736b4c7d7c098dc558560d59e072f1e256d3c',\n          ],\n          [\n            'c7899c4a56d327e079df708bc586a2f19829911a1e3c68b8a80337fc251e5551',\n            '5bb779655edef171147925bb81372791104cfb9cc53260f22fcb453633780a5a',\n          ],\n          [\n            'f30e74eca216fff39517307711e37c16d45f5e43e1c5a17d8312bf4741f0d9b',\n            'e5f134099e1682aa9e0fc39a305e9519a4c5404e28ab094fec28e0ad2363f028',\n          ],\n          [\n            '78dc4b569e94791d3f06caefd0dc894297954ced85dc68e199f375720b426c4b',\n            'a3b76c7600edde5dd0c8fe9776ac00831fc6f9070b5149e43cb97c4267e06b37',\n          ],\n          [\n            'e2af917f95c8030e9dba3c2f9bd0cebdd88be16d0db8417b60a18166a99d3bcf',\n            '43934188194b4307f2a1f134d843eeefe25bd851251778fdc46856dfd2ebf205',\n          ],\n          [\n            '9b52f160f0183fe566b442b3c024d639ef93e21b4178252f6ac1fb27f9cb7379',\n            '846070fe8cec1d53a9e0d3a47c597e87860108c78a3549bcc4f3c2f9128c816c',\n          ],\n          [\n            '321e3f620f59e0b50e4e930e4b383113c19b32479ae622b670c5d667325a1569',\n            'cff22dece9d236444ea0ba10a5e2fa0fec5e3856b9f5724a842e1bef5adf00de',\n          ],\n          [\n            'f2df102bc0521a1663042ba5c4747355c210031dc4caab97e92194d162c1bada',\n            'cd8dfdff95cb2a9d928b422351f8dad76857380c17a83126823ec5e87ad5724',\n          ],\n          [\n            '7610e1ee92fefc0936d4d215228dcca900ef8d025d5042662e13ffd4c6871d03',\n            'da78accd08960f152cb7e7639d86c2a26aa8c6c298640fc1d721ac2a2f89252a',\n          ],\n          [\n            '3ae9f8abb1d1199d42771bd5370fd08c5494cec58dac69f29d1750527f518fbc',\n            'a8ca7351c70279dd50155a5a564a3e1c01ef599599bbc3a92c9f2a33c041a7be',\n          ],\n          [\n            '5bdd9c1d00d92f1beb844f01603e8e62b98bfb0e4b4822a82e7c0343affe262f',\n            '409ed87d603c7c0a8b07654f213b7aeda5f1004efabfbea0d84437788fd91b2b',\n          ],\n          [\n            '6aa688b448c11d72db6bdd672af441f2ce37cebe1866b649be55cbbffd335a9a',\n            '7a18f01f5c3e0beac7dd7089d384e1aa9aa8cfae9caffef13432405230a844b4',\n          ],\n          [\n            '7b9d8810429c294300a5c38afcf238d07d5a7da6a236edde45b493d80cf6ad1a',\n            'f17ff74a46e377b583a5fb3ea9f4e412d81b79ffa4dc95c96862c09887765184',\n          ],\n          [\n            'a59ccd6c9125a27195ea3c470521338a768a6eda9e227d58e70dcd8e25c25f80',\n            'e2b6e9efe344a4e7dd080354dedbdf5a8265778cde26d8674ca52678a923a6b2',\n          ],\n          [\n            '94b0683dc19114c5ea32fff5905066bd417e8f226af10a4d43d391e60ca9e968',\n            '2a5eb4394947be9f9eb65927a09462b6055f498b3c90948359e6b47ac25dd5c1',\n          ],\n          [\n            '559a141238dd6a51ce41c8a692430af4b81d78a04b90290afb173b97eeb6bad1',\n            'caa72fd43d0d3092d6e08724e3843af19abc985351a20b3f055cd7b495bc96b0',\n          ],\n          [\n            'a392b26b0503a71f0ce1e02acadf19d72a84d6211b21c914ee8bc58dfea92529',\n            '90bb3c9f9f1b598b6f97aed2c48f4c59f12194d8eb011465ff88e7560d1c5493',\n          ],\n          [\n            '5a679ccf2d4319b480cf0ff2f665404ff5fd09ced9dc3987b01f7549a9ffa0b3',\n            '519c8de12efa76da15399a4682ba3355b00d7867b8bc084bb849805e030e94fe',\n          ],\n          [\n            '43e9f8900f5e8170defc2559396acf5d1606903fa8ab4a4779f2ed7d9b85440a',\n            'd35df8428586f02e6edc79505e51d9c2f1ee452b6e1df51dd57d4e9f433f65be',\n          ],\n          [\n            'c13dcf15ade2a7383c3558922c9f13c37678e51e8d8193ccbdca9c816a15004f',\n            '64a986d49f5f679e1faf7ff42a2c8a936443e678db2bebec7760906cccd0ef0d',\n          ],\n          [\n            '3871f2ff13be671e3740d5191dff99af196b11382b5e1a7fc9d803668e3303bb',\n            '58e722b723cd286e02e635abb961a27d63261e598e4a0418e2760696ce5aed62',\n          ],\n          [\n            '3ab5707837c2e80cda96b1567b9cb305a2410b9b3783a3ff29048e7b7b2103cf',\n            '278f7c097a9bba62a5e1eb2c0ca0026b3f8fb29631480ba78a8f7db00f11b0b9',\n          ],\n          [\n            'f44b39759a2e6db723a6f90249972dfd08e95380f1fca470eacd1d03e5edf214',\n            'befafccf223ca065f0a0db4eea93ff06a2116fca81f7a4a9436a8d917a02dede',\n          ],\n          [\n            'd9dd8e22e2ffae0ae09e2c8ae944c4b583122032dda1669dd506cbf9e65492de',\n            '26d2fbee7e9f713b0eb192fe94512178c16a9046c31b7594116567353c34d9a2',\n          ],\n          [\n            '3b12f048d6222c9e7d2ce9126f434a2da720f75f6c832fddfb849e271eabca38',\n            '5e56e10e47ba51512e3e53b62bab68d9b2030a937c6d88ba890b4a7159f8215b',\n          ],\n          [\n            '233288b79b72f33fefa0490349d2e2eefdfbf5cd81e1864d362d1fef94f586fd',\n            '72118af2e72db1cb4a714fb6b199926c73680acacaa1fd024a7c5d7008223769',\n          ],\n          [\n            '775332333f2e5d8f641a39ff8b8f4353856e9e0db3b167b158e9cd348f99fa4a',\n            'f921be4d9677d2b7e34633676047021264ce6d662cc44d0a4441644c7182a65d',\n          ],\n          [\n            '1906a34ff532826a96149158799e8d4a33ebf8a3878347b168321bc7e2ad4c66',\n            'dcf20c27ccb0caf42e95037960274f3cb4ae1cc43bdcec77ecbea573e2e93c1f',\n          ],\n          [\n            '7789dec464dc45a7117f0c56bd6b33ce4f4a3dfb6f1885bb7889989fb1eadd82',\n            '6aec6236fbe5be579c3c060fa77c09692ffdf141b8ba3173af110f980860c448',\n          ],\n          [\n            'f66c3919379549fe1fb9c96622161c45cace6fc81a5f18a467d31bb1eb678e17',\n            'cbb7bf343aa57a3f055826e71569423132d8666cd7ab16037e2d32888c458d20',\n          ],\n          [\n            '55572ec3a2fc3bab911ef94abb3a43d742d00a32ce5c487d2b7363997e92f185',\n            '4d23fae36437c6d8652d5be524470e4c2c098866ae465bb8d2097a6bae870d79',\n          ],\n          [\n            '700ac63d3db3d61fc9c356d79ba829fdc9b234a6b05379e2c76a103ea6fc8800',\n            '396725f25d957734df5eb06f724527f84dd92d705f5c996bad36cf8ef72e6a32',\n          ],\n          [\n            '65835d2d9240143f435e5d2fcd9ef1322827eba58ae37ee6bae2cbcb36a82909',\n            '14d2d3952dee39065f6bfa836bb721e1270bfb2f8de428efc7fd19e781dc82f3',\n          ],\n          [\n            'c01981542a09258a9e43cf5443d050feb6ed04de2b5e871617715a9069df1c40',\n            '8d3c24204157577929ed3dcd738f065ed64cbe7f366acc999b3e91862a14f1df',\n          ],\n          [\n            'ab391f790c8164cf716fa8f19c2860596e677c0c66db71bf15147b2a42f4901b',\n            '2f8a8c1e25f25f0e6f8766b2cae47baa73f1edee853121ba7eca5bec24c9b59f',\n          ],\n          [\n            'a1c0bdc61bfc2c081acfea73dd2d5f962a6c595d579ad1a18c11792a8672a9ed',\n            'b597e441f7e149df3f28efae662b11f22559783c144da8251c0d77ca3889c777',\n          ],\n          [\n            'ac9e5a5d2b009d78387012895a8b01b15d9ea65df13e971aab1960a835fd3794',\n            '70ae21a18d3fc629c9fbe87116a9cc90f6fe8feafc878cb6b76712a02634d41c',\n          ],\n          [\n            '19f84e74e424988ce59d3e0065b630afd0ce56316dd6e6a72a1b57728fda85f8',\n            'f9a8ed7793b8028acd853d65ff19ca2c9320cb4f47e7a74bde30c875fa8338a7',\n          ],\n          [\n            '532346e77c4b09e11d0caa694f7c4e590b2a5dd9537a0a976d23e2c45d8f7bdb',\n            '249310b464f271cb120c2f4dac10939a116139d804a6217b1c90dd169a7639ac',\n          ],\n          [\n            '2eef2226b69095d25006f492046fdd7e6d6b44d9d7adb8eca39be59485d0b7b2',\n            '802ef7a7ce003cc2694780dd5ee356c9008cf0b5b305ff8d9401eaad6097e45f',\n          ],\n          [\n            'b29ddf7aece9e6768e2bfbf145855fd8eb1689c22e113faf2ec35ac426ceb960',\n            '3a8014ff99a13181bb4a60baa6b66972a122cee0d190e9c3ab29b64b8fe975d8',\n          ],\n          [\n            'ff229b98c9e2fbdc6b5b80a7aa28f671d6ffc7444f069bb1c9f4c3a13b0610f9',\n            'e6593b7734faaa4aa0db2934b3df4a91bfb3f221c986b4add02665720b321023',\n          ],\n          [\n            '67e7dd6e536b03850bfcc9304d4c1eaf65e1ac47b9d8deee85dc24ace9c64b77',\n            'bc1a96d7916d9f0638a8b754665a44edb72bfdbf35d506282ea395cb3803ee30',\n          ],\n          [\n            'a9225fe9dd9949402b8e8ff79452050c6c3899061bf5dc0faf7db5dbf3cac138',\n            '1957f763591e18c7d5234332bc5cb3b3aff462be5c7c3fd419f416e6213c682b',\n          ],\n          [\n            '415cf6ab4d718f83033a10352e34f2a9c510488945ce45481f906cd9bb1db3c5',\n            'adc883a55da017f241fa84b352326039730d2891c4f05cbe43b8a0389a99b42e',\n          ],\n          [\n            '5cf3066c0f4dcccaa42d00a702c2e0cece742ffe67f6e0cc0d431b4055783e9d',\n            'f56c002bdf0ac979368927ba63e480ec48e2504fb74204394716d8cbbda3cca1',\n          ],\n          [\n            '3464391fade61eaa660d8366bba0e9fe0e37726b045f3cfe0e5871836c8d58a7',\n            '1c5c5df95d718360f86299a4d7b1ac00c9a4a9f96395fbc6230463e84836906b',\n          ],\n          [\n            'd0e2356ea6f822c1731e440710b4cf11bf79296b62fd8e8f93a2a58236969e9d',\n            '79bb27154b00c0e1bb3ea1b4282af57f404e60835702e5a65596e63e0eebdbde',\n          ],\n          [\n            '999c9fcbed288e3624a3e8121fa64e804fd9b594a4d8a9df2ab2d763e41368a',\n            '2d1565f1a4db6c6d7a7c239914ca76af0fad8f9669372a30d7bbff5c381e7fb8',\n          ],\n          [\n            'd0ef0d9c1e333378211d09c0ee630d51fb1f8df53814ca869c527611615bc4fb',\n            '19cd34e76bd171143fc683dfd3e8031ef6cb25cca059520882bf993792499463',\n          ],\n          [\n            'b27173911c0025f9cae5391a2bae96c4e77de6dfa8c487f44f5f7b8944247ecf',\n            '52cbbc5ed3b99d62dc4fd6939384e2806aedc4606e8f899990d017c909870c48',\n          ],\n          [\n            'bdbf58c174e93d60255e49912dfeba6c106c0ba6e1f2203317874e2bafd4233a',\n            'd23d3139f6da02e15a082a4b6ae5ce5674b194d9b4cfdb69f18e0e4822853dd3',\n          ],\n          [\n            '7bd80de069f8011d45874d02de76e77ec7fa645f029fe3e6db66f23271f0ed34',\n            'c7d9bd7c0ff87805aa807c49278d970499a7b0a0c37b6e893ac1a5c6a97c7519',\n          ],\n          [\n            'aa3dfecc53851bcfe8e817db9962b026fd63bb2e5d9448057db0c22e4e5c56f2',\n            'c02fd371477287783a6d014e920c510e467a8aa15a36cce25dc142096ee820fe',\n          ],\n          [\n            '3ddfb4487ddc736672950e8e07b8d1bdd30330115e8707a2aab6d81768447283',\n            'ae89c5974be8fff9ea3a8a66fef1a4175a54690092187e3a3d302144f3380cb6',\n          ],\n          [\n            'f57d4a680c2e97a6fd2e290ae440fc2c503cbb26f751f00a20974a2553c6981a',\n            '334cfbdb316dadb84c83028691a4adf2a87ba5e099e5d61a56b53188e64eb1ed',\n          ],\n          [\n            'a9e574a7c3053fedff6f4a2417010a07bf5a8c0757dee1fc8d05ad40598e503d',\n            'cb8f14fbaa20ef1cdcd15ef8ea6b35bddccedcdb71dce8f0c23195012cbce52d',\n          ],\n          [\n            '6ac43677ba27d2f4c2c2eca32ef25d92d1fa765c47a4571849270779c04f7fbd',\n            '6405cfb89f7a79babe858190df08857de2b57731eda13df59504c9a0f45ab0ba',\n          ],\n          [\n            '878b29a64ab18385e132fda6c2a88714978308801001b6050f61a5ef940ad98e',\n            'b966df245f257d07fa27f91568c5869df846d41b54f56b109c87b4b66923df19',\n          ],\n          [\n            '5277b40fed0377c011548edc1d0f57532ea048863b8ae06ca77de4fba670b3b',\n            'c1d15edca7e94f43eddea130f13925988ca269fd3d4deb2e7c7deaac5456f574',\n          ],\n          [\n            'cb9e35a283fa42f235889cc263d4a35acba488ab877a0d0ffe08238779058ee8',\n            '8f319d64ddbec56fb8bcbef397411aea9f4b650217ba13eb7c97c13102f51e36',\n          ],\n          [\n            '2225098e90ef30f7eef5bd88b3f2518cbc45c4c7e816f03579426408279e4771',\n            '1f5da87bb6e1f03f642d4ac5d8ec69f9c8a36b64e53fed094ad5cd43e270f4ff',\n          ],\n          [\n            '3573e87f7d44e5affc4a11e58c5ba9e4bff7dc8d2aa7b50f2deae4cc624fc56',\n            '8730d90c993d249c759b76e377dbc7ae56c2d28d1d9e43e0cbfd0c79760f0d30',\n          ],\n          [\n            'd1a103985c6225b10115344516d747014f45bfec501aa98aceb995d87699743a',\n            '5cff24c15beb0c4765046b243aeeab93e8f419dadcd71518b04679ea0adce4bc',\n          ],\n          [\n            'ad6856dfcf8048debe7af290281628045f2a99df491c6f5f099650ed840c4fd6',\n            'f6df379892e9adfc0ede290b17a6d7eb2441629aa962bd142a8362572b95faf5',\n          ],\n          [\n            '3937fc8c9060bb6ba1f241d1574942fa91762be3a3ef0988a210ae728eca8770',\n            '8b8c2e835e9afdc96fc17e08d894925e3d8e280422983075a3882820b3be4a65',\n          ],\n          [\n            '16ca2931061678873535c8af7dd3ffae5519eb3743f0bbdfa5c52745d6b0dd2e',\n            'ecc999868431ca521d76109894df376596a8937aae374e926c81fdaad923bfbc',\n          ],\n          [\n            'd9de69cc40924fe62bcce527f279d2282175f63ea254cc0a4ff7022ae8a797e9',\n            '4dbfe8d2e4ad14273b3eaeb8d31a20724b05e8478d719706835082729e7b21b4',\n          ],\n          [\n            'e1a723c7aa6acfb66e6c05e60c485460cc9275a6dcfef292a58bdacbcfbafc1e',\n            '552577940dfc79f6ecdba1455cfb424948fd187158e3f02775eeeecb5ab852d4',\n          ],\n          [\n            '273817af2ad3a4784fae99508ad1e9827b5385ccb5e11fa5060add87450d17b0',\n            '494a1183e7af4f58f197dab433a60830f5f2c177b43018c8ddf8f6838704cce',\n          ],\n          [\n            '96e04ff14ace80d760475bbb6a8db5c9958b6d5ea3c645e1809227a8c726cda2',\n            'd6acd58f53ccd13c6d0cb0ba4a485d02c0ebe11545b1ac9a10c72735aac8a1bd',\n          ],\n          [\n            '689ba1efb706498ea36c26f5a25af8d56c55def82966401e6b43eae3375ea3f4',\n            'af8a79c1fba37bd6ea7f887807b5e14e4e354199295a16ed057ba39f232c290b',\n          ],\n          [\n            'ea003867de138c44f4d550c1f881b66ada7753693335c6f0adc00b950fd9810c',\n            '375c17b222f42b89c5107c4dc0a2d2eac43e8b3f7e8ed6466e6af1b2707dbf20',\n          ],\n          [\n            '449abd4a28a1f44ae49fcfd37c5aa78e16237ffaa9b283b70a2727afd5d3675e',\n            'd9b2741154c2a1fb79edadaf3600397538b38fe1d2e18a205f02509c8bc7d823',\n          ],\n          [\n            'aef9f30a9ace86f9bd6dec61621039f7b947c02c679f8fdef578287501a6ad9a',\n            '22061cdbdf91bcd4d7be81566e0431042ce10870597ee4f17d6b31a1cc150057',\n          ],\n          [\n            'b2327b22d7369e8443ca7c534715eec175497ab4201f09f93a9c443e70f3c8ec',\n            'bf40ab3f52f15386c4986403344e7c8fbf276093e97edcd59853ffd3dd6c4f72',\n          ],\n          [\n            'dd39de3f862f49db85f848a5cf952807f7af5025f5ab5f27d2e965bc0e978ad8',\n            'a127a38e083588643e3d8b3ac652386d8a77b438aa1c532c74f9d5dfac7e4710',\n          ],\n          [\n            'a51078213fe23fa799d16328b612890013bb1e033c0e4ada237bfc294621951e',\n            'c3db877a06dbf4c12e0161ca89edf0496d9b3b6d7af923f64e86d9a93d81563e',\n          ],\n          [\n            '8d7e253c423b82a15c3fca18c585c8db24533cf1a2718c1b6998de57fb1a627',\n            '23f4f3f8a2ceff32ecab83f70cb69a124201e2ba529692570113a2c90e1630f7',\n          ],\n          [\n            '915a89859799f6066c761faf3e74d684e2e736de2b45248a1a7ea92df0f2a659',\n            '7ea1fcde3c0e363007e16261427b0c4902364222be981f1b4d1a6d153bf70980',\n          ],\n          [\n            'c293180b56b7d967ce98dadd60b64720de458e555650a93d43e575a061297f03',\n            'e2f879119bca9b5659e7f8c7014fc2a55459611de469f8ff59d30212e0d9673f',\n          ],\n          [\n            '406a366b6771786a10b0c35723218bffe9c0dab89824752952f20cbe76b2a987',\n            '5df9ec6f3a68a4cba54deb19256cd0376fc29ac33f2582e50408fcbc263a65c9',\n          ],\n          [\n            '7702fafe772d6905ab74cc79bf0580fd381fd7e24113f331e59158166749cf8c',\n            'f9e05df17a917e1a6d65a191c985806b7a181bd2cbeba5b5891c5851e19bfa46',\n          ],\n          [\n            '6a12a3020ef4030cccb3684f25b97037b3a0e732318cd50eb92723375ccfe80f',\n            'd5a304a8e519c90e56135e2d04b8f6b551284f864a4d53bb4370e221d11fcdf3',\n          ],\n          [\n            '5543894af3d00ed7d740abdbd75c96b06877b787db5f70eea78b90a8d7c00a',\n            'bb4c85a3d8ea29efaafa24406912dd84d5b14dc32bf656ef6c6bd58a5d943f92',\n          ],\n          [\n            'd12597c5da8d20c572b6f4313f4dce0ae62f4c911f40dff500ecb03708d55bb',\n            '359e47f4a64015f9745893bfe97d3ea8f5f11eccb7b4ca19d60bbee96e82c8aa',\n          ],\n          [\n            '4394a88ce99eb037f42936315c5b44be8be38e2fd2d8c00d237d6e5c840c15d6',\n            '131d3d913e9690cd9477ea1ff1d959c8156334ccf244e8da2ced68e206e3793a',\n          ],\n          [\n            '90791f516a778529220e3c30b07f575f5eba4824d4be2ef45b257d1adc763666',\n            '2a852dbe82a401fdd6a71cdc3d0634a559ae7ac1df117c4bd3e84905f6fb89ef',\n          ],\n          [\n            'be5b2b75fa651b8f42b29638eeb7bc59e2928991405ba968723c0f90afa4cda4',\n            '1fcaea6a655c4d31d301edd565dd9d8f7fc6879f63d2a1d23e6f4e5f355b17f9',\n          ],\n          [\n            '5c19227cab1572a07099e6f41e715afbe74e126a34d26586501edda4ac0cd272',\n            'c7d878d165f0e1aebdb252dec883770b3b550959977b68c07fad6e6b8f066765',\n          ],\n          [\n            '230c5b4ef455d0d218264852b67f384c2e9f866d2d438d9968d3941c6f95f8eb',\n            '7b76406e2b2edbc5732e463f116586e0249540c2e58b594a213dcaf9de0bb931',\n          ],\n          [\n            '52855ac01ec47862dfdc9c71be6ffe6f489f17537013d439811359cea92a153b',\n            '7cdbc3084686928ee30daf83ba25d723cab9310d848890f44e222a136800bd23',\n          ],\n          [\n            '143bd74fd2fcfdab061daa305ce52491c7cea30fb1f9ef992a5fd6cabed718b9',\n            'ab39188da86c46661b2d422a1a953cfd696efa0744dfe2a65d715734d47b4638',\n          ],\n          [\n            '859aac027f4abbeee213fb864608d018c3ab6a41a974484d8c8d455400d68ccf',\n            '1a2b2115541338dc2474683bdbf76ed3415f08dbf9759809d53f5918cbe48e7c',\n          ],\n          [\n            'bb393d8a0246397bb12b1970e985848181c4f930c5dd3817293fd0b52c975ae2',\n            'e1c03545eef2d2c47917505f9274eff2329fc77d7ee9d22dde3dd66ccb4b26d4',\n          ],\n          [\n            '577ed7ad714c39bcd3834ff61567225ceb804e7da93d06fbe5d5482bc27bf322',\n            '608a20787e5b827753e27f0d76ce02a472d90c3b8a3b2477ad8d1d41229f6cdd',\n          ],\n          [\n            '42184307a30b94158f6c5fa62bda46ffccc7e5ca6f4a3eaa80aa28e5ff1db101',\n            '86664ae7978294223c75da487cd348e347cc1f5ff1c0a5d498ac0112965ee748',\n          ],\n          [\n            '7dcba84fa341e2150061acbcfd0ba33b9246f60dbb064df94fa1a3061e24c182',\n            'ae3bafe2eee4ba5a8c121e442736929a565051bae18a349454e2879c6cbd2530',\n          ],\n          [\n            'e80a5d5b3668e0a6dab37fe1a30ad73e85c320411338106671b75be6d9d77742',\n            'ebd0bce07ee2f5a94f009998943474541f6a19cf97f79297ea0ba097f9f6f251',\n          ],\n          [\n            '62b321cf253f3ef358da7f7dfdfaa40e8c731dfe37246d71bda1d78bdd7e40b0',\n            'aae7d387582abaa01abfde18ece5bde1d2d52f6c15136570eb06f3759cc30698',\n          ],\n          [\n            '47398e0904aeea9c2937739d238efd7b04a35c6c86afbb7a444db2e10839bfe6',\n            '707cc6ce22cdf3f7623f09175dd4a1aa27b77776ec3d49851a25145391dcf9d1',\n          ],\n          [\n            '4bd44c6e96c742d9cd293d5b771681bab7f610bb80eb1634fb2561339044506',\n            '6cb980d0a78a7e5a19b8122242f2edc49494fee4973f88cbac3cb1b526d977f9',\n          ],\n          [\n            '5f77af26d68ebefd8d6d7729848be190c620984fd4103e0601013d4d72f72140',\n            '5b12c7f815cf21f429df122b9d79f4fca183c0c6c08a17970c75b70041b7ba73',\n          ],\n          [\n            '7952b4e48f5cdd52016b79d07218d9d7850f2e94b0040e15b650c3a5cd704069',\n            'f29d06016494259c1a9cf56fa922c0a3a50d1a867c5d1b7497a2971e3f098126',\n          ],\n          [\n            'ed25b526180c78c3268382915364a8d885db737d2e6912f880417926a2d4d328',\n            '3c406d54f3e4c725ddead096eb35b0f409f1b1029685b6d9f5225ebc95a85069',\n          ],\n          [\n            '9fe734361fdc74f5c1b8535199ea8b964a495e1b4977146932c35cbff3909ef1',\n            '6079800cd5392cd27038f6e4ab1a4e10aa68b5bd2d06342cb7d5ed39e95d57fc',\n          ],\n          [\n            '12259ba7fccba9ee35354c3cc854860379854bdb70db3c3e5848fa019666476a',\n            '771943cd4014272a2630e2b1f5bc01f1de1108322accfebf160fa464709440b7',\n          ],\n          [\n            'b1c200a42635265dcb8e9a0f2b3333e83ea1e9970b38c9fd16a6aa1896791eda',\n            '910da053281a5874e713500b8ac15bf00b89195f00d00295b08dc19b0a62d82f',\n          ],\n          [\n            'cf1134e8b2ce55403bb098b718286d7ea80ae6103e195b673bae78c5dbbecc11',\n            '5f4ea514465f3f964257b9025ad95e062857c23ffb006732aef0a04505a3a868',\n          ],\n          [\n            '875ed4adce032f39795e1ff56050799761b558c4b90dc9b7f6f359a1c3901858',\n            'ef7674aec325bc8f5885b4527949b00e48598cb6ff10e1733d0217ed5957e401',\n          ],\n          [\n            'efffc5c6c573e0a1805c3b7c9af1ddd103b314b367582fcc2a9473ce16dfcd3c',\n            'c4b0bfed83e7ed45b023c6ba7a6bede96870eaa01c931ec2e936edc2dbe4cefc',\n          ],\n          [\n            '550e17001d4366674459eea132fba2f2e49e07544bad1fc47ae0305bae1ee06b',\n            '940c682bdfa37972d5cf0b739ca0a9af6ae9bad74f51bfe35945204b6a421ad',\n          ],\n          [\n            'b55972bac57b26565f64a7150a306615cfe3abfc3ef1ebe343bc93fbf6f2936f',\n            '39d10c6864ece97cdd62c3fe5b32c14c9e77231835d12159a9d1166a1efadedb',\n          ],\n          [\n            'bb001f899b8672e3122eac3c5f266f3a116cadb3152caacaa6abfc8a301f1784',\n            '518b6bdeb256b3bea0c4185f8808c1527cf375668091fa2560ced46c2bdf1bd4',\n          ],\n          [\n            '69e33b1bfa56635c390a5355abd2710ae684e98fe364d503bd121c4ca9aaa80f',\n            'af96a747be8a8d05a156df100be2f8272478f6660cbc4daba0d233b010fb8d0c',\n          ],\n          [\n            'ded811d79d41d97e5b0a0538ce2b59a39047e9b6c1bb0eec07f770ac43d7c280',\n            '5162ce6989b64df2d80941e5c8fb16ad7af679a2d50b8d76667d0198cc10559',\n          ],\n          [\n            '40a7f3928444efacca57a27d3d0400f8b16abe2cf572ce356d1a752a6e87005c',\n            '9b1aa49fa30d33873c0ce5da198358b59dec8bd239795b7887ca8de62ce4b380',\n          ],\n          [\n            '9e8f66827420ae63625e4b199e814e6a71fc8947c82e5ef5ac7ec6e8dc3521be',\n            '833fb31cd8b7fb8c520cbcee1c391962bf3cab119f0b1fb7a3ce5900885dfd70',\n          ],\n          [\n            'd0b678534bb47e1b7452cf6451e0453c61b78f7537bd2feba5c77cca0553072b',\n            'b20bb3c1b7d85472b2ea3e92db3dcb1df6f1c2a4669949701b69c1fcc94a211c',\n          ],\n          [\n            'b05e600fca161628458bf444a14b29b57c679c88fb13712f35e067ca5025ad4f',\n            '7e3e5e1038267ff0131367660d37feb3d468163c149af4aa304ac9aa23aa0e6c',\n          ],\n          [\n            'd996f0efca59993c0db7c7d46a70e017d6e1ea889b9fd79a120654fbe55f2e1b',\n            '4b43f76448e60c116e78931b021a4435f1ea0f1389608a2c3a02e484dae4714a',\n          ],\n          [\n            'e70b718ec0dd6cb4da308b4412c65ad76f72db78aa21eac2e39b2d2ce0eaff36',\n            '9592acb8f18e11965bcbed08fbc0e39dbffc96de70ce9296d7adc20a7b6f2700',\n          ],\n          [\n            'fae2f26e7ced7542bd5db9ce1297a9a420d45f6a084aff468eb954fc1504a332',\n            '47673baa5bfcfa46c04dfc84ed9b023ba86329aab74d27b76951016dffafb4d3',\n          ],\n          [\n            '48017e15e6317d4b1b7567638a5b30bdd3c316c6330039e3228d9c25c5a41b58',\n            '237d5791c965c96797a00d6435940f3b976f742c7df43179a56f1a0fec23363d',\n          ],\n          [\n            'e80d6f9d0fb2ddaa1ea08ac6e9535c90fa6605658459e7bb0dffa5466f76580',\n            'd95d3ebe000427ea5bfa5b06d7715454a3eaf22d31673f0d3cb2226a6e931d16',\n          ],\n          [\n            '54541f075fbd75fe977fd2eb88c93a6d18ae28273b9ba16a306ba4552bcc1939',\n            '85c50f8148bff67632a5e113ea1fc25916f31a1562a436be31f2b5426f525f20',\n          ],\n          [\n            'ae428e2a7a73ba4a541ba20ba41e5b5c32209e3c16a36b04c09dcaf805072ce2',\n            '594c34a1d3022386420bb75f6c20b88f43afc27418939e12092fa58335dfa252',\n          ],\n          [\n            '4766be7ee55cfa78578f3d2dba2486de57a614844cebcf8bfffcd789221e38f4',\n            '880730daf7f32d9c6a3af5f82856f8efa307a3e9e9695c93a8f6466fb6ef3a0',\n          ],\n          [\n            'c64aee4bbea9da282e0aea9745dcdd80d5504b2398e5f1b1e3eb7eb4789ff85e',\n            'd47bba6d4039391a64f8573322562b9e6aad1d3aadf19cd627d3929b015961cd',\n          ],\n          [\n            '487065b603bac9a1558ce3b5e173a174e38e25e78c832c46406941083ef079e0',\n            '932aab54695d9ad34d4315c2d13ebd2a8f5ebe866401dc944877dda5b810f3d7',\n          ],\n          [\n            '2c1b3b1c599790f967bd4d951ffc181f507d7d16396c0d1dceb0a36e0018afc9',\n            '51bd3daf8d150f3458b393f5c0e42d7f3b483a7dd6857af971cabaf782ab9905',\n          ],\n          [\n            '7bf067b5a0fae2ed13c9a7050c58e3c0d63bd1cc96eb619190156b83fb4ef655',\n            '52cc3cd3a5af8b065392eb84110696944ca3fd105def9d3721603b6335466d2b',\n          ],\n          [\n            '682ff33b27c10b80f9598ea14a1852ac48634044bb07d9e3790a9a48c028c5c8',\n            '5e6a14fc36d8c5664a2c13c376551abe8197ae6af928f261d3176e6128763ea2',\n          ],\n          [\n            'f52b50efc5c8068cef968a35cfce93cab0dbd1eb371de786e562aa90bc059fc5',\n            '660896517be150ad8d1308a56dc479e27e5a313b1aa43c71c9acda0b4269259b',\n          ],\n          [\n            'ec42909fa266d4aa1f83a1ab92952cc2f2d110677b0fe099c7a3d354bbf5751b',\n            '80d3cc9b18106b50a9192ae737312ee63105ea7dd3f720c8c5d2c73e99e2961c',\n          ],\n          [\n            'cf2ac419fb542c212e9378783b0d739afe3c421e2356593ec4f12498e7ea4dfd',\n            '550392c1106a33fb4fbc875589836806c1970a29ae4f27d9fecef182a8a52347',\n          ],\n          [\n            '16b3f501e354f33110be0bc9d0cb5aabc01ac8102cbba33a26f2317788306a2',\n            'e29875ccebb1753ba249ef8a6899e2b8ca3f5da3a9bf1598f45d1e89bdb38b4',\n          ],\n          [\n            '828bb85076230f1b9c96530e38aa1a29cb3dfe868708b8127ac81968f2b68ac8',\n            '685a3a5d1018351602adc360dcaa5fba02434270c693afd63402dc1636af46af',\n          ],\n          [\n            '8f625459e2a5f83c8a66a00e3fd78ea2bacfa0a951245c74bd6b94cc6f8d0838',\n            '318ef5ef4cba1bcc81814dc8d4c05502ef7b94d3bc726fe107cf76578dac5010',\n          ],\n          [\n            '1245401394147c30c1584cd9a14da8de1141dfb66500bdb245f432cacaa47532',\n            'f102cb981f8a8a28cc1e7fd1a847a073abc45445a0ed264c040004f760fc9cef',\n          ],\n          [\n            '4d7c73eebd492614ffa55365a122efabb908f7e6e7501152f0f42fb288998988',\n            'adc3825f822addd4782d129f584c72154649387310e9e59ca13443660d36fe90',\n          ],\n          [\n            'ffc90fc464a293f9730d9246bc005b2b4494732dfc3eaefaa9a7388fa60926fd',\n            '10a4dd3c7df6450dbc4f36c69d37f3c8b5e8a3a52f0174de53997a042d383336',\n          ],\n          [\n            'c216ac7b6833e40eab554531a1accacecce2d0963ce1f23545ba19439cd86cdf',\n            '1430f8df8688204043ed242e7c9149cb3d9c4e85a02991e57a60463d73949714',\n          ],\n          [\n            'dd11519fed69c92ce95c07b20e4a0324470dea9ba07cfa1191ff4d57b6397dee',\n            '712f03f9d0faf60393d8e2f7a746501f703e8c94f89f37cb3ff2961afe9cb6ba',\n          ],\n          [\n            '43d7469712952e0fcd21cf7ec89d23c90da01d6921c23bc54a7571d5829ed9c7',\n            'b7d32348d903c95bd803794c678c0628a81dc41adfb59be979874276abd98d78',\n          ],\n          [\n            '4fbc3f7269d8dc803ad1d04dc96294d03736f0f481eb0c1c4a24c610591560f9',\n            'b8fba8d4b83c692caf2c6fa85bf4bfd97f6908b36dbdffb948d23f4ef5bb263e',\n          ],\n          [\n            '244881fe7f4f8db056edbcd73c8363134e1dc223fbdee196eb9e5a9a49930ef6',\n            '80a16d9c5d093255b3ddec9a7821b15dd85d30fb1b8f987167e22b0bbf2a5de9',\n          ],\n          [\n            '969dc4d3d35ba6f1c980f2ad8bc7c9b3f107332d82e35b33a23194f8ccc0b5de',\n            'eae8da34a07031d340517c973fc3b4c16bacab58284fd9a523a033364c909408',\n          ],\n          [\n            'ddafcb1ade01a9d9a5e4d1aa0534dbc0767910d70885ea1176434effd90c5d1b',\n            '456da40e7cee7dab2f9a35a44ec6060584a3ca98c6470c2f4a92b9f0d2de9a24',\n          ],\n          [\n            'b04f042ed5e126ac7bd7eb61a87d83c9e0b3b8459dd18fae35f7e57de7f4904a',\n            '9a3126ae085c7134def4200a707d74ca59c7f858cc20d1c0a19acb6d6fc77cdb',\n          ],\n        ],\n      },\n    },\n  ],\n};\n","import { BinaryWriter, utils } from '@neo-one/client-common';\nimport { BooleanContractParameter, ContractParameter } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport { StackItemBase } from './StackItemBase';\nimport { StackItemType } from './StackItemType';\n\nexport class BooleanStackItem extends StackItemBase {\n  public static readonly TRUE = Buffer.from([1]);\n  public static readonly FALSE = Buffer.from([]);\n  public readonly value: boolean;\n\n  public constructor(value: boolean) {\n    super();\n    this.value = value;\n  }\n\n  public asBigInteger(): BN {\n    return this.value ? utils.ONE : utils.ZERO;\n  }\n\n  public asBoolean(): boolean {\n    return this.value;\n  }\n\n  public asBuffer(): Buffer {\n    return this.value ? BooleanStackItem.TRUE : BooleanStackItem.FALSE;\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new BooleanContractParameter(this.value);\n  }\n\n  protected serializeInternal(): Buffer {\n    const writer = new BinaryWriter();\n    writer.writeUInt8(StackItemType.Boolean);\n    writer.writeBoolean(this.value);\n\n    return writer.toBuffer();\n  }\n}\n","import { BinaryWriter, utils } from '@neo-one/client-common';\nimport { ContractParameter, IntegerContractParameter } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport { MAX_SIZE_BIG_INTEGER } from '../constants';\nimport { IntegerTooLargeError, InvalidValueStorageContextStackItemError } from './errors';\nimport { AsStorageContextStackItemOptions, StackItemBase } from './StackItemBase';\nimport { StackItemType } from './StackItemType';\nimport { StorageContextStackItem } from './StorageContextStackItem';\n\nexport class IntegerStackItem extends StackItemBase {\n  public readonly value: BN;\n\n  public constructor(value: BN, safe = true) {\n    super();\n    this.value = value;\n\n    if (safe && this.asBuffer().length > MAX_SIZE_BIG_INTEGER) {\n      throw new IntegerTooLargeError();\n    }\n  }\n\n  public asBigInteger(): BN {\n    return this.value;\n  }\n\n  public asBoolean(): boolean {\n    return !this.value.isZero();\n  }\n\n  public asBuffer(): Buffer {\n    return utils.toSignedBuffer(this.value);\n  }\n\n  // https://github.com/lllwvlvwlll/MegaCity.AntShares/tree/master/src/AntShares\n  /* istanbul ignore next */\n  public asStorageContextStackItem({\n    currentBlockIndex,\n    vm,\n    scriptHash,\n    callingScriptHash,\n    entryScriptHash,\n  }: AsStorageContextStackItemOptions): StorageContextStackItem {\n    if (currentBlockIndex <= vm.storageContext.v0.index) {\n      const storageContext = this.asBigInteger().toNumber();\n      let hash;\n      switch (storageContext) {\n        case 1:\n          hash = scriptHash;\n          break;\n        case 2:\n          hash = callingScriptHash;\n          break;\n        case 4:\n          hash = entryScriptHash;\n          break;\n        default:\n      }\n\n      if (hash !== undefined) {\n        return new StorageContextStackItem(hash);\n      }\n    }\n    throw new InvalidValueStorageContextStackItemError();\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new IntegerContractParameter(this.value);\n  }\n\n  protected serializeInternal(): Buffer {\n    const writer = new BinaryWriter();\n    writer.writeUInt8(StackItemType.Integer);\n    writer.writeVarBytesLE(utils.toSignedBuffer(this.value));\n\n    return writer.toBuffer();\n  }\n}\n","import { common, UInt160 } from '@neo-one/client-common';\nimport { ContractParameter, Hash160ContractParameter } from '@neo-one/node-core';\nimport { AsStorageContextStackItemOptions, StackItemBase } from './StackItemBase';\n\nexport class StorageContextStackItem extends StackItemBase {\n  public readonly value: UInt160;\n  public readonly isReadOnly: boolean;\n\n  public constructor(value: UInt160, isReadOnly = false) {\n    super();\n    this.value = value;\n    this.isReadOnly = isReadOnly;\n  }\n\n  public asUInt160(): UInt160 {\n    return this.value;\n  }\n\n  public asBoolean(): boolean {\n    return (this.value as UInt160 | undefined) !== undefined;\n  }\n\n  public asBuffer(): Buffer {\n    return common.uInt160ToBuffer(this.value);\n  }\n\n  public asStorageContextStackItem(_options: AsStorageContextStackItemOptions): StorageContextStackItem {\n    return this;\n  }\n\n  public asReadOnly(): StorageContextStackItem {\n    return new StorageContextStackItem(this.value, true);\n  }\n\n  public toContractParameter(_seen: Set<StackItemBase> = new Set()): ContractParameter {\n    return new Hash160ContractParameter(this.value);\n  }\n}\n","import { utils } from '@neo-one/utils';\nimport { ArrayLikeStackItem } from './ArrayLikeStackItem';\nimport { StackItemType } from './StackItemType';\n\nexport class StructStackItem extends ArrayLikeStackItem {\n  public static readonly type = StackItemType.Struct;\n\n  public clone(): StructStackItem {\n    return new StructStackItem(this.value.map((value) => (value instanceof StructStackItem ? value.clone() : value)));\n  }\n\n  public toStructuralKey(): string {\n    return JSON.stringify(this.value.map((value) => value.toStructuralKey()));\n  }\n\n  // NOTE: We don't use `toReferenceKey` for comparison here because it doesn't short-circuit\n  // Instead, use equals for efficiency and since it's equivalent\n  // tslint:disable-next-line no-any\n  public equals(other: any): boolean {\n    if (other === undefined) {\n      return false;\n    }\n\n    if (this === other) {\n      return true;\n    }\n\n    if (other instanceof StructStackItem) {\n      if (this.value.length !== other.value.length) {\n        return false;\n      }\n\n      return utils.zip(this.value, other.value).every(([a, b]) => a.equals(b));\n    }\n\n    return this === other;\n  }\n}\n","// tslint:disable readonly-array\nimport { BinaryWriter } from '@neo-one/client-common';\nimport { ContractParameter, MapContractParameter } from '@neo-one/node-core';\nimport { utils } from '@neo-one/utils';\nimport _ from 'lodash';\nimport { ArrayStackItem } from './ArrayStackItem';\nimport { CircularReferenceError, InvalidValueBufferError, MissingStackItemKeyError } from './errors';\nimport { getNextID } from './referenceCounter';\nimport { StackItem } from './StackItem';\nimport { StackItemBase } from './StackItemBase';\nimport { StackItemType } from './StackItemType';\n\nexport class MapStackItem extends StackItemBase {\n  private readonly referenceKeys: Map<string, StackItem>;\n  private readonly referenceValues: Map<string, StackItem>;\n  private readonly referenceID = getNextID();\n\n  public constructor({\n    referenceKeys = new Map(),\n    referenceValues = new Map(),\n  }: {\n    readonly referenceKeys?: Map<string, StackItem>;\n    readonly referenceValues?: Map<string, StackItem>;\n  } = {}) {\n    super();\n    this.referenceKeys = referenceKeys;\n    this.referenceValues = referenceValues;\n  }\n\n  public toStructuralKey(): string {\n    return `${this.referenceID}`;\n  }\n\n  // tslint:disable-next-line no-any\n  public equals(other: any): boolean {\n    return this === other;\n  }\n\n  public isMap(): boolean {\n    return false;\n  }\n\n  public asBoolean(): boolean {\n    return true;\n  }\n\n  public asBuffer(): Buffer {\n    throw new InvalidValueBufferError();\n  }\n\n  public toContractParameter(seen: Set<StackItemBase> = new Set()): ContractParameter {\n    if (seen.has(this)) {\n      throw new CircularReferenceError();\n    }\n    const newSeen = new Set([...seen]);\n    newSeen.add(this);\n\n    return new MapContractParameter(\n      this.keysArray().map<readonly [ContractParameter, ContractParameter]>(\n        (key) => [key.toContractParameter(newSeen), this.get(key).toContractParameter(newSeen)] as const,\n      ),\n    );\n  }\n\n  public get size(): number {\n    return this.referenceKeys.size;\n  }\n\n  public has(item: StackItem): boolean {\n    const referenceKey = item.toStructuralKey();\n\n    return this.referenceKeys.get(referenceKey) !== undefined;\n  }\n\n  public get(item: StackItem): StackItem {\n    const referenceKey = item.toStructuralKey();\n    const value = this.referenceValues.get(referenceKey);\n\n    if (value === undefined) {\n      throw new MissingStackItemKeyError();\n    }\n\n    return value;\n  }\n\n  public set(key: StackItem, value: StackItem): this {\n    const referenceKey = key.toStructuralKey();\n    this.referenceKeys.set(referenceKey, key);\n    this.referenceValues.set(referenceKey, value);\n\n    return this;\n  }\n\n  public delete(item: StackItem): this {\n    const referenceKey = item.toStructuralKey();\n    this.referenceKeys.delete(referenceKey);\n    this.referenceValues.delete(referenceKey);\n\n    return this;\n  }\n\n  public keys(): ArrayStackItem {\n    return new ArrayStackItem(this.keysArray());\n  }\n\n  public keysArray(): StackItem[] {\n    return [...this.referenceKeys.values()];\n  }\n\n  public valuesArray(): StackItem[] {\n    return [...this.referenceValues.values()];\n  }\n\n  public asMapStackItem(): MapStackItem {\n    return this;\n  }\n\n  protected incrementInternal(seen: Set<StackItemBase>): number {\n    return this.incrementInternalArray(this.keysArray(), seen) + this.incrementInternalArray(this.valuesArray(), seen);\n  }\n\n  protected decrementInternal(seen: Set<StackItemBase>): number {\n    return this.decrementInternalArray(this.keysArray(), seen) + this.decrementInternalArray(this.valuesArray(), seen);\n  }\n\n  // tslint:disable-next-line no-any\n  protected convertJSONInternal(seen: Set<StackItemBase>): any {\n    return _.fromPairs(\n      utils\n        .zip(this.keysArray(), this.valuesArray())\n        .map(([key, value]) => [JSON.stringify(key.convertJSON(seen)), value.convertJSON(seen)]),\n    );\n  }\n\n  protected serializeInternal(seen: Set<StackItemBase>): Buffer {\n    const writer = new BinaryWriter();\n    writer.writeUInt8(StackItemType.Map);\n    const keys = this.keysArray();\n    writer.writeVarUIntLE(keys.length);\n    keys.forEach((key) => {\n      writer.writeBytes(key.serialize(seen));\n      writer.writeBytes(this.get(key).serialize(seen));\n    });\n\n    return writer.toBuffer();\n  }\n}\n","export class BaseState {\n  public static readonly VERSION = 0;\n  public readonly version: number;\n\n  public constructor({ version: versionIn }: { readonly version?: number }) {\n    this.version = versionIn === undefined ? (this.constructor as typeof BaseState).VERSION : versionIn;\n  }\n}\n","import { InvalidContractPropertyStateError } from '../errors';\n\nexport enum ContractPropertyStateModel {\n  NoProperty = 0x00,\n  HasStorage = 0x01,\n  HasDynamicInvoke = 0x02,\n  Payable = 0x04,\n  HasStorageDynamicInvoke = 0x03,\n  HasStoragePayable = 0x05,\n  HasDynamicInvokePayable = 0x06,\n  HasStorageDynamicInvokePayable = 0x07,\n}\n\n// tslint:disable-next-line variable-name\nexport const HasStorage = new Set([\n  ContractPropertyStateModel.HasStorage,\n  ContractPropertyStateModel.HasStorageDynamicInvoke,\n  ContractPropertyStateModel.HasStoragePayable,\n  ContractPropertyStateModel.HasStorageDynamicInvokePayable,\n]);\n\n// tslint:disable-next-line variable-name\nexport const HasDynamicInvoke = new Set([\n  ContractPropertyStateModel.HasDynamicInvoke,\n  ContractPropertyStateModel.HasStorageDynamicInvoke,\n  ContractPropertyStateModel.HasDynamicInvokePayable,\n  ContractPropertyStateModel.HasStorageDynamicInvokePayable,\n]);\n\n// tslint:disable-next-line variable-name\nexport const HasPayable = new Set([\n  ContractPropertyStateModel.Payable,\n  ContractPropertyStateModel.HasStoragePayable,\n  ContractPropertyStateModel.HasDynamicInvokePayable,\n  ContractPropertyStateModel.HasStorageDynamicInvokePayable,\n]);\n\nconst isContractPropertyState = (value: number): value is ContractPropertyStateModel =>\n  // tslint:disable-next-line strict-type-predicates\n  ContractPropertyStateModel[value] !== undefined;\n\nexport const assertContractPropertyState = (value: number): ContractPropertyStateModel => {\n  if (isContractPropertyState(value)) {\n    return value;\n  }\n\n  throw new InvalidContractPropertyStateError(value);\n};\n\nexport const getContractProperties = ({\n  hasStorage,\n  hasDynamicInvoke,\n  payable,\n}: {\n  readonly hasStorage: boolean;\n  readonly hasDynamicInvoke: boolean;\n  readonly payable: boolean;\n}): ContractPropertyStateModel => {\n  if (hasStorage && hasDynamicInvoke && payable) {\n    return ContractPropertyStateModel.HasStorageDynamicInvokePayable;\n  }\n\n  if (hasStorage && hasDynamicInvoke) {\n    return ContractPropertyStateModel.HasStorageDynamicInvoke;\n  }\n\n  if (hasStorage && payable) {\n    return ContractPropertyStateModel.HasStoragePayable;\n  }\n\n  if (hasDynamicInvoke && payable) {\n    return ContractPropertyStateModel.HasDynamicInvokePayable;\n  }\n\n  if (hasDynamicInvoke) {\n    return ContractPropertyStateModel.HasDynamicInvoke;\n  }\n\n  if (hasStorage) {\n    return ContractPropertyStateModel.HasStorage;\n  }\n\n  if (payable) {\n    return ContractPropertyStateModel.Payable;\n  }\n\n  return ContractPropertyStateModel.NoProperty;\n};\n","import { IOHelper, JSONHelper, WitnessJSON, WitnessModel } from '@neo-one/client-common';\nimport { Equals, EquatableKey } from './Equatable';\nimport {\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializeJSONContext,\n} from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport interface WitnessAdd {\n  readonly verification: Buffer;\n  readonly invocation: Buffer;\n}\n\nexport class Witness extends WitnessModel implements SerializableJSON<WitnessJSON>, EquatableKey {\n  public static deserializeWireBase({ reader }: DeserializeWireBaseOptions): Witness {\n    const invocation = reader.readVarBytesLE(utils.USHORT_MAX_NUMBER_PLUS_ONE);\n    const verification = reader.readVarBytesLE(utils.USHORT_MAX_NUMBER_PLUS_ONE);\n\n    return new this({ invocation, verification });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Witness {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public static fromModel(witness: WitnessModel): Witness {\n    return new this({ invocation: witness.invocation, verification: witness.verification });\n  }\n\n  public readonly equals: Equals = utils.equals(\n    Witness,\n    this,\n    (other) => this.invocation.equals(other.invocation) && this.verification.equals(other.verification),\n  );\n  public readonly toKeyString = utils.toKeyString(\n    Witness,\n    () => `${this.invocation.toString('hex')}:${this.verification.toString('hex')}`,\n  );\n  private readonly sizeInternal = utils.lazy(\n    () => IOHelper.sizeOfVarBytesLE(this.invocation) + IOHelper.sizeOfVarBytesLE(this.verification),\n  );\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): WitnessJSON {\n    return {\n      invocation: JSONHelper.writeBuffer(this.invocation),\n      verification: JSONHelper.writeBuffer(this.verification),\n    };\n  }\n}\n","import { Block } from './Block';\nimport { InvalidScriptContainerTypeError } from './errors';\nimport { ConsensusPayload } from './payload';\nimport { Transaction } from './transaction';\n\nexport enum ScriptContainerType {\n  Transaction = 0x00,\n  Block = 0x01,\n  Consensus = 0x02,\n}\n\nexport type ScriptContainer =\n  | {\n      readonly type: ScriptContainerType.Transaction;\n      readonly value: Transaction;\n    }\n  | {\n      readonly type: ScriptContainerType.Block;\n      readonly value: Block;\n    }\n  | {\n      readonly type: ScriptContainerType.Consensus;\n      readonly value: ConsensusPayload;\n    };\n\nconst isScriptContainerType = (value: number): value is ScriptContainerType =>\n  // tslint:disable-next-line strict-type-predicates\n  ScriptContainerType[value] !== undefined;\n\nexport const assertScriptContainerType = (value: number): ScriptContainerType => {\n  if (isScriptContainerType(value)) {\n    return value;\n  }\n\n  throw new InvalidScriptContainerTypeError(value);\n};\n","import { InvalidStorageChangeTypeError } from '../errors';\n\nexport enum StorageChangeType {\n  Add = 0x00,\n  Modify = 0x01,\n  Delete = 0x02,\n}\n\nconst isStorageChangeType = (storageChangeType: number): storageChangeType is StorageChangeType =>\n  // tslint:disable-next-line strict-type-predicates\n  StorageChangeType[storageChangeType] !== undefined;\n\nexport const assertStorageChangeType = (storageChangeType: number): StorageChangeType => {\n  if (isStorageChangeType(storageChangeType)) {\n    return storageChangeType;\n  }\n  throw new InvalidStorageChangeTypeError(storageChangeType);\n};\n","import { BinaryReader, utils } from '@neo-one/node-core';\nimport { utils as commonUtils } from '@neo-one/utils';\nimport _ from 'lodash';\nimport { MAX_ARRAY_SIZE_BN } from '../constants';\nimport { ArrayStackItem } from './ArrayStackItem';\nimport { BooleanStackItem } from './BooleanStackItem';\nimport { BufferStackItem } from './BufferStackItem';\nimport { UnsupportedStackItemSerdeError } from './errors';\nimport { IntegerStackItem } from './IntegerStackItem';\nimport { MapStackItem } from './MapStackItem';\nimport { StackItem } from './StackItem';\nimport { assertStackItemType, StackItemType } from './StackItemType';\nimport { StructStackItem } from './StructStackItem';\n\nconst deserializeStackItemBase = (reader: BinaryReader): StackItem => {\n  const type = assertStackItemType(reader.readUInt8());\n  switch (type) {\n    case StackItemType.ByteArray: // BYTE_ARRAY\n      return new BufferStackItem(reader.readVarBytesLE());\n    case StackItemType.Boolean: // BOOLEAN\n      return new BooleanStackItem(reader.readBoolean());\n    case StackItemType.Integer: // INTEGER\n      return new IntegerStackItem(utils.fromSignedBuffer(reader.readVarBytesLE()));\n    case StackItemType.InteropInterface: // INTEROP_INTERFACE\n      /* istanbul ignore next */\n      throw new UnsupportedStackItemSerdeError();\n    case StackItemType.Array: // ARRAY\n    case StackItemType.Struct: {\n      // STRUCT\n      const count = reader.readVarUIntLE(MAX_ARRAY_SIZE_BN).toNumber();\n      const value = _.range(count).map(() => deserializeStackItemBase(reader));\n\n      return type === 0x80 ? new ArrayStackItem(value) : new StructStackItem(value);\n    }\n    case StackItemType.Map: {\n      // MAP\n      const count = reader.readVarUIntLE(MAX_ARRAY_SIZE_BN).toNumber();\n      const referenceKeys = new Map<string, StackItem>();\n      const referenceValues = new Map<string, StackItem>();\n      _.range(count).forEach(() => {\n        const key = deserializeStackItemBase(reader);\n        const value = deserializeStackItemBase(reader);\n        const referenceKey = key.toStructuralKey();\n        referenceKeys.set(referenceKey, key);\n        referenceValues.set(referenceKey, value);\n      });\n\n      return new MapStackItem({ referenceKeys, referenceValues });\n    }\n    /* istanbul ignore next */\n    default:\n      commonUtils.assertNever(type);\n      throw new Error('For TS');\n  }\n};\n\nexport const deserializeStackItem = (value: Buffer): StackItem => deserializeStackItemBase(new BinaryReader(value));\n","import { BinaryWriter, ByteArrayContractParameterJSON, IOHelper, JSONHelper, utils } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class ByteArrayContractParameter extends ContractParameterBase<\n  ByteArrayContractParameter,\n  ByteArrayContractParameterJSON,\n  ContractParameterType.ByteArray\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): ByteArrayContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = reader.readVarBytesLE();\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.ByteArray;\n  public readonly value: Buffer;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: Buffer) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfVarBytesLE(this.value));\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBuffer(): Buffer {\n    return this.value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarBytesLE(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): ByteArrayContractParameterJSON {\n    return {\n      type: 'ByteArray',\n      value: JSONHelper.writeBuffer(this.value),\n    };\n  }\n}\n","import { BinaryWriter, BooleanContractParameterJSON, IOHelper, utils } from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class BooleanContractParameter extends ContractParameterBase<\n  BooleanContractParameter,\n  BooleanContractParameterJSON,\n  ContractParameterType.Boolean\n> {\n  public static readonly TRUE = Buffer.from([1]);\n  public static readonly FALSE = Buffer.from([0]);\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): BooleanContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = reader.readBoolean();\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.Boolean;\n  public readonly value: boolean;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: boolean) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfBoolean);\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBuffer(): Buffer {\n    return this.value ? BooleanContractParameter.TRUE : BooleanContractParameter.FALSE;\n  }\n\n  public asBoolean(): boolean {\n    return this.value;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeBoolean(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): BooleanContractParameterJSON {\n    return {\n      type: 'Boolean',\n      value: this.value,\n    };\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  Hash160ContractParameterJSON,\n  IOHelper,\n  JSONHelper,\n  UInt160,\n  utils,\n} from '@neo-one/client-common';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class Hash160ContractParameter extends ContractParameterBase<\n  Hash160ContractParameter,\n  Hash160ContractParameterJSON,\n  ContractParameterType.Hash160\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): Hash160ContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = reader.readUInt160();\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.Hash160;\n  public readonly value: UInt160;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: UInt160) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfUInt160);\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBuffer(): Buffer {\n    return common.uInt160ToBuffer(this.value);\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt160(this.value);\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): Hash160ContractParameterJSON {\n    return {\n      type: 'Hash160',\n      value: JSONHelper.writeUInt160(this.value),\n    };\n  }\n}\n","import { BinaryWriter, IntegerContractParameterJSON, IOHelper, utils } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { DeserializeWireBaseOptions, SerializeJSONContext } from '../Serializable';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class IntegerContractParameter extends ContractParameterBase<\n  IntegerContractParameter,\n  IntegerContractParameterJSON,\n  ContractParameterType.Integer\n> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): IntegerContractParameter {\n    const { reader } = options;\n    super.deserializeContractParameterBaseWireBase(options);\n    const value = utils.fromSignedBuffer(reader.readVarBytesLE());\n\n    return new this(value);\n  }\n\n  public readonly type = ContractParameterType.Integer;\n  public readonly value: BN;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: BN) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfVarBytesLE(utils.toSignedBuffer(this.value)));\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBoolean(): boolean {\n    return !this.value.isZero();\n  }\n\n  public asBuffer(): Buffer {\n    return utils.toSignedBuffer(this.value);\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeVarBytesLE(utils.toSignedBuffer(this.value));\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): IntegerContractParameterJSON {\n    return {\n      type: 'Integer',\n      value: this.value.toString(10),\n    };\n  }\n}\n","import { ArrayContractParameterJSON, BinaryWriter, IOHelper, utils } from '@neo-one/client-common';\nimport { SerializeJSONContext } from '../Serializable';\nimport { ContractParameter } from './ContractParameter';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class ArrayContractParameter extends ContractParameterBase<\n  ArrayContractParameter,\n  ArrayContractParameterJSON,\n  ContractParameterType.Array\n> {\n  public readonly type = ContractParameterType.Array;\n  public readonly value: readonly ContractParameter[];\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: readonly ContractParameter[]) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfArray(this.value, (val) => val.size));\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBoolean(): boolean {\n    return this.value.length > 0;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeArray(this.value, (parameter) => parameter.serializeWireBase(writer));\n  }\n\n  // deserialize is monkey patched on later\n\n  public serializeJSON(context: SerializeJSONContext): ArrayContractParameterJSON {\n    return {\n      type: 'Array',\n      value: this.value.map((val) => val.serializeJSON(context)),\n    };\n  }\n}\n","import { BinaryWriter, ContractParameterJSON, IOHelper, MapContractParameterJSON, utils } from '@neo-one/client-common';\nimport { SerializeJSONContext } from '../Serializable';\nimport { ContractParameter } from './ContractParameter';\nimport { ContractParameterBase } from './ContractParameterBase';\nimport { ContractParameterType } from './ContractParameterType';\n\nexport class MapContractParameter extends ContractParameterBase<\n  MapContractParameter,\n  MapContractParameterJSON,\n  ContractParameterType.Map\n> {\n  public readonly type = ContractParameterType.Map;\n  public readonly value: ReadonlyArray<readonly [ContractParameter, ContractParameter]>;\n  private readonly sizeInternal: () => number;\n\n  public constructor(value: ReadonlyArray<readonly [ContractParameter, ContractParameter]>) {\n    super();\n    this.value = value;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfArray(this.value, (val) => val[0].size + val[1].size));\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public asBoolean(): boolean {\n    return this.value.length > 0;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeArray(this.value, (parameter) =>\n      writer.writeArray(parameter, (value) => value.serializeWireBase(writer)),\n    );\n  }\n\n  // deserialize is monkey patched on later\n\n  public serializeJSON(context: SerializeJSONContext): MapContractParameterJSON {\n    return {\n      type: 'Map' as const,\n      value: this.value.map<readonly [ContractParameterJSON, ContractParameterJSON]>(\n        (val) => [val[0].serializeJSON(context), val[1].serializeJSON(context)] as const,\n      ),\n    };\n  }\n}\n","import { AttributeBaseModel, AttributeJSON } from '@neo-one/client-common';\nimport { Constructor } from '@neo-one/utils';\nimport { Equals, EquatableKey, ToKeyString } from '../../Equatable';\nimport { DeserializeWireBaseOptions, SerializableJSON, SerializeJSONContext } from '../../Serializable';\nimport { utils } from '../../utils';\nimport { AttributeUsage } from './AttributeUsage';\n\nexport function AttributeBase<\n  Usage extends AttributeUsage,\n  Value extends Buffer,\n  TBase extends Constructor<AttributeBaseModel<Usage, Value>>\n>(Base: TBase) {\n  abstract class AttributeBaseClass extends Base implements EquatableKey, SerializableJSON<AttributeJSON> {\n    public static deserializeAttributeWireBase({ reader }: DeserializeWireBaseOptions): { readonly usage: number } {\n      const usage = reader.readUInt8();\n\n      return { usage };\n    }\n\n    public abstract readonly size: number;\n    public readonly equals: Equals = utils.equals(\n      // tslint:disable-next-line no-any\n      AttributeBaseClass as any,\n      this,\n      (other: AttributeBaseClass) => this.usage === other.usage && this.value.equals(other.value),\n    );\n    public readonly toKeyString: ToKeyString = () =>\n      `${AttributeBaseClass.name}:${this.usage}:${this.value.toString('hex')}`;\n\n    public serializeJSON(_context: SerializeJSONContext): AttributeJSON {\n      throw new Error('Not Implemented');\n    }\n  }\n\n  return AttributeBaseClass;\n}\n","import {\n  BinaryWriter,\n  BlockBaseJSON,\n  common,\n  crypto,\n  InvalidFormatError,\n  IOHelper,\n  JSONHelper,\n  UInt160,\n  UInt256,\n  UInt256Hex,\n} from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport { Equals, EquatableKey } from './Equatable';\nimport { UnsignedBlockError } from './errors';\nimport { Header, HeaderKey } from './Header';\nimport { createSerializeWire, DeserializeWireBaseOptions, SerializeJSONContext, SerializeWire } from './Serializable';\nimport { utils } from './utils';\nimport { Witness } from './Witness';\n\nexport interface BlockGetScriptHashesForVerifyingOptions {\n  readonly getHeader: (key: HeaderKey) => Promise<Header>;\n}\n\nexport interface BlockBaseAdd {\n  readonly version?: number;\n  readonly previousHash: UInt256;\n  readonly merkleRoot: UInt256;\n  readonly timestamp: number;\n  readonly index: number;\n  readonly consensusData: BN;\n  readonly nextConsensus: UInt160;\n  readonly script?: Witness;\n  readonly hash?: UInt256;\n}\n\nexport abstract class BlockBase implements EquatableKey {\n  public static deserializeBlockBaseWireBase(options: DeserializeWireBaseOptions): BlockBaseAdd {\n    const { reader } = options;\n\n    const version = reader.readUInt32LE();\n    const previousHash = reader.readUInt256();\n    const merkleRoot = reader.readUInt256();\n    const timestamp = reader.readUInt32LE();\n    const index = reader.readUInt32LE();\n    const consensusData = reader.readUInt64LE();\n    const nextConsensus = reader.readUInt160();\n    if (reader.readUInt8() !== 1) {\n      throw new InvalidFormatError(`Expected BinaryReader\\'s readUInt8(0) to be 1. Received: ${reader.readUInt8()}`);\n    }\n    const script = Witness.deserializeWireBase(options);\n\n    return {\n      version,\n      previousHash,\n      merkleRoot,\n      timestamp,\n      index,\n      consensusData,\n      nextConsensus,\n      script,\n    };\n  }\n\n  public readonly version: number;\n  public readonly previousHash: UInt256;\n  public readonly merkleRoot: UInt256;\n  public readonly timestamp: number;\n  public readonly index: number;\n  public readonly consensusData: BN;\n  public readonly nextConsensus: UInt160;\n  // tslint:disable-next-line no-any\n  public readonly equals: Equals = utils.equals(this.constructor as any, this, (other: any) =>\n    common.uInt256Equal(this.hash, other.hash),\n  );\n  public readonly toKeyString = utils.toKeyString(BlockBase, () => this.hashHex);\n  public readonly getScriptHashesForVerifying = utils.lazyAsync(\n    async ({ getHeader }: BlockGetScriptHashesForVerifyingOptions) => {\n      if (this.index === 0) {\n        return new Set([common.uInt160ToHex(crypto.toScriptHash(this.script.verification))]);\n      }\n\n      const previousHeader = await getHeader({\n        hashOrIndex: this.previousHash,\n      });\n\n      return new Set([common.uInt160ToHex(previousHeader.nextConsensus)]);\n    },\n  );\n  public readonly serializeUnsigned: SerializeWire = createSerializeWire(this.serializeUnsignedBase.bind(this));\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly hashInternal: () => UInt256;\n  private readonly hashHexInternal = utils.lazy(() => common.uInt256ToHex(this.hash));\n  private readonly messageInternal = utils.lazy(() => this.serializeUnsigned());\n  private readonly scriptInternal: Witness | undefined;\n  private readonly sizeInternal = utils.lazy(\n    () =>\n      IOHelper.sizeOfUInt32LE +\n      IOHelper.sizeOfUInt256 +\n      IOHelper.sizeOfUInt256 +\n      IOHelper.sizeOfUInt32LE +\n      IOHelper.sizeOfUInt32LE +\n      IOHelper.sizeOfUInt64LE +\n      IOHelper.sizeOfUInt160 +\n      IOHelper.sizeOfUInt8 +\n      this.script.size +\n      this.sizeExclusive(),\n  );\n\n  public constructor({\n    version = 0,\n    previousHash,\n    merkleRoot,\n    timestamp,\n    index,\n    consensusData,\n    nextConsensus,\n    script,\n    hash,\n  }: BlockBaseAdd) {\n    this.version = version;\n    this.previousHash = previousHash;\n    this.merkleRoot = merkleRoot;\n    this.timestamp = timestamp;\n    this.index = index;\n    this.consensusData = consensusData;\n    this.nextConsensus = nextConsensus;\n    this.scriptInternal = script;\n    const hashIn = hash;\n    this.hashInternal = hashIn === undefined ? utils.lazy(() => crypto.hash256(this.message)) : () => hashIn;\n  }\n\n  public get hash(): UInt256 {\n    return this.hashInternal();\n  }\n\n  public get hashHex(): UInt256Hex {\n    return this.hashHexInternal();\n  }\n\n  public get message(): Buffer {\n    return this.messageInternal();\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public get script(): Witness {\n    if (this.scriptInternal === undefined) {\n      throw new UnsignedBlockError(common.uInt256ToString(this.hash));\n    }\n\n    return this.scriptInternal;\n  }\n\n  public serializeUnsignedBase(writer: BinaryWriter): void {\n    writer.writeUInt32LE(this.version);\n    writer.writeUInt256(this.previousHash);\n    writer.writeUInt256(this.merkleRoot);\n    writer.writeUInt32LE(this.timestamp);\n    writer.writeUInt32LE(this.index);\n    writer.writeUInt64LE(this.consensusData);\n    writer.writeUInt160(this.nextConsensus);\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    this.serializeUnsignedBase(writer);\n    writer.writeUInt8(1);\n    this.script.serializeWireBase(writer);\n  }\n\n  public serializeBlockBaseJSON(context: SerializeJSONContext): BlockBaseJSON {\n    return {\n      version: this.version,\n      hash: JSONHelper.writeUInt256(this.hash),\n      size: this.size,\n      previousblockhash: JSONHelper.writeUInt256(this.previousHash),\n      merkleroot: JSONHelper.writeUInt256(this.merkleRoot),\n      time: this.timestamp,\n      index: this.index,\n      nonce: JSONHelper.writeUInt64LE(this.consensusData),\n      nextconsensus: crypto.scriptHashToAddress({\n        addressVersion: context.addressVersion,\n        scriptHash: this.nextConsensus,\n      }),\n\n      script: this.script.serializeJSON(context),\n      confirmations: 0,\n    };\n  }\n\n  protected readonly sizeExclusive: () => number = () => 0;\n}\n","import {\n  BinaryWriter,\n  common,\n  createSerializeWire,\n  IOHelper,\n  SerializableWire,\n  SerializeWire,\n  UInt160,\n  UInt160Hex,\n} from '@neo-one/client-common';\nimport { Equals, Equatable } from './Equatable';\nimport { DeserializeWireBaseOptions, DeserializeWireOptions } from './Serializable';\nimport { Input } from './transaction';\nimport { BinaryReader, utils } from './utils';\n\nexport interface AccountInputKey {\n  readonly hash: UInt160;\n  readonly input: Input;\n}\n\nexport interface AccountInputsKey {\n  readonly hash: UInt160;\n}\n\nexport interface AccountInputAdd {\n  readonly hash: UInt160;\n  readonly input: Input;\n}\n\nexport class AccountInput implements Equatable, SerializableWire<AccountInput> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): AccountInput {\n    const { reader } = options;\n    const hash = reader.readUInt160();\n    const input = Input.deserializeWireBase(options);\n\n    return new AccountInput({ hash, input });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): AccountInput {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly hash: UInt160;\n  public readonly hashHex: UInt160Hex;\n  public readonly input: Input;\n  public readonly equals: Equals = utils.equals(\n    AccountInput,\n    this,\n    (other) => common.uInt160Equal(this.hash, other.hash) && this.input.equals(other.input),\n  );\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly sizeInternal: () => number;\n\n  public constructor({ hash, input }: AccountInputAdd) {\n    this.hash = hash;\n    this.hashHex = common.uInt160ToHex(hash);\n    this.input = input;\n    this.sizeInternal = utils.lazy(() => IOHelper.sizeOfUInt160 + this.input.size);\n  }\n\n  public get size(): number {\n    return this.sizeInternal();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt160(this.hash);\n    this.input.serializeWireBase(writer);\n  }\n}\n","import { InvalidConsensusMessageTypeError } from '../../errors';\n\nexport enum ConsensusMessageType {\n  ChangeView = 0x00,\n  PrepareRequest = 0x20,\n  PrepareResponse = 0x21,\n}\n\nconst isConsensusMessageType = (value: number): value is ConsensusMessageType =>\n  // tslint:disable-next-line strict-type-predicates\n  ConsensusMessageType[value] !== undefined;\n\nexport const assertConsensusMessageType = (value: number): ConsensusMessageType => {\n  if (isConsensusMessageType(value)) {\n    return value;\n  }\n  throw new InvalidConsensusMessageTypeError(value);\n};\n","import { common, ECPoint, UInt256 } from '@neo-one/client-common';\nimport { Type } from './types';\n\nexport interface ContextAdd {\n  readonly type: Type;\n  readonly previousHash: UInt256;\n  readonly blockIndex: number;\n  readonly viewNumber: number;\n  readonly myIndex: number;\n  readonly primaryIndex: number;\n  readonly expectedView: readonly number[];\n  readonly validators: readonly ECPoint[];\n  readonly blockReceivedTimeSeconds: number;\n}\n\n// tslint:disable-next-line no-any\nexport class Context<TTHis extends Context<TTHis> = Context<any>> {\n  public readonly version: number;\n  public readonly type: Type;\n  public readonly previousHash: UInt256;\n  public readonly blockIndex: number;\n  public readonly viewNumber: number;\n  public readonly myIndex: number;\n  public readonly primaryIndex: number;\n  public readonly expectedView: readonly number[];\n  public readonly validators: readonly ECPoint[];\n  public readonly blockReceivedTimeSeconds: number;\n\n  public constructor({\n    type,\n    previousHash,\n    blockIndex,\n    viewNumber,\n    myIndex,\n    primaryIndex,\n    expectedView,\n    validators,\n    blockReceivedTimeSeconds,\n  }: ContextAdd) {\n    this.version = 0;\n    this.type = type;\n    this.previousHash = previousHash;\n    this.blockIndex = blockIndex;\n    this.viewNumber = viewNumber;\n    this.myIndex = myIndex;\n    this.primaryIndex = primaryIndex;\n    this.expectedView = expectedView;\n    this.validators = validators;\n    this.blockReceivedTimeSeconds = blockReceivedTimeSeconds;\n  }\n\n  public get M(): number {\n    return Math.floor(this.validators.length - (this.validators.length - 1) / 3);\n  }\n\n  public cloneExpectedView(_options: { readonly expectedView: readonly number[] }): TTHis {\n    throw new Error('Not Implemented');\n  }\n\n  public toJSON(): object {\n    return {\n      class: this.constructor.name,\n      version: this.version,\n      type: this.type,\n      previousHash: common.uInt256ToString(this.previousHash),\n      blockIndex: this.blockIndex,\n      viewNumber: this.viewNumber,\n      myIndex: this.myIndex,\n      primaryIndex: this.primaryIndex,\n      expectedView: [...this.expectedView],\n      validators: this.validators.map((validator) => common.ecPointToString(validator)),\n\n      blockReceivedTimeSeconds: this.blockReceivedTimeSeconds,\n    };\n  }\n}\n","import { JSONRPCLocalProvider } from '@neo-one/node-browser';\nimport { comlink } from '@neo-one/worker';\n\ncomlink.expose(JSONRPCLocalProvider, self);\n","// tslint:disable-next-line no-any\nexport const makeErrorWithCode = <T extends any[]>(key: string, getMessage: (...args: T) => string) =>\n  class extends Error {\n    public constructor(...args: T) {\n      super(getMessage(...args));\n    }\n\n    public get name() {\n      return `${super.name} [${key}]`;\n    }\n\n    public get code() {\n      return key;\n    }\n  };\n","export enum Labels {\n  SERVICE = 'service',\n  COMPONENT = 'component',\n  // Database instance name. E.g. main\n  DB_INSTANCE = 'db.instance',\n  // Database statement. E.g. SELECT * FROM wuser table;\n  DB_STATEMENT = 'db.statement',\n  // Database type. For any SQL database, \"sql\". For others, the lower-case\n  // database category, e.g. \"cassandra\", \"hbase\", or \"redis\".\n  DB_TYPE = 'db.type',\n  // Username for accessing database. E.g., \"readonly_user\" or \"reporting_user\"\n  DB_USER = 'db.user',\n  // true if and only if the application considers the operation to have failed\n  ERROR = 'error',\n  // Error code if available or constructor name\n  ERROR_KIND = 'error.kind',\n  // Actual Error object\n  ERROR_OBJECT = 'error.object',\n  // Error stack\n  ERROR_STACK = 'stack',\n  // HTTP method of the request for the associated Span. E.g., \"GET\", \"POST\"\n  HTTP_METHOD = 'http.method',\n  // HTTP response status code for the associated Span. E.g., 200, 503, 404\n  HTTP_STATUS_CODE = 'http.status_code',\n  // URL of the request being handled in this segment of the trace, in standard\n  // URI format. E.g., \"https://domain.net/path/to?resource=here\"\n  HTTP_URL = 'http.url',\n  // An address at which messages can be exchanged. E.g. A Kafka record has an\n  // associated \"topic name\" that can be extracted by the instrumented producer\n  // or consumer and stored using this tag.\n  MESSAGE_BUS_DESTINATION = 'message_bus.destination',\n  // Remote \"address\", suitable for use in a networking client library. This may\n  // be a \"ip:port\", a bare \"hostname\", a FQDN, or even a JDBC substring like\n  // \"mysql://prod-db:3306\"\n  PEER_ADDRESS = 'peer.address',\n  // Remote hostname. E.g., \"opentracing.io\", \"internal.dns.name\"\n  PEER_HOSTNAME = 'peer.hostname',\n  // Remote IPv4 address as a .-separated tuple. E.g., \"127.0.0.1\"\n  PEER_IPV4 = 'peer.ipv4',\n  // Remote IPv6 address as a string of colon-separated 4-char hex tuples.\n  // E.g., \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\"\n  PEER_IPV6 = 'peer.ipv6',\n  // Remote port. E.g., 80\n  PEER_PORT = 'peer.port',\n  // Remote service name (for some unspecified definition of \"service\").\n  // E.g., \"elasticsearch\", \"a_custom_microservice\", \"memcache\"\n  PEER_SERVICE = 'peer.service',\n  // If greater than 0, a hint to the Tracer to do its best to capture the\n  // trace. If 0, a hint to the trace to not-capture the trace. If absent,\n  // the Tracer should use its default sampling mechanism.\n  SAMPLING_PRIORITY = 'sampling.priority',\n  // Either \"client\" or \"server\" for the appropriate roles in an RPC, and\n  // \"producer\" or \"consumer\" for the appropriate roles in a messaging scenario.\n  SPAN_KIND = 'span.kind',\n\n  // Low cardinality version of db.statement\n  DB_STATEMENT_SUMMARY = 'db.statement.summary',\n  // The path of the request. Must be low cardinality. E.g. /account/:id\n  // not /account/123\n  HTTP_PATH = 'http.path',\n  // Full path of the request, high cardinality.\n  HTTP_FULLPATH = 'http.full_path',\n  // The user agent for the request.\n  HTTP_USER_AGENT = 'http.user_agent',\n  // Request length\n  HTTP_REQUEST_SIZE = 'http.request.size',\n  // Headers\n  HTTP_HEADERS = 'http.headers',\n  // Request protocol\n  HTTP_REQUEST_PROTOCOL = 'http.request.protocol',\n  // Request querystring\n  HTTP_REQUEST_QUERY = 'http.request.query',\n  // RPC method called. E.g. getblock.\n  RPC_METHOD = 'rpc.method',\n  // RPC type, e.g. jsonrpc.\n  RPC_TYPE = 'rpc.type',\n  // additional ones taken in from `@neo-one/utils'\n  PLUGIN_NAME = 'plugin.name',\n  RESOURCETYPE_NAME = 'resource_type.name',\n  NODE_NAME = 'node.name',\n  OP_CODE = 'neo.op.code',\n  NEO_ADDRESS = 'neo.address',\n  NODE_OPTIONSPATH = 'node.options_path',\n  NEO_TRANSACTION_HASH = 'neo.transaction.hash',\n  NEO_TRANSACTION_TYPE = 'neo.transaction.type',\n  NEO_TRANSACTION_FOUND = 'neo.transaction.found',\n  NEO_CONSENSUS_HASH = 'neo.consensus.hash',\n  NEO_BLOCK_INDEX = 'neo.block.index',\n  CALL_METHOD = 'call.method',\n  INVOKE_METHOD = 'invoke.method',\n  INVOKE_RAW_METHOD = 'invoke_raw.method',\n  JSONRPC_TYPE = 'jsonrpc.type',\n  COMMAND_NAME = 'command.name',\n}\n\nexport const labelToTag = (label: string) => ({\n  name: label.replace(/\\./g, '_'),\n});\n\nexport const labelsToTags = (labels: readonly string[]) => labels.map(labelToTag);\n","// tslint:disable: no-submodule-imports\nimport { tracing } from '@opencensus/web-core';\nimport { NoopExporter } from '@opencensus/web-core/build/src/exporters/noop_exporter';\nimport { TraceContextFormat } from '@opencensus/web-propagation-tracecontext';\nimport { Exporter, Span, SpanKind } from '@opencensus/web-types';\nimport { AggregationType, Measure, MeasureUnit, Stats } from '@opencensus/web-types/build/src/stats/types';\nimport { TagMap } from '@opencensus/web-types/build/src/tags/tag-map';\n\nconst tracer = tracing.tracer;\n\nconst startTracing = (exporter: Exporter) => {\n  tracing.start({\n    propagation: new TraceContextFormat(),\n    exporter,\n  });\n\n  return () => {\n    tracing.unregisterExporter(exporter);\n    tracing.stop();\n  };\n};\n\n// tslint:disable-next-line: no-any\nconst noOp = (..._args: readonly any[]): any => {\n  //\n};\n\nconst globalStats: Stats = {\n  createView: noOp,\n  registerView: noOp,\n  createMeasureDouble: noOp,\n  createMeasureInt64: noOp,\n  record: noOp,\n  clear: noOp,\n  getMetrics: noOp,\n  registerExporter: noOp,\n  unregisterExporter: noOp,\n  withTagContext: noOp,\n  getCurrentTagContext: noOp,\n};\n\nexport {\n  TraceContextFormat,\n  Span,\n  SpanKind,\n  AggregationType,\n  Measure,\n  MeasureUnit,\n  TagMap,\n  NoopExporter,\n  tracer,\n  startTracing,\n  globalStats,\n};\n","import { common, ECPoint, InvalidFormatError, UInt160, UInt256 } from '@neo-one/client-common';\nimport { BN } from 'bn.js';\nimport _ from 'lodash';\n\nexport class BinaryReader {\n  public readonly buffer: Buffer;\n  private mutableIndex: number;\n\n  public constructor(buffer: Buffer, index = 0) {\n    this.buffer = buffer;\n    this.mutableIndex = index;\n  }\n\n  public get index(): number {\n    return this.mutableIndex;\n  }\n\n  public get remaining(): number {\n    return this.buffer.length - this.mutableIndex;\n  }\n\n  public get remainingBuffer(): Buffer {\n    return this.buffer.slice(this.mutableIndex);\n  }\n\n  public hasMore(): boolean {\n    return this.mutableIndex < this.buffer.byteLength;\n  }\n\n  public clone(): BinaryReader {\n    return new BinaryReader(this.buffer, this.mutableIndex);\n  }\n\n  public readBytes(numBytes: number): Buffer {\n    this.checkRead(numBytes);\n    const result = this.buffer.slice(this.mutableIndex, this.mutableIndex + numBytes);\n    this.mutableIndex += numBytes;\n\n    return result;\n  }\n\n  public readInt8(): number {\n    this.checkRead(1);\n    const result = this.buffer.readInt8(this.mutableIndex);\n    this.mutableIndex += 1;\n\n    return result;\n  }\n\n  public readUInt8(): number {\n    this.checkRead(1);\n    const result = this.buffer.readUInt8(this.mutableIndex);\n    this.mutableIndex += 1;\n\n    return result;\n  }\n\n  public readBoolean(): boolean {\n    return this.readBytes(1)[0] !== 0;\n  }\n\n  public readInt16LE(): number {\n    this.checkRead(2);\n    const result = this.buffer.readInt16LE(this.mutableIndex);\n    this.mutableIndex += 2;\n\n    return result;\n  }\n\n  public readUInt16LE(): number {\n    this.checkRead(2);\n    const result = this.buffer.readUInt16LE(this.mutableIndex);\n    this.mutableIndex += 2;\n\n    return result;\n  }\n\n  public readUInt16BE(): number {\n    this.checkRead(2);\n    const result = this.buffer.readUInt16BE(this.mutableIndex);\n    this.mutableIndex += 2;\n\n    return result;\n  }\n\n  public readInt32LE(): number {\n    this.checkRead(4);\n    const result = this.buffer.readInt32LE(this.mutableIndex);\n    this.mutableIndex += 4;\n\n    return result;\n  }\n\n  public readUInt32LE(): number {\n    this.checkRead(4);\n    const result = this.buffer.readUInt32LE(this.mutableIndex);\n    this.mutableIndex += 4;\n\n    return result;\n  }\n\n  public readUInt64LE(): BN {\n    return new BN(this.readBytes(8), 'le');\n  }\n\n  public readInt64LE(): BN {\n    const buffer = this.readBytes(8);\n\n    return new BN(buffer, 'le').fromTwos(buffer.length * 8);\n  }\n\n  // NEO specific\n  public readUInt160(): UInt160 {\n    return common.bufferToUInt160(this.readBytes(common.UINT160_BUFFER_BYTES));\n  }\n\n  public readUInt256(): UInt256 {\n    return common.bufferToUInt256(this.readBytes(common.UINT256_BUFFER_BYTES));\n  }\n\n  public readFixed8(): BN {\n    return this.readInt64LE();\n  }\n\n  public readFixedString(length: number): string {\n    const values = _.takeWhile([...this.readBytes(length)], (value) => value !== 0);\n\n    return Buffer.from(values).toString('utf8');\n  }\n\n  public readArray<T>(read: () => T, max = 0x1000000): readonly T[] {\n    const count = this.readVarUIntLE(new BN(max)).toNumber();\n\n    return _.range(count).map(read);\n  }\n\n  public readObject<V>(\n    read: () => { readonly key: number; readonly value: V },\n    max?: number,\n  ): { readonly [key: number]: V };\n  public readObject<V>(\n    read: () => { readonly key: string; readonly value: V },\n    max?: number,\n  ): { readonly [key: string]: V };\n  public readObject<V>(\n    read: () => { readonly key: string | number; readonly value: V },\n    max = 0x1000000,\n  ): { readonly [key: string]: V } {\n    const count = this.readVarUIntLE(new BN(max)).toNumber();\n\n    return _.range(count).reduce<{ readonly [key: string]: V }>((acc) => {\n      const { key, value } = read();\n\n      return { ...acc, [key]: value };\n    }, {});\n  }\n\n  public readVarBytesLE(max = 0x1000000): Buffer {\n    return this.readBytes(this.readVarUIntLE(new BN(max)).toNumber());\n  }\n\n  public readVarUIntLE(max: BN = new BN('18446744073709551615', 10)): BN {\n    const fb = this.readUInt8();\n    let value: BN;\n    switch (fb) {\n      case 0xfd:\n        value = new BN(this.readUInt16LE());\n        break;\n      case 0xfe:\n        value = new BN(this.readUInt32LE());\n        break;\n      case 0xff:\n        value = this.readUInt64LE();\n        break;\n      default:\n        value = new BN(fb);\n    }\n\n    if (value.gt(max)) {\n      throw new InvalidFormatError(`Integer too large: ${value.toString(10)} > ${max.toString(10)}`);\n    }\n\n    return value;\n  }\n\n  public readVarString(max = 0x1000000): string {\n    return this.readVarBytesLE(max).toString('utf8');\n  }\n\n  public readECPoint(): ECPoint {\n    const firstByte = this.readBytes(1);\n    if (firstByte[0] === common.ECPOINT_INFINITY_BYTE) {\n      return common.ECPOINT_INFINITY;\n    }\n\n    return common.bufferToECPoint(Buffer.concat([firstByte, this.readBytes(common.ECPOINT_BUFFER_BYTES - 1)]));\n  }\n\n  private checkRead(numBytes: number): void {\n    if (this.remaining < numBytes) {\n      throw new InvalidFormatError(`Insufficient bytes remaining (${this.remaining}): ${numBytes}`);\n    }\n  }\n}\n","import {\n  AttributeModel,\n  InputModel,\n  OutputModel,\n  TransactionBaseModel,\n  TransactionBaseModelAdd,\n  TransactionTypeModel,\n  WitnessModel,\n} from '@neo-one/client-common';\nimport { InvalidVersionError } from '../../errors';\n\nexport type IssueTransactionModelAdd<\n  TAttribute extends AttributeModel = AttributeModel,\n  TInput extends InputModel = InputModel,\n  TOutput extends OutputModel = OutputModel,\n  TWitness extends WitnessModel = WitnessModel\n> = TransactionBaseModelAdd<TAttribute, TInput, TOutput, TWitness>;\n\nexport class IssueTransactionModel<\n  TAttribute extends AttributeModel = AttributeModel,\n  TInput extends InputModel = InputModel,\n  TOutput extends OutputModel = OutputModel,\n  TWitness extends WitnessModel = WitnessModel\n> extends TransactionBaseModel<TransactionTypeModel.Issue, TAttribute, TInput, TOutput, TWitness> {\n  public constructor({\n    version,\n    attributes,\n    inputs,\n    outputs,\n    scripts,\n    hash,\n  }: IssueTransactionModelAdd<TAttribute, TInput, TOutput, TWitness>) {\n    super({\n      version,\n      type: TransactionTypeModel.Issue,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n      hash,\n    });\n\n    if (this.version !== 0) {\n      throw new InvalidVersionError(0, this.version);\n    }\n  }\n\n  public clone({\n    scripts = this.scripts,\n    attributes = this.attributes,\n    inputs = this.inputs,\n    outputs = this.outputs,\n  }: {\n    readonly scripts?: readonly TWitness[];\n    readonly attributes?: readonly TAttribute[];\n    readonly inputs?: readonly TInput[];\n    readonly outputs?: readonly TOutput[];\n  }): this {\n    // tslint:disable-next-line no-any\n    return new (this.constructor as any)({\n      version: this.version,\n      attributes,\n      inputs,\n      outputs,\n      scripts,\n    });\n  }\n}\n","import {\n  BinaryWriter,\n  common,\n  ContractParameterTypeModel,\n  createSerializeWire,\n  crypto,\n  SerializableWire,\n  SerializeWire,\n  UInt160,\n  UInt160Hex,\n  utils,\n} from '@neo-one/client-common';\nimport { BaseState } from './BaseState';\nimport { ContractPropertyStateModel, HasDynamicInvoke, HasPayable, HasStorage } from './ContractPropertyStateModel';\n\nexport interface ContractModelAdd {\n  readonly hash?: UInt160;\n  readonly version?: number;\n  readonly script: Buffer;\n  readonly parameterList: readonly ContractParameterTypeModel[];\n  readonly returnType: ContractParameterTypeModel;\n  readonly contractProperties: ContractPropertyStateModel;\n  readonly name: string;\n  readonly codeVersion: string;\n  readonly author: string;\n  readonly email: string;\n  readonly description: string;\n}\n\nexport class ContractModel extends BaseState implements SerializableWire<ContractModel> {\n  public readonly script: Buffer;\n  public readonly parameterList: readonly ContractParameterTypeModel[];\n  public readonly returnType: ContractParameterTypeModel;\n  public readonly name: string;\n  public readonly codeVersion: string;\n  public readonly author: string;\n  public readonly email: string;\n  public readonly description: string;\n  public readonly contractProperties: ContractPropertyStateModel;\n  public readonly hasStorage: boolean;\n  public readonly hasDynamicInvoke: boolean;\n  public readonly payable: boolean;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n  private readonly hashInternal = utils.lazy(() => crypto.toScriptHash(this.script));\n  private readonly hashHexInternal = utils.lazy(() => common.uInt160ToHex(this.hash));\n\n  public constructor({\n    version,\n    script,\n    parameterList,\n    returnType,\n    name,\n    codeVersion,\n    author,\n    email,\n    description,\n    contractProperties,\n  }: ContractModelAdd) {\n    super({ version });\n    this.script = script;\n    this.parameterList = parameterList;\n    this.returnType = returnType;\n    this.name = name;\n    this.codeVersion = codeVersion;\n    this.author = author;\n    this.email = email;\n    this.description = description;\n    this.contractProperties = contractProperties;\n\n    this.hasStorage = HasStorage.has(this.contractProperties);\n    this.hasDynamicInvoke = HasDynamicInvoke.has(this.contractProperties);\n    this.payable = HasPayable.has(this.contractProperties);\n  }\n\n  public get hash(): UInt160 {\n    return this.hashInternal();\n  }\n\n  public get hashHex(): UInt160Hex {\n    return this.hashHexInternal();\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    serializeContractWireBase({ writer, contract: this });\n  }\n}\n\nexport const serializeContractWireBase = ({\n  writer,\n  contract,\n  publishVersion,\n}: {\n  readonly writer: BinaryWriter;\n  readonly contract: ContractModel;\n  readonly publishVersion?: number;\n}): void => {\n  writer.writeVarBytesLE(contract.script);\n  writer.writeVarBytesLE(Buffer.from(contract.parameterList as ContractParameterTypeModel[]));\n  writer.writeUInt8(contract.returnType);\n  if (publishVersion === undefined || /*istanbul ignore next */ publishVersion >= 1) {\n    writer.writeUInt8(contract.contractProperties);\n  }\n  writer.writeVarString(contract.name);\n  writer.writeVarString(contract.codeVersion);\n  writer.writeVarString(contract.author);\n  writer.writeVarString(contract.email);\n  writer.writeVarString(contract.description);\n};\n","import { BinaryWriter, HeaderJSON, InvalidFormatError, IOHelper, UInt256 } from '@neo-one/client-common';\nimport { BlockBase, BlockBaseAdd } from './BlockBase';\nimport {\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializableWire,\n  SerializeJSONContext,\n} from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport type HeaderAdd = BlockBaseAdd;\nexport interface HeaderKey {\n  readonly hashOrIndex: UInt256 | number;\n}\n\nexport class Header extends BlockBase implements SerializableWire<Header>, SerializableJSON<HeaderJSON> {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): Header {\n    const { reader } = options;\n    const blockBase = super.deserializeBlockBaseWireBase(options);\n    if (reader.readUInt8() !== 0) {\n      throw new InvalidFormatError(\n        `Expected Header BinaryReader readUInt8(0) to be 0. Received: ${reader.readUInt8()}`,\n      );\n    }\n\n    return new this({\n      version: blockBase.version,\n      previousHash: blockBase.previousHash,\n      merkleRoot: blockBase.merkleRoot,\n      timestamp: blockBase.timestamp,\n      index: blockBase.index,\n      consensusData: blockBase.consensusData,\n      nextConsensus: blockBase.nextConsensus,\n      script: blockBase.script,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Header {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  protected readonly sizeExclusive: () => number = utils.lazy(() => IOHelper.sizeOfUInt8);\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    super.serializeWireBase(writer);\n    writer.writeUInt8(0);\n  }\n\n  public async serializeJSON(context: SerializeJSONContext): Promise<HeaderJSON> {\n    return super.serializeBlockBaseJSON(context);\n  }\n}\n","import {\n  assertContractParameterType,\n  common,\n  ContractJSON,\n  IOHelper,\n  JSONHelper,\n  toJSONContractParameterType,\n  UInt160,\n} from '@neo-one/client-common';\nimport { assertContractPropertyState, ContractModel } from '@neo-one/client-full-common';\nimport { ContractParameterType } from './contractParameter';\nimport { ContractPropertyState } from './ContractPropertyState';\nimport { Equals, EquatableKey } from './Equatable';\nimport {\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableJSON,\n  SerializeJSONContext,\n} from './Serializable';\nimport { BinaryReader, utils } from './utils';\n\nexport interface ContractKey {\n  readonly hash: UInt160;\n}\nexport interface ContractAdd {\n  readonly hash?: UInt160;\n  readonly version?: number;\n  readonly script: Buffer;\n  readonly parameterList: readonly ContractParameterType[];\n  readonly returnType: ContractParameterType;\n  readonly contractProperties: ContractPropertyState;\n  readonly name: string;\n  readonly codeVersion: string;\n  readonly author: string;\n  readonly email: string;\n  readonly description: string;\n}\n\nexport class Contract extends ContractModel implements SerializableJSON<ContractJSON>, EquatableKey {\n  public static deserializeWireBase(options: DeserializeWireBaseOptions): Contract {\n    return deserializeContractWireBase({\n      context: options.context,\n      reader: options.reader,\n    });\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): Contract {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly equals: Equals = utils.equals(Contract, this, (other) => common.uInt160Equal(this.hash, other.hash));\n  public readonly toKeyString = utils.toKeyString(Contract, () => this.hashHex);\n  private readonly contractSizeInternal = utils.lazy(() =>\n    sizeOfContract({\n      script: this.script,\n      parameterList: this.parameterList,\n      name: this.name,\n      codeVersion: this.codeVersion,\n      author: this.author,\n      email: this.email,\n      description: this.description,\n    }),\n  );\n\n  public get size(): number {\n    return this.contractSizeInternal();\n  }\n\n  public serializeJSON(_context: SerializeJSONContext): ContractJSON {\n    return {\n      version: this.version,\n      hash: JSONHelper.writeUInt160(this.hash),\n      script: JSONHelper.writeBuffer(this.script),\n      parameters: this.parameterList.map(toJSONContractParameterType),\n\n      returntype: toJSONContractParameterType(this.returnType),\n      name: this.name,\n      code_version: this.codeVersion,\n      author: this.author,\n      email: this.email,\n      description: this.description,\n      properties: {\n        storage: this.hasStorage,\n        dynamic_invoke: this.hasDynamicInvoke,\n        payable: this.payable,\n      },\n    };\n  }\n}\n\nexport const sizeOfContract = ({\n  script,\n  parameterList,\n  name,\n  codeVersion,\n  author,\n  email,\n  description,\n  publishVersion,\n}: {\n  readonly script: Buffer;\n  readonly parameterList: readonly ContractParameterType[];\n  readonly name: string;\n  readonly codeVersion: string;\n  readonly author: string;\n  readonly email: string;\n  readonly description: string;\n  readonly publishVersion?: number;\n}) =>\n  IOHelper.sizeOfVarBytesLE(script) +\n  IOHelper.sizeOfVarBytesLE(Buffer.from(parameterList as ContractParameterType[])) +\n  IOHelper.sizeOfUInt8 +\n  (publishVersion === undefined ? IOHelper.sizeOfBoolean : 0) +\n  IOHelper.sizeOfVarString(name) +\n  IOHelper.sizeOfVarString(codeVersion) +\n  IOHelper.sizeOfVarString(author) +\n  IOHelper.sizeOfVarString(email) +\n  IOHelper.sizeOfVarString(description);\n\nexport const deserializeContractWireBase = ({\n  reader,\n  publishVersion,\n}: {\n  readonly publishVersion?: number;\n} & DeserializeWireBaseOptions): Contract => {\n  const script = reader.readVarBytesLE();\n  const parameterList = [...reader.readVarBytesLE()].map(assertContractParameterType);\n\n  const returnType = assertContractParameterType(reader.readUInt8());\n  const contractProperties =\n    publishVersion === undefined || publishVersion >= 1\n      ? assertContractPropertyState(reader.readUInt8())\n      : ContractPropertyState.NoProperty;\n  const name = reader.readVarString(252);\n  const codeVersion = reader.readVarString(252);\n  const author = reader.readVarString(252);\n  const email = reader.readVarString(252);\n  const description = reader.readVarString(65536);\n\n  return new Contract({\n    script,\n    parameterList,\n    returnType,\n    contractProperties,\n    name,\n    codeVersion,\n    author,\n    email,\n    description,\n  });\n};\n","import { InvalidActionTypeError } from '../errors';\n\nexport enum ActionType {\n  Log = 0x00,\n  Notification = 0x01,\n}\n\nconst isActionType = (value: number): value is ActionType =>\n  // tslint:disable-next-line strict-type-predicates\n  ActionType[value] !== undefined;\n\nexport const assertActionType = (value: number): ActionType => {\n  if (isActionType(value)) {\n    return value;\n  }\n\n  throw new InvalidActionTypeError(value);\n};\n","import { BinaryWriter } from '@neo-one/client-common';\nimport {\n  createSerializeWire,\n  DeserializeWireBaseOptions,\n  DeserializeWireOptions,\n  SerializableWire,\n  SerializeWire,\n} from '../../Serializable';\nimport { BinaryReader } from '../../utils';\nimport { ConsensusMessageType } from './ConsensusMessageType';\n\nexport interface ConsensusMessageBaseAdd {\n  readonly viewNumber: number;\n}\n\nexport interface ConsensusMessageBaseAddWithType<Type extends ConsensusMessageType> extends ConsensusMessageBaseAdd {\n  readonly type: Type;\n}\n\n// tslint:disable-next-line no-any\nexport class ConsensusMessageBase<T = any, Type extends ConsensusMessageType = ConsensusMessageType>\n  implements SerializableWire<T> {\n  public static readonly VERSION = 0;\n  public static readonly deserializeConsensusMessageBaseWireBase = ({ reader }: DeserializeWireBaseOptions) => {\n    const type = reader.readUInt8();\n    const viewNumber = reader.readUInt8();\n\n    return {\n      type,\n      viewNumber,\n    };\n  };\n\n  public static deserializeWireBase(_options: DeserializeWireBaseOptions): ConsensusMessageBase {\n    throw new Error('Not Implemented');\n  }\n\n  public static deserializeWire(options: DeserializeWireOptions): ConsensusMessageBase {\n    return this.deserializeWireBase({\n      context: options.context,\n      reader: new BinaryReader(options.buffer),\n    });\n  }\n\n  public readonly type: Type;\n  public readonly viewNumber: number;\n  public readonly serializeWire: SerializeWire = createSerializeWire(this.serializeWireBase.bind(this));\n\n  public constructor({ type, viewNumber }: ConsensusMessageBaseAddWithType<Type>) {\n    this.type = type;\n    this.viewNumber = viewNumber;\n  }\n\n  public serializeWireBase(writer: BinaryWriter): void {\n    writer.writeUInt8(this.type);\n    writer.writeUInt8(this.viewNumber);\n  }\n}\n","import { common, ECPoint, UInt160, UInt256, UInt256Hex } from '@neo-one/client-common';\nimport { Block, MerkleTree } from '@neo-one/node-core';\nimport { BN } from 'bn.js';\nimport { Context } from './Context';\nimport { Transactions, Type } from './types';\n\ninterface HeaderContextAdd {\n  readonly type: Type;\n  readonly viewNumber: number;\n  readonly myIndex: number;\n  readonly primaryIndex: number;\n  readonly expectedView: readonly number[];\n  readonly validators: readonly ECPoint[];\n  readonly blockReceivedTimeSeconds: number;\n  readonly transactions: Transactions;\n  readonly signatures: ReadonlyArray<Buffer | undefined>;\n  readonly header:\n    | {\n        readonly type: 'new';\n        readonly previousHash: UInt256;\n        readonly transactionHashes: readonly UInt256Hex[];\n        readonly blockIndex: number;\n        readonly nonce: BN;\n        readonly timestamp: number;\n        readonly nextConsensus: UInt160;\n      }\n    | {\n        readonly type: 'existing';\n        readonly block: Block;\n        readonly transactionHashes: readonly UInt256Hex[];\n      };\n}\n\n// tslint:disable-next-line no-any\nexport class HeaderContext<T extends HeaderContext<T> = HeaderContext<any>> extends Context<T> {\n  public readonly transactions: Transactions;\n  public readonly transactionHashes: readonly UInt256Hex[];\n  public readonly transactionHashesSet: Set<UInt256Hex>;\n  public readonly signatures: ReadonlyArray<Buffer | undefined>;\n  public readonly header: Block;\n\n  public constructor({\n    type,\n    viewNumber,\n    myIndex,\n    primaryIndex,\n    expectedView,\n    validators,\n    blockReceivedTimeSeconds,\n    transactions,\n    signatures,\n    header,\n  }: HeaderContextAdd) {\n    const previousHash = header.type === 'existing' ? header.block.previousHash : header.previousHash;\n    const transactionHashes = header.transactionHashes;\n    const blockIndex = header.type === 'existing' ? header.block.index : header.blockIndex;\n    const nonce = header.type === 'existing' ? header.block.consensusData : header.nonce;\n    const timestamp = header.type === 'existing' ? header.block.timestamp : header.timestamp;\n    const nextConsensus = header.type === 'existing' ? header.block.nextConsensus : header.nextConsensus;\n    super({\n      type,\n      previousHash,\n      blockIndex,\n      viewNumber,\n      myIndex,\n      primaryIndex,\n      expectedView,\n      validators,\n      blockReceivedTimeSeconds,\n    });\n\n    this.transactions = transactions;\n    this.transactionHashes = transactionHashes;\n    this.transactionHashesSet = new Set(transactionHashes);\n    this.signatures = signatures;\n    if (header.type === 'existing') {\n      this.header = header.block;\n    } else {\n      this.header = new Block({\n        version: this.version,\n        previousHash: this.previousHash,\n        merkleRoot: MerkleTree.computeRoot(this.transactionHashes.map((hash) => common.hexToUInt256(hash))),\n\n        timestamp,\n        index: this.blockIndex,\n        consensusData: nonce,\n        nextConsensus,\n        transactions: [],\n      });\n    }\n  }\n\n  public cloneSignatures(_options: { readonly signatures: ReadonlyArray<Buffer | undefined> }): T {\n    throw new Error('Not Implemented');\n  }\n\n  public toJSON(): object {\n    return {\n      ...super.toJSON(),\n      transactionHashes: this.transactionHashes.map((hash) => common.uInt256ToString(hash)),\n\n      signatures: this.signatures.map((signature) =>\n        signature === undefined ? 'undefined' : signature.toString('hex'),\n      ),\n    };\n  }\n}\n"],"sourceRoot":""}