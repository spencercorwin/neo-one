{"version":3,"sources":["webpack:///index.ts","webpack:///comlink.ts","webpack:///endpoint.ts","webpack:///Transpiler.ts","webpack:///transpile.ts","webpack:///transpiler.init.ts"],"names":["_comlink__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_endpoint__WEBPACK_IMPORTED_MODULE_1__","TRANSFERABLE_TYPES","ArrayBuffer","MessagePort","uid","Math","floor","random","Number","MAX_SAFE_INTEGER","proxyValueSymbol","Symbol","throwSymbol","transferHandlers","Map","canHandle","obj","Function","serialize","port1","port2","MessageChannel","expose","deserialize","proxy","Error","message","stack","Object","assign","pingPongMessageCounter","endpoint","target","isWindow","windowEndpoint","isEndpoint","activateEndpoint","cbProxy","cb","callPath","arguments","length","undefined","Proxy","construct","_target","argumentsList","type","apply","_thisArg","slice","[object Object]","property","then","r","Promise","resolve","bind","concat","set","value","_proxy","async","args","irequest","map","wrapValue","unwrapValue","msg","transferables","id","attachMessageHandler","handler","event","data","f","removeEventListener","detachMessageHandler","postMessage","pingPongMessage","transferableProperties","proxyValue","rootObj","iresult","that","reduce","propName","e","makeInvocationResult","arg","key","transferHandler","wrappedChildren","iterateUnhandledProperties","handleProperty","path","visited","WeakSet","has","add","isView","keys","push","wrappedValue","wrappedChild","get","isRawWrappedValue","wrappedChildValue","join","newValue","replaceValueInObjectAtPath","newVal","lastKey","w","self","constructor","name","addEventListener","transfer","isMessagePort","start","every","prop","isTransferable","thing","some","iterateAllProperties","getEndpoint","endpointIn","close","isWorker","worker","terminate","activate","endpointEndpoint","Transpiler","_transpile__WEBPACK_IMPORTED_MODULE_1__","transpile","_babel_plugin_proposal_async_generator_functions__WEBPACK_IMPORTED_MODULE_0__","_babel_plugin_proposal_async_generator_functions__WEBPACK_IMPORTED_MODULE_0___default","n","_babel_plugin_proposal_class_properties__WEBPACK_IMPORTED_MODULE_1__","_babel_plugin_proposal_class_properties__WEBPACK_IMPORTED_MODULE_1___default","_babel_plugin_proposal_numeric_separator__WEBPACK_IMPORTED_MODULE_2__","_babel_plugin_proposal_numeric_separator__WEBPACK_IMPORTED_MODULE_2___default","_babel_plugin_proposal_object_rest_spread__WEBPACK_IMPORTED_MODULE_3__","_babel_plugin_proposal_object_rest_spread__WEBPACK_IMPORTED_MODULE_3___default","_babel_plugin_proposal_optional_catch_binding__WEBPACK_IMPORTED_MODULE_4__","_babel_plugin_proposal_optional_catch_binding__WEBPACK_IMPORTED_MODULE_4___default","_babel_plugin_transform_modules_commonjs__WEBPACK_IMPORTED_MODULE_5__","_babel_plugin_transform_modules_commonjs__WEBPACK_IMPORTED_MODULE_5___default","_babel_plugin_transform_typescript__WEBPACK_IMPORTED_MODULE_6__","_babel_plugin_transform_typescript__WEBPACK_IMPORTED_MODULE_6___default","_babel_preset_react__WEBPACK_IMPORTED_MODULE_7__","_babel_preset_react__WEBPACK_IMPORTED_MODULE_7___default","_babel_standalone__WEBPACK_IMPORTED_MODULE_8__","initialized","a","code","codeIn","cwd","filename","sourceFileName","sourceMaps","presets","plugins","isTSX","sourceURL","location","origin","sourceMap","_neo_one_worker__WEBPACK_IMPORTED_MODULE_0__","_Transpiler__WEBPACK_IMPORTED_MODULE_1__"],"mappings":"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","file":"workers.21.b6cc925c.js","sourcesContent":["import * as comlink from './comlink';\nimport * as endpoint from './endpoint';\n\nexport { comlink, endpoint };\nexport * from './WorkerManager';\nexport { Disposable } from './types';\n","// tslint:disable\nexport interface Endpoint {\n  postMessage(message: any, transfer?: any[]): void;\n  addEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n  removeEventListener(type: string, listener: (event: MessageEvent) => void, options?: {}): void;\n}\nexport type Proxy = Function;\ntype CBProxyCallback = (bpcd: CBProxyCallbackDescriptor) => {}; // eslint-disable-line no-unused-vars\ntype Transferable = MessagePort | ArrayBuffer; // eslint-disable-line no-unused-vars\nexport type Exposable = Function | Object; // eslint-disable-line no-unused-vars\n\ninterface InvocationResult {\n  type: 'RETURN';\n  id?: string;\n  value: WrappedValue;\n}\n\ntype WrappedValue = RawWrappedValue | HandledWrappedValue;\n\ninterface PropertyIteratorEntry {\n  value: {};\n  path: string[];\n}\n\ninterface WrappedChildValue {\n  path: string[];\n  wrappedValue: HandledWrappedValue;\n}\n\ninterface RawWrappedValue {\n  type: 'RAW';\n  value: {};\n  wrappedChildren?: WrappedChildValue[];\n}\n\ninterface HandledWrappedValue {\n  type: string;\n  value: {};\n}\n\ntype CBProxyCallbackDescriptor = CBPCDGet | CBPCDApply | CBPCDConstruct | CBPCDSet; // eslint-disable-line no-unused-vars\n\ninterface CBPCDGet {\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface CBPCDApply {\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDConstruct {\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: {}[];\n}\n\ninterface CBPCDSet {\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: {};\n}\n\ntype InvocationRequest =\n  | GetInvocationRequest\n  | ApplyInvocationRequest\n  | ConstructInvocationRequest\n  | SetInvocationRequest;\n\ninterface GetInvocationRequest {\n  id?: string;\n  type: 'GET';\n  callPath: PropertyKey[];\n}\n\ninterface ApplyInvocationRequest {\n  id?: string;\n  type: 'APPLY';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface ConstructInvocationRequest {\n  id?: string;\n  type: 'CONSTRUCT';\n  callPath: PropertyKey[];\n  argumentsList: WrappedValue[];\n}\n\ninterface SetInvocationRequest {\n  id?: string;\n  type: 'SET';\n  callPath: PropertyKey[];\n  property: PropertyKey;\n  value: WrappedValue;\n}\n\nexport interface TransferHandler {\n  canHandle: (obj: {}) => Boolean;\n  serialize: (obj: {}) => {};\n  deserialize: (obj: {}) => {};\n}\n\nconst TRANSFERABLE_TYPES = [ArrayBuffer, MessagePort];\nconst uid: number = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n\nconst proxyValueSymbol = Symbol('proxyValue');\nconst throwSymbol = Symbol('throw');\nconst proxyTransferHandler: TransferHandler = {\n  canHandle: (obj: {}): Boolean => {\n    return obj && ((obj as any)[proxyValueSymbol] || obj instanceof Function);\n  },\n  serialize: (obj: {}): {} => {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return port2;\n  },\n  deserialize: (obj: {}): {} => {\n    return proxy(obj as MessagePort);\n  },\n};\n\nconst throwTransferHandler = {\n  canHandle: (obj: {}): Boolean => (obj && (obj as any)[throwSymbol]) || obj instanceof Error,\n  serialize: (obj: any): {} => {\n    const message = obj && obj.message;\n    const stack = obj && obj.stack;\n    return Object.assign({}, obj, { message, stack });\n  },\n  deserialize: (obj: {}): {} => {\n    throw Object.assign(Error(), obj);\n  },\n};\n\nexport const transferHandlers: Map<string, TransferHandler> = new Map([\n  ['PROXY', proxyTransferHandler] as const,\n  ['THROW', throwTransferHandler] as const,\n]);\n\nlet pingPongMessageCounter: number = 0;\n\nexport function proxy(endpoint: Endpoint | Window, target?: any): Proxy {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  return cbProxy(\n    async (irequest) => {\n      let args: WrappedValue[] = [];\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') args = irequest.argumentsList.map(wrapValue);\n      const response = await pingPongMessage(\n        endpoint as Endpoint,\n        Object.assign({}, irequest, { argumentsList: args }),\n        transferableProperties(args),\n      );\n      const result = response.data as InvocationResult;\n      return unwrapValue(result.value);\n    },\n    [],\n    target,\n  );\n}\n\nexport function proxyValue<T>(obj: T): T {\n  if (obj instanceof MessagePort) {\n    return obj;\n  }\n\n  (obj as any)[proxyValueSymbol] = true;\n  return obj;\n}\n\nexport function expose(rootObj: Exposable, endpoint: Endpoint | Window): void {\n  if (isWindow(endpoint)) endpoint = windowEndpoint(endpoint);\n  if (!isEndpoint(endpoint))\n    throw Error('endpoint does not have all of addEventListener, removeEventListener and postMessage defined');\n\n  activateEndpoint(endpoint);\n  attachMessageHandler(endpoint, async function(event: MessageEvent) {\n    if (!event.data.id || !event.data.callPath) return;\n    let iresult;\n    const irequest = event.data as InvocationRequest;\n    try {\n      const that = await irequest.callPath.slice(0, -1).reduce((obj, propName) => obj[propName], rootObj as any);\n      let args: Array<{}> = [];\n\n      if (irequest.type === 'APPLY' || irequest.type === 'CONSTRUCT') {\n        args = irequest.argumentsList.map(unwrapValue);\n      }\n      if (irequest.type === 'APPLY') {\n        if (irequest.callPath.length > 0) {\n          iresult = await that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await that(...args);\n        }\n      }\n      if (irequest.type === 'CONSTRUCT') {\n        if (irequest.callPath.length > 0) {\n          iresult = await new that[irequest.callPath[irequest.callPath.length - 1]](...args);\n        } else {\n          iresult = await new that(...args);\n        }\n        iresult = proxyValue(iresult);\n      }\n      if (irequest.type === 'SET' || irequest.type === 'GET') {\n        const obj = irequest.callPath.length > 0 ? await that[irequest.callPath[irequest.callPath.length - 1]] : that;\n        if (irequest.type === 'SET') {\n          obj[irequest.property] = irequest.value;\n          // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n          // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n          iresult = true;\n        } else {\n          iresult = obj;\n        }\n      }\n    } catch (e) {\n      iresult = e;\n      iresult[throwSymbol] = true;\n    }\n\n    iresult = makeInvocationResult(irequest, iresult);\n    return (endpoint as Endpoint).postMessage(iresult, transferableProperties([iresult]));\n  });\n}\n\nfunction wrapValue(arg: {}): WrappedValue {\n  // Is arg itself handled by a TransferHandler?\n  for (const [key, transferHandler] of transferHandlers) {\n    if (transferHandler.canHandle(arg)) {\n      return {\n        type: key,\n\n        value: transferHandler.serialize(arg),\n      };\n    }\n  }\n\n  // If not, traverse the entire object and find handled values.\n  let wrappedChildren: WrappedChildValue[] = [];\n  iterateUnhandledProperties(arg, (value, path) => {\n    for (const [key, transferHandler] of transferHandlers) {\n      if (transferHandler.canHandle(value)) {\n        wrappedChildren.push({\n          path,\n          wrappedValue: {\n            type: key,\n            value: transferHandler.serialize(value),\n          },\n        });\n\n        return true;\n      }\n    }\n\n    return false;\n  });\n\n  for (const wrappedChild of wrappedChildren) {\n    const container = wrappedChild.path.slice(0, -1).reduce((obj, key) => obj[key], arg as any);\n    container[wrappedChild.path[wrappedChild.path.length - 1]] = null;\n  }\n  return {\n    type: 'RAW',\n    value: arg,\n    wrappedChildren,\n  };\n}\n\nfunction unwrapValue(arg: WrappedValue): {} {\n  if (transferHandlers.has(arg.type)) {\n    const transferHandler = transferHandlers.get(arg.type)!;\n    return transferHandler.deserialize(arg.value);\n  } else if (isRawWrappedValue(arg)) {\n    for (const wrappedChildValue of arg.wrappedChildren || []) {\n      if (!transferHandlers.has(wrappedChildValue.wrappedValue.type))\n        throw Error(`Unknown value type \"${arg.type}\" at ${wrappedChildValue.path.join('.')}`);\n      const transferHandler = transferHandlers.get(wrappedChildValue.wrappedValue.type)!;\n      const newValue = transferHandler.deserialize(wrappedChildValue.wrappedValue.value);\n      replaceValueInObjectAtPath(arg.value, wrappedChildValue.path, newValue);\n    }\n    return arg.value;\n  } else {\n    throw Error(`Unknown value type \"${arg.type}\"`);\n  }\n}\n\nfunction replaceValueInObjectAtPath(obj: {}, path: string[], newVal: {}) {\n  const lastKey = path.slice(-1)[0];\n  const lastObj = path.slice(0, -1).reduce((obj: any, key: string) => obj[key], obj);\n  lastObj[lastKey] = newVal;\n}\n\nfunction isRawWrappedValue(arg: WrappedValue): arg is RawWrappedValue {\n  return arg.type === 'RAW';\n}\n\nfunction windowEndpoint(w: Window): Endpoint {\n  if (self.constructor.name !== 'Window') throw Error('self is not a window');\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n  };\n}\n\nexport function isEndpoint(endpoint: any): endpoint is Endpoint {\n  return 'addEventListener' in endpoint && 'removeEventListener' in endpoint && 'postMessage' in endpoint;\n}\n\nfunction activateEndpoint(endpoint: Endpoint): void {\n  if (isMessagePort(endpoint)) endpoint.start();\n}\n\nfunction attachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Checking all possible types of `endpoint` manually satisfies TypeScript’s\n  // type checker. Not sure why the inference is failing here. Since it’s\n  // unnecessary code I’m going to resort to `any` for now.\n  // if(isWorker(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isMessagePort(endpoint))\n  //   endpoint.addEventListener('message', f);\n  // if(isOtherWindow(endpoint))\n  //   endpoint.addEventListener('message', f);\n  (endpoint as any).addEventListener('message', f);\n}\n\nfunction detachMessageHandler(endpoint: Endpoint, f: (e: MessageEvent) => void): void {\n  // Same as above.\n  (<any>endpoint).removeEventListener('message', f);\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === 'MessagePort';\n}\n\nfunction isWindow(endpoint: Endpoint | Window): endpoint is Window {\n  // TODO: This doesn’t work on cross-origin iframes.\n  // return endpoint.constructor.name === 'Window';\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\n/**\n * `pingPongMessage` sends a `postMessage` and waits for a reply. Replies are\n * identified by a unique id that is attached to the payload.\n */\nfunction pingPongMessage(endpoint: Endpoint, msg: Object, transferables: Transferable[]): Promise<MessageEvent> {\n  const id = `${uid}-${pingPongMessageCounter++}`;\n\n  return new Promise((resolve) => {\n    attachMessageHandler(endpoint, function handler(event: MessageEvent) {\n      if (event.data.id !== id || event.data.type !== 'RETURN') return;\n      detachMessageHandler(endpoint, handler);\n      resolve(event);\n    });\n\n    // Copy msg and add `id` property\n    msg = Object.assign({}, msg, { id });\n    endpoint.postMessage(msg, transferables);\n  });\n}\n\nfunction cbProxy(cb: CBProxyCallback, callPath: PropertyKey[] = [], target = function() {}): Proxy {\n  return new Proxy(target, {\n    construct(_target, argumentsList, proxy) {\n      return cb({\n        type: 'CONSTRUCT',\n        callPath,\n        argumentsList,\n      });\n    },\n    apply(_target, _thisArg, argumentsList) {\n      // We use `bind` as an indicator to have a remote function bound locally.\n      // The actual target for `bind()` is currently ignored.\n      if (callPath[callPath.length - 1] === 'bind') return cbProxy(cb, callPath.slice(0, -1));\n      return cb({\n        type: 'APPLY',\n        callPath: callPath[callPath.length - 1] === 'apply' ? callPath.slice(0, -1) : callPath,\n        argumentsList: callPath[callPath.length - 1] === 'apply' ? argumentsList[1] : argumentsList,\n      });\n    },\n    get(_target, property, proxy) {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      if (property === 'then' && callPath.length === 0) {\n        return { then: () => proxy };\n      } else if (property === 'then') {\n        const r = cb({\n          type: 'GET',\n          callPath,\n        });\n        return Promise.resolve(r).then.bind(r);\n      } else {\n        return cbProxy(cb, callPath.concat(property), (<any>_target)[property]);\n      }\n    },\n    set(_target, property, value, _proxy): boolean {\n      if (property === proxyValueSymbol) {\n        return true;\n      }\n\n      return cb({\n        type: 'SET',\n        callPath,\n        property,\n        value,\n      }) as boolean;\n    },\n  });\n}\n\nexport function isTransferable(thing: {}): thing is Transferable {\n  return TRANSFERABLE_TYPES.some((type) => thing instanceof type);\n}\n\nfunction iterateUnhandledProperties(\n  value: {} | undefined,\n  handleProperty: (value: any, path: string[]) => boolean,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): void {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  if (handleProperty(value, path)) return;\n\n  const keys = Object.keys(value);\n  for (const key of keys) iterateUnhandledProperties((value as any)[key], handleProperty, [...path, key], visited);\n}\n\nfunction* iterateAllProperties(\n  value: {} | undefined,\n  path: string[] = [],\n  visited: WeakSet<{}> | null = null,\n): Iterable<PropertyIteratorEntry> {\n  if (!value) return;\n  if (!visited) visited = new WeakSet<{}>();\n  if (visited.has(value)) return;\n  if (typeof value === 'string') return;\n  if (typeof value === 'object') visited.add(value);\n  if (ArrayBuffer.isView(value)) return;\n  yield { value, path };\n\n  const keys = Object.keys(value);\n  for (const key of keys) yield* iterateAllProperties((value as any)[key], [...path, key], visited);\n}\n\nexport function transferableProperties(obj: {}[] | undefined): Transferable[] {\n  const r: Transferable[] = [];\n  for (const prop of iterateAllProperties(obj)) {\n    if (isTransferable(prop.value)) r.push(prop.value);\n  }\n  return r;\n}\n\nfunction makeInvocationResult(irequest: InvocationRequest, obj: {}): InvocationResult {\n  return {\n    type: 'RETURN',\n    id: irequest.id,\n    value: wrapValue(obj),\n  };\n}\n","// tslint:disable no-any\nimport * as comlink from './comlink';\n\nexport type EndpointLike = comlink.Endpoint | Window | Worker | WorkerEndpoint;\nexport interface WorkerEndpoint extends comlink.Endpoint {\n  readonly start: () => void;\n  readonly close: () => void;\n}\n\nfunction isWorkerEndpoint(endpoint: EndpointLike): endpoint is WorkerEndpoint {\n  return ['postMessage', 'addEventListener', 'removeEventListener', 'start', 'close'].every((prop) => prop in endpoint);\n}\n\nfunction isWindow(endpoint: EndpointLike): endpoint is Window {\n  return ['window', 'length', 'location', 'parent', 'opener'].every((prop) => prop in endpoint);\n}\n\nfunction isWorker(endpoint: EndpointLike): endpoint is Worker {\n  return ['onmessage', 'postMessage', 'terminate', 'addEventListener', 'removeEventListener'].every(\n    (prop) => prop in endpoint,\n  );\n}\n\nfunction windowEndpoint(w: Window): WorkerEndpoint {\n  if (self.constructor.name !== 'Window') {\n    throw Error('self is not a window');\n  }\n\n  return {\n    addEventListener: self.addEventListener.bind(self) as any,\n    removeEventListener: self.removeEventListener.bind(self) as any,\n    postMessage: (msg, transfer) => w.postMessage(msg, '*', transfer),\n    start: () => {\n      // do nothing\n    },\n    close: () => {\n      // do nothing\n    },\n  };\n}\n\nfunction workerEndpoint(worker: Worker): WorkerEndpoint {\n  return {\n    addEventListener: worker.addEventListener.bind(worker) as any,\n    removeEventListener: worker.removeEventListener.bind(worker) as any,\n    postMessage: worker.postMessage.bind(worker),\n    start: () => {\n      // do nothing\n    },\n    close: worker.terminate.bind(worker),\n  };\n}\n\nfunction endpointEndpoint(endpoint: comlink.Endpoint): WorkerEndpoint {\n  return {\n    addEventListener: endpoint.addEventListener.bind(endpoint),\n    removeEventListener: endpoint.removeEventListener.bind(endpoint),\n    postMessage: endpoint.postMessage.bind(endpoint),\n    start: () => {\n      activate(endpoint);\n    },\n    close: () => {\n      if ((endpoint as any).close) {\n        (endpoint as any).close();\n      }\n    },\n  };\n}\n\nexport function getEndpoint(endpointIn: EndpointLike): WorkerEndpoint {\n  return isWorkerEndpoint(endpointIn)\n    ? endpointIn\n    : isWindow(endpointIn)\n    ? windowEndpoint(endpointIn)\n    : isWorker(endpointIn)\n    ? workerEndpoint(endpointIn)\n    : endpointEndpoint(endpointIn);\n}\n\nexport function activate(endpoint: any): void {\n  if (endpoint.start) {\n    endpoint.start();\n  }\n}\n","import { transpile, TranspileResult } from './transpile';\n\nexport class Transpiler {\n  public async transpile(path: string, value: string): Promise<TranspileResult> {\n    return transpile(path, value);\n  }\n}\n","// tslint:disable no-submodule-imports no-import-side-effect\n// @ts-ignore\nimport babelPluginProposalAsyncGeneratorFunctions from '@babel/plugin-proposal-async-generator-functions';\n// @ts-ignore\nimport babelPluginProposalClassProperties from '@babel/plugin-proposal-class-properties';\n// @ts-ignore\nimport babelPluginProposalNumericSeparator from '@babel/plugin-proposal-numeric-separator';\n// @ts-ignore\nimport babelPluginProposalObjectRestSprerad from '@babel/plugin-proposal-object-rest-spread';\n// @ts-ignore\nimport babelPluginProposalOptionalCatchBinding from '@babel/plugin-proposal-optional-catch-binding';\n// @ts-ignore\nimport babelPluginTransformModulesCommonJS from '@babel/plugin-transform-modules-commonjs';\n// @ts-ignore\nimport babelPluginTransformTypeScript from '@babel/plugin-transform-typescript';\n// @ts-ignore\nimport babelPresetReact from '@babel/preset-react';\n// @ts-ignore\nimport * as Babel from '@babel/standalone';\nimport { RawSourceMap } from 'source-map';\n\n// tslint:disable-next-line no-let\nlet initialized = false;\nconst initialize = () => {\n  if (initialized) {\n    return;\n  }\n  initialized = true;\n\n  Babel.registerPreset('@babel/preset-react', babelPresetReact);\n  Babel.registerPlugin('@babel/plugin-proposal-class-properties', babelPluginProposalClassProperties);\n  Babel.registerPlugin('@babel/plugin-proposal-object-rest-spread', babelPluginProposalObjectRestSprerad);\n  Babel.registerPlugin('@babel/plugin-proposal-optional-catch-binding', babelPluginProposalOptionalCatchBinding);\n  Babel.registerPlugin('@babel/plugin-proposal-async-generator-functions', babelPluginProposalAsyncGeneratorFunctions);\n  Babel.registerPlugin('@babel/plugin-proposal-numeric-separator', babelPluginProposalNumericSeparator);\n  Babel.registerPlugin('@babel/plugin-transform-typescript', babelPluginTransformTypeScript);\n  Babel.registerPlugin('@babel/plugin-transform-modules-commonjs', babelPluginTransformModulesCommonJS);\n};\n\nexport interface TranspileResult {\n  readonly code: string;\n  readonly sourceMap: RawSourceMap;\n}\n\nexport const transpile = (path: string, value: string): TranspileResult => {\n  initialize();\n\n  const { code: codeIn, map } = Babel.transform(value, {\n    cwd: '/',\n    filename: path,\n    sourceFileName: path,\n    sourceMaps: 'both',\n    presets: ['@babel/preset-react'],\n    plugins: [\n      '@babel/plugin-proposal-class-properties',\n      '@babel/plugin-proposal-object-rest-spread',\n      '@babel/plugin-proposal-optional-catch-binding',\n      '@babel/plugin-proposal-async-generator-functions',\n      '@babel/plugin-proposal-numeric-separator',\n      '@babel/plugin-transform-modules-commonjs',\n      ['@babel/plugin-transform-typescript', { isTSX: true }],\n    ],\n  });\n\n  const sourceURL = `//# sourceURL=${location.origin}${path}`;\n  const code = `${codeIn}\\n${sourceURL}`;\n\n  return { code, sourceMap: map };\n};\n","import { comlink } from '@neo-one/worker';\nimport { Transpiler } from './Transpiler';\n\ncomlink.expose(Transpiler, self);\n"],"sourceRoot":""}